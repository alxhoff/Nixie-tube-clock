
nixie_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800866c  0800866c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800866c  0800866c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800866c  0800866c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b84  200000c8  0800873c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c4c  0800873c  00021c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001baeb  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f7b  00000000  00000000  0003bbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  0003fb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a8  00000000  00000000  000414a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba86  00000000  00000000  00042c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6e7  00000000  00000000  0005e6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097aa8  00000000  00000000  00078db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011085d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007140  00000000  00000000  001108b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c8 	.word	0x200000c8
 800012c:	00000000 	.word	0x00000000
 8000130:	080084e8 	.word	0x080084e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000cc 	.word	0x200000cc
 800014c:	080084e8 	.word	0x080084e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	; 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ce:	2afd      	cmp	r2, #253	; 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	; 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	; 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	; 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <buttonsInit>:

//buttons_t buttons_dev = { 0 };
button_t buttons[BUTTON_COUNT] = { 0 };
QueueHandle_t button_queue = NULL;

void buttonsInit() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/*Configure GPIO pin : PF3 */
	GPIO_InitStruct.Pin = RIGHT_BUTTON_PIN;
 8000622:	2340      	movs	r3, #64	; 0x40
 8000624:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(RIGHT_BUTTON_PORT, &GPIO_InitStruct);
 800062e:	463b      	mov	r3, r7
 8000630:	4619      	mov	r1, r3
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <buttonsInit+0x64>)
 8000634:	f002 fb44 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC0 */
	GPIO_InitStruct.Pin = CENTER_BUTTON_PIN;
 8000638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(CENTER_BUTTON_PORT, &GPIO_InitStruct);
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <buttonsInit+0x68>)
 800064c:	f002 fb38 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA3 */
	GPIO_InitStruct.Pin = LEFT_BUTTON_PIN;
 8000650:	2302      	movs	r3, #2
 8000652:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(LEFT_BUTTON_PORT, &GPIO_InitStruct);
 800065c:	463b      	mov	r3, r7
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <buttonsInit+0x64>)
 8000662:	f002 fb2d 	bl	8002cc0 <HAL_GPIO_Init>

	button_queue = xQueueCreate(1, sizeof(unsigned char));
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	2001      	movs	r0, #1
 800066c:	f004 fe8b 	bl	8005386 <xQueueGenericCreate>
 8000670:	4603      	mov	r3, r0
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <buttonsInit+0x6c>)
 8000674:	6013      	str	r3, [r2, #0]
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40010800 	.word	0x40010800
 8000684:	40011000 	.word	0x40011000
 8000688:	200000fc 	.word	0x200000fc

0800068c <buttonsGet>:

unsigned char buttonsGet(void) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
	unsigned char b = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	71fb      	strb	r3, [r7, #7]

	if (button_queue)
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <buttonsGet+0x2c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <buttonsGet+0x20>
		xQueueReceive(button_queue, &b, 0);
 800069e:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <buttonsGet+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1df9      	adds	r1, r7, #7
 80006a4:	2200      	movs	r2, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 f864 	bl	8005774 <xQueueReceive>

	return b;
 80006ac:	79fb      	ldrb	r3, [r7, #7]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000fc 	.word	0x200000fc

080006bc <buttonsCheck>:

unsigned char buttonsCheck(GPIO_TypeDef *port, uint16_t pin, button_t *button) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	460b      	mov	r3, r1
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	817b      	strh	r3, [r7, #10]
	if (HAL_GetTick() - button->prev_press > DEBOUNCE_DELAY) {
 80006ca:	f002 f9eb 	bl	8002aa4 <HAL_GetTick>
 80006ce:	4602      	mov	r2, r0
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b32      	cmp	r3, #50	; 0x32
 80006d8:	d91e      	bls.n	8000718 <buttonsCheck+0x5c>
		GPIO_PinState but = !HAL_GPIO_ReadPin(port, pin);
 80006da:	897b      	ldrh	r3, [r7, #10]
 80006dc:	4619      	mov	r1, r3
 80006de:	68f8      	ldr	r0, [r7, #12]
 80006e0:	f002 fc72 	bl	8002fc8 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	bf0c      	ite	eq
 80006ea:	2301      	moveq	r3, #1
 80006ec:	2300      	movne	r3, #0
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	75fb      	strb	r3, [r7, #23]
		if (but != button->state) {
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	7dfa      	ldrb	r2, [r7, #23]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d00d      	beq.n	8000718 <buttonsCheck+0x5c>
			if (button->state)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <buttonsCheck+0x50>
				button->state = 0;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e002      	b.n	8000712 <buttonsCheck+0x56>
			else
				button->state = 1;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]

			return button->state;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	e000      	b.n	800071a <buttonsCheck+0x5e>
		}
	}
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(volatile uint16_t GPIO_Pin) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b33      	ldr	r3, [pc, #204]	; (8000800 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000734:	615a      	str	r2, [r3, #20]
	unsigned char ret = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73fb      	strb	r3, [r7, #15]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]

	if (GPIO_Pin == LEFT_BUTTON_PIN) {
 800073e:	88fb      	ldrh	r3, [r7, #6]
 8000740:	b29b      	uxth	r3, r3
 8000742:	2b02      	cmp	r3, #2
 8000744:	d112      	bne.n	800076c <HAL_GPIO_EXTI_Callback+0x48>
		if (buttonsCheck(LEFT_BUTTON_PORT, LEFT_BUTTON_PIN, &buttons[0])) {
 8000746:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000748:	2102      	movs	r1, #2
 800074a:	482f      	ldr	r0, [pc, #188]	; (8000808 <HAL_GPIO_EXTI_Callback+0xe4>)
 800074c:	f7ff ffb6 	bl	80006bc <buttonsCheck>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d037      	beq.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
			ret |= BUTTON_MASK_LEFT;
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	4828      	ldr	r0, [pc, #160]	; (8000808 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000766:	f002 fc5e 	bl	8003026 <HAL_GPIO_TogglePin>
 800076a:	e02c      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
		}
	} else if (GPIO_Pin == CENTER_BUTTON_PIN) {
 800076c:	88fb      	ldrh	r3, [r7, #6]
 800076e:	b29b      	uxth	r3, r3
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000774:	d112      	bne.n	800079c <HAL_GPIO_EXTI_Callback+0x78>
		if (buttonsCheck(CENTER_BUTTON_PORT, CENTER_BUTTON_PIN, &buttons[1])) {
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <HAL_GPIO_EXTI_Callback+0xec>)
 800077e:	f7ff ff9d 	bl	80006bc <buttonsCheck>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01e      	beq.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
			ret |= BUTTON_MASK_CENTER;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	b2db      	uxtb	r3, r3
 8000790:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000792:	2120      	movs	r1, #32
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000796:	f002 fc46 	bl	8003026 <HAL_GPIO_TogglePin>
 800079a:	e014      	b.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
		}
	} else if (GPIO_Pin == RIGHT_BUTTON_PIN) {
 800079c:	88fb      	ldrh	r3, [r7, #6]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	2b40      	cmp	r3, #64	; 0x40
 80007a2:	d110      	bne.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
		if (buttonsCheck(RIGHT_BUTTON_PORT, RIGHT_BUTTON_PIN, &buttons[2])) {
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <HAL_GPIO_EXTI_Callback+0xf0>)
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <HAL_GPIO_EXTI_Callback+0xe4>)
 80007aa:	f7ff ff87 	bl	80006bc <buttonsCheck>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d008      	beq.n	80007c6 <HAL_GPIO_EXTI_Callback+0xa2>
			ret |= BUTTON_MASK_RIGHT;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	f043 0304 	orr.w	r3, r3, #4
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	73fb      	strb	r3, [r7, #15]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007be:	2120      	movs	r1, #32
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <HAL_GPIO_EXTI_Callback+0xec>)
 80007c2:	f002 fc30 	bl	8003026 <HAL_GPIO_TogglePin>
		}
	}
	if (button_queue != NULL)
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d008      	beq.n	80007e0 <HAL_GPIO_EXTI_Callback+0xbc>
		xQueueSendToFrontFromISR(button_queue, &ret, &xHigherPriorityTaskWoken);
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_GPIO_EXTI_Callback+0xf4>)
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	f107 0208 	add.w	r2, r7, #8
 80007d6:	f107 010f 	add.w	r1, r7, #15
 80007da:	2301      	movs	r3, #1
 80007dc:	f004 ff32 	bl	8005644 <xQueueGenericSendFromISR>

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d007      	beq.n	80007f6 <HAL_GPIO_EXTI_Callback+0xd2>
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <HAL_GPIO_EXTI_Callback+0xf8>)
 80007e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	f3bf 8f4f 	dsb	sy
 80007f2:	f3bf 8f6f 	isb	sy
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010400 	.word	0x40010400
 8000804:	200000e4 	.word	0x200000e4
 8000808:	40010800 	.word	0x40010800
 800080c:	200000ec 	.word	0x200000ec
 8000810:	40011000 	.word	0x40011000
 8000814:	200000f4 	.word	0x200000f4
 8000818:	200000fc 	.word	0x200000fc
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <dec2bcd>:
	unsigned char offset;
	unsigned char MSB_temp;
	unsigned char LSB_temp;
} ds3231_registers_t;

unsigned char dec2bcd(unsigned char d) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	return ((d / 10 * 16) + (d % 10));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4a0c      	ldr	r2, [pc, #48]	; (8000860 <dec2bcd+0x40>)
 800082e:	fba2 2303 	umull	r2, r3, r2, r3
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	b2d8      	uxtb	r0, r3
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <dec2bcd+0x40>)
 800083e:	fba3 1302 	umull	r1, r3, r3, r2
 8000842:	08d9      	lsrs	r1, r3, #3
 8000844:	460b      	mov	r3, r1
 8000846:	009b      	lsls	r3, r3, #2
 8000848:	440b      	add	r3, r1
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	b2db      	uxtb	r3, r3
 8000850:	4403      	add	r3, r0
 8000852:	b2db      	uxtb	r3, r3
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	cccccccd 	.word	0xcccccccd

08000864 <bcd2dec>:

unsigned char bcd2dec(unsigned char b) {
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	return ((b / 16 * 10) + (b % 16));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	091b      	lsrs	r3, r3, #4
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	b2db      	uxtb	r3, r3
 8000886:	4413      	add	r3, r2
 8000888:	b2db      	uxtb	r3, r3
}
 800088a:	4618      	mov	r0, r3
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <DS3231_set_date>:
		*hour = bcd2dec(return_hour & 0x3F);
	}
}

signed char DS3231_set_date(I2C_HandleTypeDef *hi2c, uint16_t year,
		unsigned char month, unsigned char date, unsigned char weekday) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af04      	add	r7, sp, #16
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	4608      	mov	r0, r1
 800089e:	4611      	mov	r1, r2
 80008a0:	461a      	mov	r2, r3
 80008a2:	4603      	mov	r3, r0
 80008a4:	807b      	strh	r3, [r7, #2]
 80008a6:	460b      	mov	r3, r1
 80008a8:	707b      	strb	r3, [r7, #1]
 80008aa:	4613      	mov	r3, r2
 80008ac:	703b      	strb	r3, [r7, #0]
	unsigned char write_buffer[4];
	unsigned char century = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	73fb      	strb	r3, [r7, #15]

	if (year > 2000) {
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008b8:	d906      	bls.n	80008c8 <DS3231_set_date+0x34>
		century = 0x80;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	73fb      	strb	r3, [r7, #15]
		year -= 2000;
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80008c4:	807b      	strh	r3, [r7, #2]
 80008c6:	e005      	b.n	80008d4 <DS3231_set_date+0x40>
	} else {
		century = 0x00;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
		year -= 1900;
 80008cc:	887b      	ldrh	r3, [r7, #2]
 80008ce:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 80008d2:	807b      	strh	r3, [r7, #2]
	}

	write_buffer[0] = dec2bcd(weekday);
 80008d4:	7e3b      	ldrb	r3, [r7, #24]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff ffa2 	bl	8000820 <dec2bcd>
 80008dc:	4603      	mov	r3, r0
 80008de:	723b      	strb	r3, [r7, #8]
	write_buffer[1] = dec2bcd(date);
 80008e0:	783b      	ldrb	r3, [r7, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff9c 	bl	8000820 <dec2bcd>
 80008e8:	4603      	mov	r3, r0
 80008ea:	727b      	strb	r3, [r7, #9]
	write_buffer[2] = dec2bcd(month) | century;
 80008ec:	787b      	ldrb	r3, [r7, #1]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ff96 	bl	8000820 <dec2bcd>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	72bb      	strb	r3, [r7, #10]
	write_buffer[3] = dec2bcd(year);
 8000900:	887b      	ldrh	r3, [r7, #2]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff8b 	bl	8000820 <dec2bcd>
 800090a:	4603      	mov	r3, r0
 800090c:	72fb      	strb	r3, [r7, #11]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x03, 1, write_buffer, 4, 10)
 800090e:	230a      	movs	r3, #10
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2304      	movs	r3, #4
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2301      	movs	r3, #1
 800091e:	2203      	movs	r2, #3
 8000920:	21d0      	movs	r1, #208	; 0xd0
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f002 fcf4 	bl	8003310 <HAL_I2C_Mem_Write>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <DS3231_set_date+0xa0>
			!= HAL_OK)
		return -1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000932:	e000      	b.n	8000936 <DS3231_set_date+0xa2>
	return 0;
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <DS3231_get_date>:

signed char DS3231_get_date(I2C_HandleTypeDef *hi2c, uint16_t *year,
		unsigned char *month, unsigned char *date, unsigned char *weekday) {
 800093e:	b580      	push	{r7, lr}
 8000940:	b08a      	sub	sp, #40	; 0x28
 8000942:	af04      	add	r7, sp, #16
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	603b      	str	r3, [r7, #0]
	unsigned char read_buffer[4];
	volatile unsigned char century = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	74fb      	strb	r3, [r7, #19]

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, 0x03, 1, read_buffer, 4, 10)
 8000950:	230a      	movs	r3, #10
 8000952:	9302      	str	r3, [sp, #8]
 8000954:	2304      	movs	r3, #4
 8000956:	9301      	str	r3, [sp, #4]
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2301      	movs	r3, #1
 8000960:	2203      	movs	r2, #3
 8000962:	21d0      	movs	r1, #208	; 0xd0
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f002 fdcd 	bl	8003504 <HAL_I2C_Mem_Read>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d002      	beq.n	8000976 <DS3231_get_date+0x38>
			!= HAL_OK)
		return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000974:	e03b      	b.n	80009ee <DS3231_get_date+0xb0>

	century = ((read_buffer[2] & 0x80) >> 7);
 8000976:	7dbb      	ldrb	r3, [r7, #22]
 8000978:	09db      	lsrs	r3, r3, #7
 800097a:	b2db      	uxtb	r3, r3
 800097c:	74fb      	strb	r3, [r7, #19]
	*year = (
			century == 1 ?
 800097e:	7cfb      	ldrb	r3, [r7, #19]
 8000980:	b2db      	uxtb	r3, r3
	*year = (
 8000982:	2b01      	cmp	r3, #1
 8000984:	d109      	bne.n	800099a <DS3231_get_date+0x5c>
					(2000 + bcd2dec(read_buffer[3])) :
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff6b 	bl	8000864 <bcd2dec>
 800098e:	4603      	mov	r3, r0
 8000990:	b29b      	uxth	r3, r3
	*year = (
 8000992:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000996:	b29b      	uxth	r3, r3
 8000998:	e008      	b.n	80009ac <DS3231_get_date+0x6e>
					(1900 + bcd2dec(read_buffer[3])));
 800099a:	7dfb      	ldrb	r3, [r7, #23]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff61 	bl	8000864 <bcd2dec>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29b      	uxth	r3, r3
	*year = (
 80009a6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	8013      	strh	r3, [r2, #0]
	*month = bcd2dec(read_buffer[2] & 0x1F);
 80009b0:	7dbb      	ldrb	r3, [r7, #22]
 80009b2:	f003 031f 	and.w	r3, r3, #31
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff53 	bl	8000864 <bcd2dec>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	701a      	strb	r2, [r3, #0]
	*date = bcd2dec(read_buffer[1] & 0x3F);
 80009c6:	7d7b      	ldrb	r3, [r7, #21]
 80009c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff48 	bl	8000864 <bcd2dec>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	701a      	strb	r2, [r3, #0]
	*weekday = bcd2dec(read_buffer[0]);
 80009dc:	7d3b      	ldrb	r3, [r7, #20]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff40 	bl	8000864 <bcd2dec>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	6a3b      	ldr	r3, [r7, #32]
 80009ea:	701a      	strb	r2, [r3, #0]

	return 0;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <DS3231_set_time_sec>:

signed char DS3231_set_time_sec(I2C_HandleTypeDef *hi2c, unsigned char sec) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b088      	sub	sp, #32
 80009fa:	af04      	add	r7, sp, #16
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	70fb      	strb	r3, [r7, #3]
	unsigned char write_buffer = dec2bcd(sec);
 8000a02:	78fb      	ldrb	r3, [r7, #3]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff0b 	bl	8000820 <dec2bcd>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x00, 1, &write_buffer, 1, 10)
 8000a0e:	230a      	movs	r3, #10
 8000a10:	9302      	str	r3, [sp, #8]
 8000a12:	2301      	movs	r3, #1
 8000a14:	9301      	str	r3, [sp, #4]
 8000a16:	f107 030f 	add.w	r3, r7, #15
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	21d0      	movs	r1, #208	; 0xd0
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f002 fc74 	bl	8003310 <HAL_I2C_Mem_Write>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <DS3231_set_time_sec+0x3e>
			!= HAL_OK)
		return -1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a32:	e000      	b.n	8000a36 <DS3231_set_time_sec+0x40>

	return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <DS3231_set_time_min>:

signed char DS3231_set_time_min(I2C_HandleTypeDef *hi2c, unsigned char min) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b088      	sub	sp, #32
 8000a42:	af04      	add	r7, sp, #16
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
	unsigned char write_buffer = dec2bcd(min);
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fee7 	bl	8000820 <dec2bcd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x01, 1, &write_buffer, 1, 10)
 8000a56:	230a      	movs	r3, #10
 8000a58:	9302      	str	r3, [sp, #8]
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	f107 030f 	add.w	r3, r7, #15
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2301      	movs	r3, #1
 8000a66:	2201      	movs	r2, #1
 8000a68:	21d0      	movs	r1, #208	; 0xd0
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f002 fc50 	bl	8003310 <HAL_I2C_Mem_Write>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <DS3231_set_time_min+0x3e>
			!= HAL_OK)
		return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a7a:	e000      	b.n	8000a7e <DS3231_set_time_min+0x40>

	return 0;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <DS3231_set_time_hour>:

signed char DS3231_set_time_hour(I2C_HandleTypeDef *hi2c, unsigned char hour,
		TIME_FORMAT_e format, AM_OR_PM_e am_pm) {
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b088      	sub	sp, #32
 8000a8a:	af04      	add	r7, sp, #16
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	4608      	mov	r0, r1
 8000a90:	4611      	mov	r1, r2
 8000a92:	461a      	mov	r2, r3
 8000a94:	4603      	mov	r3, r0
 8000a96:	70fb      	strb	r3, [r7, #3]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70bb      	strb	r3, [r7, #2]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	707b      	strb	r3, [r7, #1]
	unsigned char write_buffer = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

	if (format) {
 8000aa4:	78bb      	ldrb	r3, [r7, #2]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d01c      	beq.n	8000ae4 <DS3231_set_time_hour+0x5e>
		write_buffer = dec2bcd(hour & 0x1F);
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	f003 031f 	and.w	r3, r3, #31
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff feb4 	bl	8000820 <dec2bcd>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
		if (am_pm == PM) {
 8000abc:	787b      	ldrb	r3, [r7, #1]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d105      	bne.n	8000ace <DS3231_set_time_hour+0x48>
			write_buffer |= (1 << PM_AM_FLAG) | (1 << TWELVE_FLAG);
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	73fb      	strb	r3, [r7, #15]
 8000acc:	e017      	b.n	8000afe <DS3231_set_time_hour+0x78>
		} else {
			write_buffer |= (1 << TWELVE_FLAG);
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73fb      	strb	r3, [r7, #15]
			write_buffer &= ~(1 << PM_AM_FLAG);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f023 0320 	bic.w	r3, r3, #32
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e00c      	b.n	8000afe <DS3231_set_time_hour+0x78>
		}
	} else {
		write_buffer = dec2bcd(hour & 0x3F);
 8000ae4:	78fb      	ldrb	r3, [r7, #3]
 8000ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fe97 	bl	8000820 <dec2bcd>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
		hour &= ~(1 << TWELVE_FLAG);
 8000af6:	78fb      	ldrb	r3, [r7, #3]
 8000af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000afc:	70fb      	strb	r3, [r7, #3]
	}

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x02, 1, &write_buffer, 1, 10)
 8000afe:	230a      	movs	r3, #10
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	2301      	movs	r3, #1
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	f107 030f 	add.w	r3, r7, #15
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	2202      	movs	r2, #2
 8000b10:	21d0      	movs	r1, #208	; 0xd0
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f002 fbfc 	bl	8003310 <HAL_I2C_Mem_Write>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <DS3231_set_time_hour+0x9e>
			!= HAL_OK)
		return -1;
 8000b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b22:	e000      	b.n	8000b26 <DS3231_set_time_hour+0xa0>

	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3710      	adds	r7, #16
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <DS3231_set_time_day>:

signed char DS3231_set_time_day(I2C_HandleTypeDef *hi2c, unsigned char day) {
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b088      	sub	sp, #32
 8000b32:	af04      	add	r7, sp, #16
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	70fb      	strb	r3, [r7, #3]
	unsigned char write_buffer = day & 0x07;
 8000b3a:	78fb      	ldrb	r3, [r7, #3]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x03, 1, &write_buffer, 1, 10)
 8000b44:	230a      	movs	r3, #10
 8000b46:	9302      	str	r3, [sp, #8]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	f107 030f 	add.w	r3, r7, #15
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	2203      	movs	r2, #3
 8000b56:	21d0      	movs	r1, #208	; 0xd0
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f002 fbd9 	bl	8003310 <HAL_I2C_Mem_Write>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d002      	beq.n	8000b6a <DS3231_set_time_day+0x3c>
			!= HAL_OK)
		return -1;
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b68:	e000      	b.n	8000b6c <DS3231_set_time_day+0x3e>

	return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <DS3231_set_time_date>:

signed char DS3231_set_time_date(I2C_HandleTypeDef *hi2c, unsigned char date) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af04      	add	r7, sp, #16
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]
	unsigned char write_buffer = dec2bcd(date) & 0x3F;
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff fe4c 	bl	8000820 <dec2bcd>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x04, 1, &write_buffer, 1, 10)
 8000b92:	230a      	movs	r3, #10
 8000b94:	9302      	str	r3, [sp, #8]
 8000b96:	2301      	movs	r3, #1
 8000b98:	9301      	str	r3, [sp, #4]
 8000b9a:	f107 030f 	add.w	r3, r7, #15
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	21d0      	movs	r1, #208	; 0xd0
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f002 fbb2 	bl	8003310 <HAL_I2C_Mem_Write>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d002      	beq.n	8000bb8 <DS3231_set_time_date+0x44>
			!= HAL_OK)
		return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	e000      	b.n	8000bba <DS3231_set_time_date+0x46>

	return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <DS3231_set_time_month>:

signed char DS3231_set_time_month(I2C_HandleTypeDef *hi2c, unsigned char month) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b088      	sub	sp, #32
 8000bc6:	af04      	add	r7, sp, #16
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	460b      	mov	r3, r1
 8000bcc:	70fb      	strb	r3, [r7, #3]
	unsigned char read_buffer;
	unsigned char write_buffer = dec2bcd(month) & 0x1F;
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe25 	bl	8000820 <dec2bcd>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, 0x05, 1, &read_buffer, 1, 10)
 8000be0:	230a      	movs	r3, #10
 8000be2:	9302      	str	r3, [sp, #8]
 8000be4:	2301      	movs	r3, #1
 8000be6:	9301      	str	r3, [sp, #4]
 8000be8:	f107 030f 	add.w	r3, r7, #15
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	2205      	movs	r2, #5
 8000bf2:	21d0      	movs	r1, #208	; 0xd0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f002 fc85 	bl	8003504 <HAL_I2C_Mem_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <DS3231_set_time_month+0x44>
			!= HAL_OK)
		return -1;
 8000c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c04:	e01c      	b.n	8000c40 <DS3231_set_time_month+0x7e>

	if (read_buffer >> 7 && 0x01)
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	b25b      	sxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	da04      	bge.n	8000c18 <DS3231_set_time_month+0x56>
		write_buffer |= (1 << 7);
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	73bb      	strb	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x05, 1, &write_buffer, 1, 10)
 8000c18:	230a      	movs	r3, #10
 8000c1a:	9302      	str	r3, [sp, #8]
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	f107 030e 	add.w	r3, r7, #14
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2301      	movs	r3, #1
 8000c28:	2205      	movs	r2, #5
 8000c2a:	21d0      	movs	r1, #208	; 0xd0
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f002 fb6f 	bl	8003310 <HAL_I2C_Mem_Write>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d002      	beq.n	8000c3e <DS3231_set_time_month+0x7c>
			!= HAL_OK)
		return -1;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3c:	e000      	b.n	8000c40 <DS3231_set_time_month+0x7e>

	return 0;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <DS3231_set_time_year>:

signed char DS3231_set_time_year(I2C_HandleTypeDef *hi2c, unsigned short year) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af04      	add	r7, sp, #16
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
	unsigned char read_buffer;
	unsigned char write_buffer[2] = { 0 };
 8000c54:	2300      	movs	r3, #0
 8000c56:	81bb      	strh	r3, [r7, #12]

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, 0x05, 1, &read_buffer, 1, 10)
 8000c58:	230a      	movs	r3, #10
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f107 030f 	add.w	r3, r7, #15
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	2205      	movs	r2, #5
 8000c6a:	21d0      	movs	r1, #208	; 0xd0
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f002 fc49 	bl	8003504 <HAL_I2C_Mem_Read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <DS3231_set_time_year+0x36>
			!= HAL_OK)
		return -1;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7c:	e036      	b.n	8000cec <DS3231_set_time_year+0xa4>

	if (year >= 2000) {
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c84:	d310      	bcc.n	8000ca8 <DS3231_set_time_year+0x60>
		write_buffer[0] = read_buffer;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	733b      	strb	r3, [r7, #12]
		write_buffer[0] &= ~(1 << 7);
 8000c8a:	7b3b      	ldrb	r3, [r7, #12]
 8000c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	733b      	strb	r3, [r7, #12]
		write_buffer[1] = (unsigned char) dec2bcd(year - 2000);
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	3330      	adds	r3, #48	; 0x30
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fdbf 	bl	8000820 <dec2bcd>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	737b      	strb	r3, [r7, #13]
 8000ca6:	e00d      	b.n	8000cc4 <DS3231_set_time_year+0x7c>
	} else {
		write_buffer[0] = read_buffer | (1 << 7);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	733b      	strb	r3, [r7, #12]
		write_buffer[1] = (unsigned char) dec2bcd(year - 1900);
 8000cb2:	887b      	ldrh	r3, [r7, #2]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	3b6c      	subs	r3, #108	; 0x6c
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff fdb0 	bl	8000820 <dec2bcd>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	737b      	strb	r3, [r7, #13]
	}

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x05, 1, write_buffer, 1, 10)
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	9302      	str	r3, [sp, #8]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2205      	movs	r2, #5
 8000cd6:	21d0      	movs	r1, #208	; 0xd0
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f002 fb19 	bl	8003310 <HAL_I2C_Mem_Write>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d002      	beq.n	8000cea <DS3231_set_time_year+0xa2>
			!= HAL_OK)
		return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce8:	e000      	b.n	8000cec <DS3231_set_time_year+0xa4>

	return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <DS3231_set_time>:

signed char DS3231_set_time(I2C_HandleTypeDef *hi2c, ds3231_time_t *time) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af04      	add	r7, sp, #16
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	unsigned char write_buffer[7];
	unsigned char century = 0, year = time->year;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	75fb      	strb	r3, [r7, #23]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	891b      	ldrh	r3, [r3, #8]
 8000d06:	75bb      	strb	r3, [r7, #22]
	unsigned char hour;

	if (time->year >= 2000) {
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	891b      	ldrh	r3, [r3, #8]
 8000d0c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d10:	d305      	bcc.n	8000d1e <DS3231_set_time+0x2a>
		century = 0x80;
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	75fb      	strb	r3, [r7, #23]
		year -= 2000;
 8000d16:	7dbb      	ldrb	r3, [r7, #22]
 8000d18:	3330      	adds	r3, #48	; 0x30
 8000d1a:	75bb      	strb	r3, [r7, #22]
 8000d1c:	e004      	b.n	8000d28 <DS3231_set_time+0x34>
	} else {
		century = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	75fb      	strb	r3, [r7, #23]
		year -= 1900;
 8000d22:	7dbb      	ldrb	r3, [r7, #22]
 8000d24:	3b6c      	subs	r3, #108	; 0x6c
 8000d26:	75bb      	strb	r3, [r7, #22]
	}

	if (time->format) {
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d01b      	beq.n	8000d68 <DS3231_set_time+0x74>
		hour = dec2bcd(time->hour & 0x1F);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	f003 031f 	and.w	r3, r3, #31
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd70 	bl	8000820 <dec2bcd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	757b      	strb	r3, [r7, #21]
		//12 hour
		if (time->am_or_pm == PM)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d104      	bne.n	8000d56 <DS3231_set_time+0x62>
			//PM
			//set flags
			hour |= (1 << PM_AM_FLAG) | (1 << TWELVE_FLAG);
 8000d4c:	7d7b      	ldrb	r3, [r7, #21]
 8000d4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d52:	757b      	strb	r3, [r7, #21]
 8000d54:	e016      	b.n	8000d84 <DS3231_set_time+0x90>
		else {
			//AM
			//set flags
			hour |= (1 << TWELVE_FLAG);
 8000d56:	7d7b      	ldrb	r3, [r7, #21]
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	757b      	strb	r3, [r7, #21]
			hour &= ~(1 << PM_AM_FLAG);
 8000d5e:	7d7b      	ldrb	r3, [r7, #21]
 8000d60:	f023 0320 	bic.w	r3, r3, #32
 8000d64:	757b      	strb	r3, [r7, #21]
 8000d66:	e00d      	b.n	8000d84 <DS3231_set_time+0x90>
		}
	} else {
		//24 hour
		hour = dec2bcd(time->hour & 0x3F);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fd54 	bl	8000820 <dec2bcd>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	757b      	strb	r3, [r7, #21]
		//set flags
		hour &= ~(1 << TWELVE_FLAG);
 8000d7c:	7d7b      	ldrb	r3, [r7, #21]
 8000d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d82:	757b      	strb	r3, [r7, #21]
	}

	write_buffer[0] = dec2bcd(time->sec);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	7a9b      	ldrb	r3, [r3, #10]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fd49 	bl	8000820 <dec2bcd>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	733b      	strb	r3, [r7, #12]
	write_buffer[1] = dec2bcd(time->min);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	785b      	ldrb	r3, [r3, #1]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fd42 	bl	8000820 <dec2bcd>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	737b      	strb	r3, [r7, #13]
	write_buffer[2] = hour;
 8000da0:	7d7b      	ldrb	r3, [r7, #21]
 8000da2:	73bb      	strb	r3, [r7, #14]
	write_buffer[3] = dec2bcd(time->weekday);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd39 	bl	8000820 <dec2bcd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73fb      	strb	r3, [r7, #15]
	write_buffer[4] = dec2bcd(time->date);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fd32 	bl	8000820 <dec2bcd>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	743b      	strb	r3, [r7, #16]
	write_buffer[5] = (dec2bcd(time->month) | century);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	799b      	ldrb	r3, [r3, #6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd2b 	bl	8000820 <dec2bcd>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	747b      	strb	r3, [r7, #17]
	write_buffer[6] = dec2bcd(year);
 8000dd6:	7dbb      	ldrb	r3, [r7, #22]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd21 	bl	8000820 <dec2bcd>
 8000dde:	4603      	mov	r3, r0
 8000de0:	74bb      	strb	r3, [r7, #18]

	if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, 0x00, 1, write_buffer, 7, 10)
 8000de2:	230a      	movs	r3, #10
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	2307      	movs	r3, #7
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	2200      	movs	r2, #0
 8000df4:	21d0      	movs	r1, #208	; 0xd0
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f002 fa8a 	bl	8003310 <HAL_I2C_Mem_Write>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <DS3231_set_time+0x114>
			!= HAL_OK)
		return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	e000      	b.n	8000e0a <DS3231_set_time+0x116>

	return 0;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <DS3231_get_time>:

signed char DS3231_get_time(I2C_HandleTypeDef *hi2c,
		ds3231_time_t *return_struct) {
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b08a      	sub	sp, #40	; 0x28
 8000e16:	af04      	add	r7, sp, #16
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
	unsigned char read_buffer[7];
	unsigned char century = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	75fb      	strb	r3, [r7, #23]
	unsigned char hour_byte;

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, 0x00, 1, read_buffer, 7, 10)
 8000e20:	230a      	movs	r3, #10
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	2307      	movs	r3, #7
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2301      	movs	r3, #1
 8000e30:	2200      	movs	r2, #0
 8000e32:	21d0      	movs	r1, #208	; 0xd0
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f002 fb65 	bl	8003504 <HAL_I2C_Mem_Read>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d002      	beq.n	8000e46 <DS3231_get_time+0x34>
			!= HAL_OK)
		return -1;
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e44:	e079      	b.n	8000f3a <DS3231_get_time+0x128>

	hour_byte = read_buffer[2];
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	75bb      	strb	r3, [r7, #22]

	if (hour_byte & (1 << TWELVE_FLAG)) {
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d01a      	beq.n	8000e8a <DS3231_get_time+0x78>
		//12 hour
		return_struct->format = 1;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
		if (hour_byte & (1 << PM_AM_FLAG)) {
 8000e5a:	7dbb      	ldrb	r3, [r7, #22]
 8000e5c:	f003 0320 	and.w	r3, r3, #32
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <DS3231_get_time+0x5a>
			//PM
			return_struct->am_or_pm = PM;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2201      	movs	r2, #1
 8000e68:	70da      	strb	r2, [r3, #3]
 8000e6a:	e002      	b.n	8000e72 <DS3231_get_time+0x60>
		} else {
			//AM
			return_struct->am_or_pm = AM;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	70da      	strb	r2, [r3, #3]
		}
		return_struct->hour = bcd2dec(hour_byte & 0x1F);
 8000e72:	7dbb      	ldrb	r3, [r7, #22]
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fcf2 	bl	8000864 <bcd2dec>
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	709a      	strb	r2, [r3, #2]
 8000e88:	e010      	b.n	8000eac <DS3231_get_time+0x9a>
	} else {
		//24 hour
		return_struct->format = 0;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		return_struct->am_or_pm = AM;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	70da      	strb	r2, [r3, #3]
		return_struct->hour = bcd2dec(hour_byte & 0x3F);
 8000e96:	7dbb      	ldrb	r3, [r7, #22]
 8000e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fce0 	bl	8000864 <bcd2dec>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	709a      	strb	r2, [r3, #2]
	}

	return_struct->sec = bcd2dec(read_buffer[0]);
 8000eac:	7b3b      	ldrb	r3, [r7, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fcd8 	bl	8000864 <bcd2dec>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	729a      	strb	r2, [r3, #10]
	return_struct->min = bcd2dec(read_buffer[1]);
 8000ebc:	7b7b      	ldrb	r3, [r7, #13]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fcd0 	bl	8000864 <bcd2dec>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	705a      	strb	r2, [r3, #1]
	return_struct->weekday = bcd2dec(read_buffer[3]);
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fcc8 	bl	8000864 <bcd2dec>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	711a      	strb	r2, [r3, #4]
	return_struct->date = bcd2dec(read_buffer[4]);
 8000edc:	7c3b      	ldrb	r3, [r7, #16]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fcc0 	bl	8000864 <bcd2dec>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	715a      	strb	r2, [r3, #5]
	return_struct->month = bcd2dec(read_buffer[5] & 0x1F);
 8000eec:	7c7b      	ldrb	r3, [r7, #17]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fcb5 	bl	8000864 <bcd2dec>
 8000efa:	4603      	mov	r3, r0
 8000efc:	461a      	mov	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	719a      	strb	r2, [r3, #6]
	century = (read_buffer[5] & 0x80) >> 7;
 8000f02:	7c7b      	ldrb	r3, [r7, #17]
 8000f04:	09db      	lsrs	r3, r3, #7
 8000f06:	75fb      	strb	r3, [r7, #23]
	return_struct->year =
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d109      	bne.n	8000f22 <DS3231_get_time+0x110>
			century == 1 ?
					(2000 + bcd2dec(read_buffer[6])) :
 8000f0e:	7cbb      	ldrb	r3, [r7, #18]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fca7 	bl	8000864 <bcd2dec>
 8000f16:	4603      	mov	r3, r0
 8000f18:	b29b      	uxth	r3, r3
	return_struct->year =
 8000f1a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	e008      	b.n	8000f34 <DS3231_get_time+0x122>
					(1900 + bcd2dec(read_buffer[6]));
 8000f22:	7cbb      	ldrb	r3, [r7, #18]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fc9d 	bl	8000864 <bcd2dec>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29b      	uxth	r3, r3
	return_struct->year =
 8000f2e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	8113      	strh	r3, [r2, #8]

	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <DS3231_get_temp>:

//untested
signed char DS3231_get_temp(I2C_HandleTypeDef *hi2c, float *temp) {
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b088      	sub	sp, #32
 8000f46:	af04      	add	r7, sp, #16
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	unsigned char read_buffer[2];

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, 0x11, 1, read_buffer, 2, 10)
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2302      	movs	r3, #2
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2211      	movs	r2, #17
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f002 facf 	bl	8003504 <HAL_I2C_Mem_Read>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <DS3231_get_temp+0x30>
			!= HAL_OK)
		return -1;
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f70:	e01f      	b.n	8000fb2 <DS3231_get_temp+0x70>

	read_buffer[1] = (read_buffer[1] >> 6) * 25;
 8000f72:	7b7b      	ldrb	r3, [r7, #13]
 8000f74:	099b      	lsrs	r3, r3, #6
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	0091      	lsls	r1, r2, #2
 8000f82:	461a      	mov	r2, r3
 8000f84:	460b      	mov	r3, r1
 8000f86:	4413      	add	r3, r2
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	737b      	strb	r3, [r7, #13]

	*temp = ((((short) read_buffer[0] << 8) | (short) read_buffer[1]) >> 6)
 8000f8c:	7b3b      	ldrb	r3, [r7, #12]
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	7b7a      	ldrb	r2, [r7, #13]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	119b      	asrs	r3, r3, #6
			/ 4.0f;
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff f99c 	bl	80002d4 <__aeabi_i2f>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa9e 	bl	80004e4 <__aeabi_fdiv>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
	*temp = ((((short) read_buffer[0] << 8) | (short) read_buffer[1]) >> 6)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	601a      	str	r2, [r3, #0]

	return 0;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DS3231_set_alarm>:
	return_struct->LSB_temp = read_buffer[18];
}

//untested
signed char DS3231_set_alarm(I2C_HandleTypeDef *hi2c,
		ds3231_alarm_t *alarm_time, TIME_TYPE_e alarm_number) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af04      	add	r7, sp, #16
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	71fb      	strb	r3, [r7, #7]
	unsigned char alarm_register_addr = 0x07;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	75fb      	strb	r3, [r7, #23]
	volatile unsigned char day_date_byte = 0x00;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	75bb      	strb	r3, [r7, #22]
	unsigned char write_buffer[4];

	//TODO last case
	switch (alarm_number) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <DS3231_set_alarm+0x22>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d003      	beq.n	8000fe4 <DS3231_set_alarm+0x28>
		break;
	case ALARM_TWO:
		alarm_register_addr = 0x0B;
		break;
	default:
		break;
 8000fdc:	e005      	b.n	8000fea <DS3231_set_alarm+0x2e>
		alarm_register_addr = 0x07;
 8000fde:	2307      	movs	r3, #7
 8000fe0:	75fb      	strb	r3, [r7, #23]
		break;
 8000fe2:	e002      	b.n	8000fea <DS3231_set_alarm+0x2e>
		alarm_register_addr = 0x0B;
 8000fe4:	230b      	movs	r3, #11
 8000fe6:	75fb      	strb	r3, [r7, #23]
		break;
 8000fe8:	bf00      	nop
	}

	write_buffer[0] = dec2bcd(alarm_time->sec) & 0x7F;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	7a1b      	ldrb	r3, [r3, #8]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc16 	bl	8000820 <dec2bcd>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	743b      	strb	r3, [r7, #16]
	write_buffer[1] = dec2bcd(alarm_time->min) & 0x7F;
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	785b      	ldrb	r3, [r3, #1]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fc0c 	bl	8000820 <dec2bcd>
 8001008:	4603      	mov	r3, r0
 800100a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800100e:	b2db      	uxtb	r3, r3
 8001010:	747b      	strb	r3, [r7, #17]

	write_buffer[2] = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	74bb      	strb	r3, [r7, #18]

	if (alarm_time->format) {
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d028      	beq.n	8001070 <DS3231_set_alarm+0xb4>
		//12 hour
		if (alarm_time->am_or_pm == PM) {
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	78db      	ldrb	r3, [r3, #3]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10f      	bne.n	8001046 <DS3231_set_alarm+0x8a>
			//PM
			write_buffer[2] = bcd2dec(alarm_time->hour & 0x1F);
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fc17 	bl	8000864 <bcd2dec>
 8001036:	4603      	mov	r3, r0
 8001038:	74bb      	strb	r3, [r7, #18]
			write_buffer[2] |= (1 << PM_AM_FLAG) | (1 << TWELVE_FLAG);
 800103a:	7cbb      	ldrb	r3, [r7, #18]
 800103c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001040:	b2db      	uxtb	r3, r3
 8001042:	74bb      	strb	r3, [r7, #18]
 8001044:	e023      	b.n	800108e <DS3231_set_alarm+0xd2>
		} else {
			//AM
			write_buffer[2] = dec2bcd(alarm_time->hour & 0x1F);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fbe5 	bl	8000820 <dec2bcd>
 8001056:	4603      	mov	r3, r0
 8001058:	74bb      	strb	r3, [r7, #18]
			//set flags
			write_buffer[2] |= (1 << TWELVE_FLAG);
 800105a:	7cbb      	ldrb	r3, [r7, #18]
 800105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001060:	b2db      	uxtb	r3, r3
 8001062:	74bb      	strb	r3, [r7, #18]
			write_buffer[2] &= ~(1 << PM_AM_FLAG);
 8001064:	7cbb      	ldrb	r3, [r7, #18]
 8001066:	f023 0320 	bic.w	r3, r3, #32
 800106a:	b2db      	uxtb	r3, r3
 800106c:	74bb      	strb	r3, [r7, #18]
 800106e:	e00e      	b.n	800108e <DS3231_set_alarm+0xd2>
		}
	} else {
		//24 hours
		write_buffer[2] = dec2bcd(alarm_time->hour & 0x3F);
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fbd0 	bl	8000820 <dec2bcd>
 8001080:	4603      	mov	r3, r0
 8001082:	74bb      	strb	r3, [r7, #18]
		//set flags
		write_buffer[2] &= ~(1 << TWELVE_FLAG);
 8001084:	7cbb      	ldrb	r3, [r7, #18]
 8001086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800108a:	b2db      	uxtb	r3, r3
 800108c:	74bb      	strb	r3, [r7, #18]
	}

	if (alarm_time->day_or_date == DAY_OF_MONTH) {
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	799b      	ldrb	r3, [r3, #6]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d115      	bne.n	80010c2 <DS3231_set_alarm+0x106>
		//Day of month, DY/DT flag false
		day_date_byte &= ~(1 << DAY_OR_DATE_FLAG);
 8001096:	7dbb      	ldrb	r3, [r7, #22]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	75bb      	strb	r3, [r7, #22]
		day_date_byte |= dec2bcd(alarm_time->date & 0x3F);
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	795b      	ldrb	r3, [r3, #5]
 80010a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fbb7 	bl	8000820 <dec2bcd>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	7dbb      	ldrb	r3, [r7, #22]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	75bb      	strb	r3, [r7, #22]
 80010c0:	e014      	b.n	80010ec <DS3231_set_alarm+0x130>
	} else {
		//Day of week, DY/DT flag true
		day_date_byte |= (1 << DAY_OR_DATE_FLAG);
 80010c2:	7dbb      	ldrb	r3, [r7, #22]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	75bb      	strb	r3, [r7, #22]
		day_date_byte |= dec2bcd(alarm_time->weekday & 0x0F);
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	791b      	ldrb	r3, [r3, #4]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fba1 	bl	8000820 <dec2bcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	7dbb      	ldrb	r3, [r7, #22]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	75bb      	strb	r3, [r7, #22]
	}

	write_buffer[3] = day_date_byte;
 80010ec:	7dbb      	ldrb	r3, [r7, #22]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	74fb      	strb	r3, [r7, #19]

	switch (alarm_time->type) {
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	79db      	ldrb	r3, [r3, #7]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d876      	bhi.n	80011ea <DS3231_set_alarm+0x22e>
 80010fc:	a201      	add	r2, pc, #4	; (adr r2, 8001104 <DS3231_set_alarm+0x148>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001119 	.word	0x08001119
 8001108:	08001143 	.word	0x08001143
 800110c:	0800116d 	.word	0x0800116d
 8001110:	08001197 	.word	0x08001197
 8001114:	080011c1 	.word	0x080011c1
	case ALARM_EVERY_SECOND:
		write_buffer[0] |= (1 << ALARM_MASK_BITS);
 8001118:	7c3b      	ldrb	r3, [r7, #16]
 800111a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800111e:	b2db      	uxtb	r3, r3
 8001120:	743b      	strb	r3, [r7, #16]
		write_buffer[1] |= (1 << ALARM_MASK_BITS);
 8001122:	7c7b      	ldrb	r3, [r7, #17]
 8001124:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001128:	b2db      	uxtb	r3, r3
 800112a:	747b      	strb	r3, [r7, #17]
		write_buffer[2] |= (1 << ALARM_MASK_BITS);
 800112c:	7cbb      	ldrb	r3, [r7, #18]
 800112e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001132:	b2db      	uxtb	r3, r3
 8001134:	74bb      	strb	r3, [r7, #18]
		write_buffer[3] |= (1 << ALARM_MASK_BITS);
 8001136:	7cfb      	ldrb	r3, [r7, #19]
 8001138:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	74fb      	strb	r3, [r7, #19]
		break;
 8001140:	e054      	b.n	80011ec <DS3231_set_alarm+0x230>
	case ALARM_MATCH_SECONDS:
		write_buffer[0] &= ~(1 << ALARM_MASK_BITS);
 8001142:	7c3b      	ldrb	r3, [r7, #16]
 8001144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001148:	b2db      	uxtb	r3, r3
 800114a:	743b      	strb	r3, [r7, #16]
		write_buffer[1] |= (1 << ALARM_MASK_BITS);
 800114c:	7c7b      	ldrb	r3, [r7, #17]
 800114e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001152:	b2db      	uxtb	r3, r3
 8001154:	747b      	strb	r3, [r7, #17]
		write_buffer[2] |= (1 << ALARM_MASK_BITS);
 8001156:	7cbb      	ldrb	r3, [r7, #18]
 8001158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115c:	b2db      	uxtb	r3, r3
 800115e:	74bb      	strb	r3, [r7, #18]
		write_buffer[3] |= (1 << ALARM_MASK_BITS);
 8001160:	7cfb      	ldrb	r3, [r7, #19]
 8001162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001166:	b2db      	uxtb	r3, r3
 8001168:	74fb      	strb	r3, [r7, #19]
		break;
 800116a:	e03f      	b.n	80011ec <DS3231_set_alarm+0x230>
	case ALARM_MATCH_MINUTES:
		write_buffer[0] &= ~(1 << ALARM_MASK_BITS);
 800116c:	7c3b      	ldrb	r3, [r7, #16]
 800116e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001172:	b2db      	uxtb	r3, r3
 8001174:	743b      	strb	r3, [r7, #16]
		write_buffer[1] &= ~(1 << ALARM_MASK_BITS);
 8001176:	7c7b      	ldrb	r3, [r7, #17]
 8001178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	747b      	strb	r3, [r7, #17]
		write_buffer[2] |= (1 << ALARM_MASK_BITS);
 8001180:	7cbb      	ldrb	r3, [r7, #18]
 8001182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001186:	b2db      	uxtb	r3, r3
 8001188:	74bb      	strb	r3, [r7, #18]
		write_buffer[3] |= (1 << ALARM_MASK_BITS);
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001190:	b2db      	uxtb	r3, r3
 8001192:	74fb      	strb	r3, [r7, #19]
		break;
 8001194:	e02a      	b.n	80011ec <DS3231_set_alarm+0x230>
	case ALARM_MATCH_HOURS:
		write_buffer[0] &= ~(1 << ALARM_MASK_BITS);
 8001196:	7c3b      	ldrb	r3, [r7, #16]
 8001198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800119c:	b2db      	uxtb	r3, r3
 800119e:	743b      	strb	r3, [r7, #16]
		write_buffer[1] &= ~(1 << ALARM_MASK_BITS);
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	747b      	strb	r3, [r7, #17]
		write_buffer[2] &= ~(1 << ALARM_MASK_BITS);
 80011aa:	7cbb      	ldrb	r3, [r7, #18]
 80011ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	74bb      	strb	r3, [r7, #18]
		write_buffer[3] |= (1 << ALARM_MASK_BITS);
 80011b4:	7cfb      	ldrb	r3, [r7, #19]
 80011b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	74fb      	strb	r3, [r7, #19]
		break;
 80011be:	e015      	b.n	80011ec <DS3231_set_alarm+0x230>
	case ALARM_MATCH_DATE_OR_DAY:
		write_buffer[0] &= ~(1 << ALARM_MASK_BITS);
 80011c0:	7c3b      	ldrb	r3, [r7, #16]
 80011c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	743b      	strb	r3, [r7, #16]
		write_buffer[1] &= ~(1 << ALARM_MASK_BITS);
 80011ca:	7c7b      	ldrb	r3, [r7, #17]
 80011cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	747b      	strb	r3, [r7, #17]
		write_buffer[2] &= ~(1 << ALARM_MASK_BITS);
 80011d4:	7cbb      	ldrb	r3, [r7, #18]
 80011d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	74bb      	strb	r3, [r7, #18]
		write_buffer[3] &= ~(1 << ALARM_MASK_BITS);
 80011de:	7cfb      	ldrb	r3, [r7, #19]
 80011e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	74fb      	strb	r3, [r7, #19]
		break;
 80011e8:	e000      	b.n	80011ec <DS3231_set_alarm+0x230>
	default:
		break;
 80011ea:	bf00      	nop
	}
	if (alarm_number == ALARM_ONE) {
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d113      	bne.n	800121a <DS3231_set_alarm+0x25e>
		if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, alarm_register_addr, 1,
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	230a      	movs	r3, #10
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	2304      	movs	r3, #4
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	f107 0310 	add.w	r3, r7, #16
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	21d0      	movs	r1, #208	; 0xd0
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f002 f881 	bl	8003310 <HAL_I2C_Mem_Write>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d017      	beq.n	8001244 <DS3231_set_alarm+0x288>
				write_buffer, 4, 10) != HAL_OK)
			return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001218:	e015      	b.n	8001246 <DS3231_set_alarm+0x28a>
	} else if (HAL_I2C_Mem_Write(hi2c, DS3231_ADDR8, alarm_register_addr, 1,
 800121a:	7dfb      	ldrb	r3, [r7, #23]
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	3301      	adds	r3, #1
 8001224:	210a      	movs	r1, #10
 8001226:	9102      	str	r1, [sp, #8]
 8001228:	2103      	movs	r1, #3
 800122a:	9101      	str	r1, [sp, #4]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f002 f86c 	bl	8003310 <HAL_I2C_Mem_Write>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <DS3231_set_alarm+0x288>
			write_buffer + sizeof(unsigned char), 3, 10) != HAL_OK)
		return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001242:	e000      	b.n	8001246 <DS3231_set_alarm+0x28a>
	return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop

08001250 <DS3231_get_alarm>:

//untested
signed char DS3231_get_alarm(I2C_HandleTypeDef *hi2c,
		ds3231_alarm_t *return_struct, TIME_TYPE_e alarm_number) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af04      	add	r7, sp, #16
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	4613      	mov	r3, r2
 800125c:	71fb      	strb	r3, [r7, #7]
	unsigned char read_buffer[4];
	volatile unsigned char alarm_register_addr = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	74fb      	strb	r3, [r7, #19]

	//TODO last case
	switch (alarm_number) {
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d002      	beq.n	800126e <DS3231_get_alarm+0x1e>
 8001268:	2b02      	cmp	r3, #2
 800126a:	d003      	beq.n	8001274 <DS3231_get_alarm+0x24>
		break;
	case ALARM_TWO:
		alarm_register_addr = 0x0A; /* first byte is ignored, alarm starts at 0x0B */
		break;
	default:
		break;
 800126c:	e005      	b.n	800127a <DS3231_get_alarm+0x2a>
		alarm_register_addr = 0x07;
 800126e:	2307      	movs	r3, #7
 8001270:	74fb      	strb	r3, [r7, #19]
		break;
 8001272:	e002      	b.n	800127a <DS3231_get_alarm+0x2a>
		alarm_register_addr = 0x0A; /* first byte is ignored, alarm starts at 0x0B */
 8001274:	230a      	movs	r3, #10
 8001276:	74fb      	strb	r3, [r7, #19]
		break;
 8001278:	bf00      	nop
	}

	if (HAL_I2C_Mem_Read(hi2c, DS3231_ADDR8, alarm_register_addr, 1,
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	b29a      	uxth	r2, r3
 8001280:	230a      	movs	r3, #10
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	2304      	movs	r3, #4
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	21d0      	movs	r1, #208	; 0xd0
 8001292:	68f8      	ldr	r0, [r7, #12]
 8001294:	f002 f936 	bl	8003504 <HAL_I2C_Mem_Read>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d002      	beq.n	80012a4 <DS3231_get_alarm+0x54>
			read_buffer, 4, 10) != HAL_OK)
		return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a2:	e06e      	b.n	8001382 <DS3231_get_alarm+0x132>

	if (alarm_number == ALARM_ONE)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10a      	bne.n	80012c0 <DS3231_get_alarm+0x70>
		return_struct->sec = bcd2dec(read_buffer[0] & 0x7F);
 80012aa:	7d3b      	ldrb	r3, [r7, #20]
 80012ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fad6 	bl	8000864 <bcd2dec>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	721a      	strb	r2, [r3, #8]
	return_struct->min = bcd2dec(read_buffer[1] & 0x7F);
 80012c0:	7d7b      	ldrb	r3, [r7, #21]
 80012c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff facb 	bl	8000864 <bcd2dec>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	705a      	strb	r2, [r3, #1]

	if (read_buffer[2] & (1 << TWELVE_FLAG)) {
 80012d6:	7dbb      	ldrb	r3, [r7, #22]
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d01a      	beq.n	8001316 <DS3231_get_alarm+0xc6>
		//12 hour
		return_struct->format = 1;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
		if (read_buffer[2] & (1 << PM_AM_FLAG)) {
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	f003 0320 	and.w	r3, r3, #32
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <DS3231_get_alarm+0xa8>
			//PM
			return_struct->am_or_pm = PM;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	2201      	movs	r2, #1
 80012f4:	70da      	strb	r2, [r3, #3]
 80012f6:	e002      	b.n	80012fe <DS3231_get_alarm+0xae>
		} else {
			//AM
			return_struct->am_or_pm = AM;
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	2200      	movs	r2, #0
 80012fc:	70da      	strb	r2, [r3, #3]
		}
		return_struct->hour = bcd2dec(read_buffer[2] & 0x1F);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff faac 	bl	8000864 <bcd2dec>
 800130c:	4603      	mov	r3, r0
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	709a      	strb	r2, [r3, #2]
 8001314:	e010      	b.n	8001338 <DS3231_get_alarm+0xe8>
	} else {
		//24 hour
		return_struct->format = 0;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
		return_struct->am_or_pm = AM;
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2200      	movs	r2, #0
 8001320:	70da      	strb	r2, [r3, #3]
		return_struct->hour = bcd2dec(read_buffer[2] & 0x3F);
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fa9a 	bl	8000864 <bcd2dec>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	709a      	strb	r2, [r3, #2]
	}

	if ((read_buffer[3] >> DAY_OR_DATE_FLAG) & 1) {
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	099b      	lsrs	r3, r3, #6
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d00e      	beq.n	8001364 <DS3231_get_alarm+0x114>
		//day of week
		return_struct->day_or_date = DAY_OF_WEEK;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2201      	movs	r2, #1
 800134a:	719a      	strb	r2, [r3, #6]
		return_struct->weekday = bcd2dec(read_buffer[3] & 0x0F);
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	b2db      	uxtb	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fa85 	bl	8000864 <bcd2dec>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	711a      	strb	r2, [r3, #4]
 8001362:	e00d      	b.n	8001380 <DS3231_get_alarm+0x130>
	} else {
		//day of month
		return_struct->day_or_date = DAY_OF_MONTH;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2200      	movs	r2, #0
 8001368:	719a      	strb	r2, [r3, #6]
		return_struct->date = bcd2dec(read_buffer[3] & 0x3F);
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fa76 	bl	8000864 <bcd2dec>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	715a      	strb	r2, [r3, #5]
	}

	return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001390:	f001 fb60 	bl	8002a54 <HAL_Init>

	/* USER CODE BEGIN Init */
	statesInit();
 8001394:	f001 f940 	bl	8002618 <statesInit>
	buttonsInit();
 8001398:	f7ff f940 	bl	800061c <buttonsInit>
	SN54HC595_init();
 800139c:	f001 f864 	bl	8002468 <SN54HC595_init>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013a0:	f000 f828 	bl	80013f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013a4:	f000 f896 	bl	80014d4 <MX_GPIO_Init>
	MX_I2C2_Init();
 80013a8:	f000 f866 	bl	8001478 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	RTC_dev_init(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f000 fc8f 	bl	8001cd0 <RTC_dev_init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80013b2:	f003 fce9 	bl	8004d88 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <main+0x50>)
 80013b8:	2100      	movs	r1, #0
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <main+0x54>)
 80013bc:	f003 fd4a 	bl	8004e54 <osThreadNew>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <main+0x58>)
 80013c4:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	stateMachineTaskHandle = osThreadNew(smHandlerTask, NULL,
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <main+0x5c>)
 80013c8:	2100      	movs	r1, #0
 80013ca:	4808      	ldr	r0, [pc, #32]	; (80013ec <main+0x60>)
 80013cc:	f003 fd42 	bl	8004e54 <osThreadNew>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <main+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80013d6:	f003 fd09 	bl	8004dec <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80013da:	e7fe      	b.n	80013da <main+0x4e>
 80013dc:	080085a8 	.word	0x080085a8
 80013e0:	08001635 	.word	0x08001635
 80013e4:	20000154 	.word	0x20000154
 80013e8:	080085cc 	.word	0x080085cc
 80013ec:	08002051 	.word	0x08002051
 80013f0:	20000158 	.word	0x20000158

080013f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b090      	sub	sp, #64	; 0x40
 80013f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	2228      	movs	r2, #40	; 0x28
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f006 fc46 	bl	8007c94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001416:	2302      	movs	r3, #2
 8001418:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141e:	2310      	movs	r3, #16
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001426:	2300      	movs	r3, #0
 8001428:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800142a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800142e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001430:	f107 0318 	add.w	r3, r7, #24
 8001434:	4618      	mov	r0, r3
 8001436:	f002 fe27 	bl	8004088 <HAL_RCC_OscConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x50>
		Error_Handler();
 8001440:	f000 f912 	bl	8001668 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001444:	230f      	movs	r3, #15
 8001446:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001448:	2302      	movs	r3, #2
 800144a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001454:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f003 f894 	bl	800458c <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x7a>
		Error_Handler();
 800146a:	f000 f8fd 	bl	8001668 <Error_Handler>
	}
}
 800146e:	bf00      	nop
 8001470:	3740      	adds	r7, #64	; 0x40
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C2_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_I2C2_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001484:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_I2C2_Init+0x58>)
 8001486:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C2_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_I2C2_Init+0x50>)
 8001496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800149a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <MX_I2C2_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80014b4:	4804      	ldr	r0, [pc, #16]	; (80014c8 <MX_I2C2_Init+0x50>)
 80014b6:	f001 fde7 	bl	8003088 <HAL_I2C_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80014c0:	f000 f8d2 	bl	8001668 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000100 	.word	0x20000100
 80014cc:	40005800 	.word	0x40005800
 80014d0:	000186a0 	.word	0x000186a0

080014d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <MX_GPIO_Init+0x14c>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <MX_GPIO_Init+0x14c>)
 80014ee:	f043 0310 	orr.w	r3, r3, #16
 80014f2:	6193      	str	r3, [r2, #24]
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <MX_GPIO_Init+0x14c>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <MX_GPIO_Init+0x14c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <MX_GPIO_Init+0x14c>)
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <MX_GPIO_Init+0x14c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <MX_GPIO_Init+0x14c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a40      	ldr	r2, [pc, #256]	; (8001620 <MX_GPIO_Init+0x14c>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_GPIO_Init+0x14c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <MX_GPIO_Init+0x14c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a3a      	ldr	r2, [pc, #232]	; (8001620 <MX_GPIO_Init+0x14c>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b38      	ldr	r3, [pc, #224]	; (8001620 <MX_GPIO_Init+0x14c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001548:	2200      	movs	r2, #0
 800154a:	212d      	movs	r1, #45	; 0x2d
 800154c:	4835      	ldr	r0, [pc, #212]	; (8001624 <MX_GPIO_Init+0x150>)
 800154e:	f001 fd52 	bl	8002ff6 <HAL_GPIO_WritePin>
			SHIFT_SER_CLK_Pin | SHIFT_ENA_Pin | SHIFT_CLR_Pin | LD3_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SHIFT_SER_IN_Pin | LD2_Pin | LD1_Pin,
 8001552:	2200      	movs	r2, #0
 8001554:	f640 0121 	movw	r1, #2081	; 0x821
 8001558:	4833      	ldr	r0, [pc, #204]	; (8001628 <MX_GPIO_Init+0x154>)
 800155a:	f001 fd4c 	bl	8002ff6 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SHIFT_LATCH_GPIO_Port, SHIFT_LATCH_Pin, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	4832      	ldr	r0, [pc, #200]	; (800162c <MX_GPIO_Init+0x158>)
 8001564:	f001 fd47 	bl	8002ff6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : BUT1_Pin */
	GPIO_InitStruct.Pin = BUT1_Pin;
 8001568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <MX_GPIO_Init+0x15c>)
 8001570:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	4829      	ldr	r0, [pc, #164]	; (8001624 <MX_GPIO_Init+0x150>)
 800157e:	f001 fb9f 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHIFT_SER_CLK_Pin SHIFT_ENA_Pin SHIFT_CLR_Pin LD3_Pin */
	GPIO_InitStruct.Pin = SHIFT_SER_CLK_Pin | SHIFT_ENA_Pin | SHIFT_CLR_Pin
 8001582:	232d      	movs	r3, #45	; 0x2d
 8001584:	613b      	str	r3, [r7, #16]
			| LD3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	4822      	ldr	r0, [pc, #136]	; (8001624 <MX_GPIO_Init+0x150>)
 800159a:	f001 fb91 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHIFT_SER_IN_Pin LD2_Pin LD1_Pin */
	GPIO_InitStruct.Pin = SHIFT_SER_IN_Pin | LD2_Pin | LD1_Pin;
 800159e:	f640 0321 	movw	r3, #2081	; 0x821
 80015a2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2302      	movs	r3, #2
 80015ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	481c      	ldr	r0, [pc, #112]	; (8001628 <MX_GPIO_Init+0x154>)
 80015b8:	f001 fb82 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUT0_Pin BUT2_Pin */
	GPIO_InitStruct.Pin = BUT0_Pin | BUT2_Pin;
 80015bc:	2342      	movs	r3, #66	; 0x42
 80015be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_GPIO_Init+0x15c>)
 80015c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c4:	2302      	movs	r3, #2
 80015c6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	4619      	mov	r1, r3
 80015ce:	4816      	ldr	r0, [pc, #88]	; (8001628 <MX_GPIO_Init+0x154>)
 80015d0:	f001 fb76 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = USART_TX_Pin | USART_RX_Pin;
 80015d4:	230c      	movs	r3, #12
 80015d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015dc:	2302      	movs	r3, #2
 80015de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <MX_GPIO_Init+0x154>)
 80015e8:	f001 fb6a 	bl	8002cc0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHIFT_LATCH_Pin */
	GPIO_InitStruct.Pin = SHIFT_LATCH_Pin;
 80015ec:	2301      	movs	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SHIFT_LATCH_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <MX_GPIO_Init+0x158>)
 8001604:	f001 fb5c 	bl	8002cc0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2105      	movs	r1, #5
 800160c:	2028      	movs	r0, #40	; 0x28
 800160e:	f001 fb2c 	bl	8002c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001612:	2028      	movs	r0, #40	; 0x28
 8001614:	f001 fb45 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

}
 8001618:	bf00      	nop
 800161a:	3720      	adds	r7, #32
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	40011000 	.word	0x40011000
 8001628:	40010800 	.word	0x40010800
 800162c:	40010c00 	.word	0x40010c00
 8001630:	10310000 	.word	0x10310000

08001634 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800163c:	2001      	movs	r0, #1
 800163e:	f003 fcb3 	bl	8004fa8 <osDelay>
 8001642:	e7fb      	b.n	800163c <StartDefaultTask+0x8>

08001644 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a04      	ldr	r2, [pc, #16]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001656:	f001 fa13 	bl	8002a80 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40000800 	.word	0x40000800

08001668 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <nixieEnableTube>:
	nixie_tube_t tubes[NIXIE_DEVICES];
} nixie_tube_array_t;

nixie_tube_array_t nixie_dev = { 0 };

void nixieEnableTube(unsigned char index) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
	nixie_dev.tubes[index].enabled = 1;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <nixieEnableTube+0x20>)
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	2201      	movs	r2, #1
 8001688:	705a      	strb	r2, [r3, #1]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	2000015c 	.word	0x2000015c

08001698 <nixieDisableTube>:

void nixieDisableTube(unsigned char index) {
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	nixie_dev.tubes[index].enabled = 0;
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <nixieDisableTube+0x20>)
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	2200      	movs	r2, #0
 80016ac:	705a      	strb	r2, [r3, #1]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	2000015c 	.word	0x2000015c

080016bc <nixieEnableAll>:

void nixieEnableAll(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	71fb      	strb	r3, [r7, #7]
 80016c6:	e006      	b.n	80016d6 <nixieEnableAll+0x1a>
		nixieEnableTube(i);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ffd2 	bl	8001674 <nixieEnableTube>
	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	3301      	adds	r3, #1
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	d9f5      	bls.n	80016c8 <nixieEnableAll+0xc>
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <nixieDisableAll>:

void nixieDisableAll(void) {
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	e006      	b.n	8001700 <nixieDisableAll+0x1a>
		nixieDisableTube(i);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ffcf 	bl	8001698 <nixieDisableTube>
	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	3301      	adds	r3, #1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d9f5      	bls.n	80016f2 <nixieDisableAll+0xc>
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <nixieSetTube>:

void nixieSetTube(unsigned char index, unsigned char value) {
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	460a      	mov	r2, r1
 800171a:	71fb      	strb	r3, [r7, #7]
 800171c:	4613      	mov	r3, r2
 800171e:	71bb      	strb	r3, [r7, #6]
	if (value >= 0 && value <= 9)
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b09      	cmp	r3, #9
 8001724:	d804      	bhi.n	8001730 <nixieSetTube+0x20>
		nixie_dev.tubes[index].value = value;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	4904      	ldr	r1, [pc, #16]	; (800173c <nixieSetTube+0x2c>)
 800172a:	79ba      	ldrb	r2, [r7, #6]
 800172c:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000015c 	.word	0x2000015c

08001740 <nixieSetDoubleDigits>:

unsigned char nixieSetDoubleDigits(volatile unsigned char input,
		unsigned char index) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	4613      	mov	r3, r2
 800174e:	71bb      	strb	r3, [r7, #6]
	if (index + 1 >= NIXIE_DEVICES)
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <nixieSetDoubleDigits+0x1a>
		return -1;
 8001756:	23ff      	movs	r3, #255	; 0xff
 8001758:	e01f      	b.n	800179a <nixieSetDoubleDigits+0x5a>

	nixieSetTube(index + 1, input / 10);
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	3301      	adds	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	490f      	ldr	r1, [pc, #60]	; (80017a4 <nixieSetDoubleDigits+0x64>)
 8001766:	fba1 1303 	umull	r1, r3, r1, r3
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4619      	mov	r1, r3
 8001770:	4610      	mov	r0, r2
 8001772:	f7ff ffcd 	bl	8001710 <nixieSetTube>
	nixieSetTube(index, input % 10);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <nixieSetDoubleDigits+0x64>)
 800177c:	fba3 1302 	umull	r1, r3, r3, r2
 8001780:	08d9      	lsrs	r1, r3, #3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b2da      	uxtb	r2, r3
 800178e:	79bb      	ldrb	r3, [r7, #6]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff ffbc 	bl	8001710 <nixieSetTube>

	return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	cccccccd 	.word	0xcccccccd

080017a8 <nixieCompileOutput>:

uint32_t nixieCompileOutput(void) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]

	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	e022      	b.n	80017fe <nixieCompileOutput+0x56>
		if (nixie_dev.tubes[i].enabled)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <nixieCompileOutput+0x7c>)
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00e      	beq.n	80017e4 <nixieCompileOutput+0x3c>
			ret |= ((nixie_dev.tubes[i].value & 0x0F) << (4 * i));
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <nixieCompileOutput+0x7c>)
 80017ca:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80017ce:	f003 020f 	and.w	r2, r3, #15
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4313      	orrs	r3, r2
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	e009      	b.n	80017f8 <nixieCompileOutput+0x50>
		else
			ret &= ~(0x0F << (i * 4));
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	220f      	movs	r2, #15
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4013      	ands	r3, r2
 80017f6:	607b      	str	r3, [r7, #4]
	for (unsigned char i = 0; i < NIXIE_DEVICES; i++)
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	3301      	adds	r3, #1
 80017fc:	70fb      	strb	r3, [r7, #3]
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d9d9      	bls.n	80017b8 <nixieCompileOutput+0x10>
#if NIXIE_FLIPPED == 1
	ret = ((ret & 0xF0F0F0F0) >> 4) | ((ret & 0x0F0F0F0F) << 4);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 320f 	and.w	r2, r3, #252645135	; 0xf0f0f0f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	f003 33f0 	and.w	r3, r3, #4042322160	; 0xf0f0f0f0
 8001814:	4313      	orrs	r3, r2
 8001816:	607b      	str	r3, [r7, #4]
#endif // NIXIE_FLIPPED

	return ret;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	2000015c 	.word	0x2000015c

08001828 <self_RTC_dev_time_set_hour>:
};

DS3231_device_t RTC_dev = { 0 };

//SETS
signed char self_RTC_dev_time_set_hour(DS3231_device_t *dev, unsigned char hour) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_hour(dev->i2c_handle, hour, dev->time_1.format,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a18      	ldr	r0, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	78db      	ldrb	r3, [r3, #3]
 8001840:	78f9      	ldrb	r1, [r7, #3]
 8001842:	f7ff f920 	bl	8000a86 <DS3231_set_time_hour>
 8001846:	4603      	mov	r3, r0
			dev->time_1.am_or_pm);
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <self_RTC_dev_time_set_min>:

signed char RTC_dev_time_set_hour(unsigned char hour) {
	return RTC_dev.set_hour(&RTC_dev, hour);
}
signed char self_RTC_dev_time_set_min(DS3231_device_t *dev, unsigned char min) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_min(dev->i2c_handle, min);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f8ea 	bl	8000a3e <DS3231_set_time_min>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <self_RTC_dev_time_set_sec>:

signed char RTC_dev_time_set_min(unsigned char min) {
	return RTC_dev.set_min(&RTC_dev, min);
}

signed char self_RTC_dev_time_set_sec(DS3231_device_t *dev, unsigned char sec) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_sec(dev->i2c_handle, sec);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	78fa      	ldrb	r2, [r7, #3]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f8b4 	bl	80009f6 <DS3231_set_time_sec>
 800188e:	4603      	mov	r3, r0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <self_RTC_dev_time_set_day>:

signed char RTC_dev_time_set_sec(unsigned char sec) {
	return RTC_dev.set_sec(&RTC_dev, sec);
}

signed char self_RTC_dev_time_set_day(DS3231_device_t *dev, unsigned char day) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_day(dev->i2c_handle, day);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f93e 	bl	8000b2e <DS3231_set_time_day>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <self_RTC_dev_time_set_date>:

signed char RTC_dev_time_set_day(unsigned char day) {
	return RTC_dev.set_day(&RTC_dev, day);
}

signed char self_RTC_dev_time_set_date(DS3231_device_t *dev, unsigned char date) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_date(dev->i2c_handle, date);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff f94f 	bl	8000b74 <DS3231_set_time_date>
 80018d6:	4603      	mov	r3, r0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <self_RTC_dev_time_set_month>:
signed char RTC_dev_time_set_date(unsigned char date) {
	return RTC_dev.set_date(&RTC_dev, date);
}

signed char self_RTC_dev_time_set_month(DS3231_device_t *dev,
		unsigned char month) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]
	return DS3231_set_time_month(dev->i2c_handle, month);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f964 	bl	8000bc2 <DS3231_set_time_month>
 80018fa:	4603      	mov	r3, r0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <self_RTC_dev_time_set_year>:
signed char RTC_dev_time_set_month(unsigned char month) {
	return RTC_dev.set_month(&RTC_dev, month);
}

signed char self_RTC_dev_time_set_year(DS3231_device_t *dev,
		unsigned short year) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
	return DS3231_set_time_year(dev->i2c_handle, year);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	887a      	ldrh	r2, [r7, #2]
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff f995 	bl	8000c48 <DS3231_set_time_year>
 800191e:	4603      	mov	r3, r0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <RTC_dev_time_get_hour>:
//GETS
TIME_FORMAT_e RTC_dev_time_get_format(void) {
	return RTC_dev.time_1.format;
}

unsigned char RTC_dev_time_get_hour(void) {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return RTC_dev.time_1.hour;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <RTC_dev_time_get_hour+0x10>)
 800192e:	789b      	ldrb	r3, [r3, #2]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000164 	.word	0x20000164

0800193c <RTC_dev_time_get_min>:

unsigned char RTC_dev_time_get_min(void) {
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return RTC_dev.time_1.min;
 8001940:	4b02      	ldr	r3, [pc, #8]	; (800194c <RTC_dev_time_get_min+0x10>)
 8001942:	785b      	ldrb	r3, [r3, #1]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000164 	.word	0x20000164

08001950 <RTC_dev_time_get_sec>:

unsigned char RTC_dev_time_get_sec(void) {
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
	return RTC_dev.time_1.sec;
 8001954:	4b02      	ldr	r3, [pc, #8]	; (8001960 <RTC_dev_time_get_sec+0x10>)
 8001956:	7a9b      	ldrb	r3, [r3, #10]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000164 	.word	0x20000164

08001964 <self_RTC_dev_set_time>:
	return DS3231_set_time_year(RTC_dev.i2c_handle, year);
}

signed char self_RTC_dev_set_time(DS3231_device_t *dev, unsigned char hour,
		unsigned char min, unsigned char sec, TIME_FORMAT_e format,
		AM_OR_PM_e am_pm) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4608      	mov	r0, r1
 800196e:	4611      	mov	r1, r2
 8001970:	461a      	mov	r2, r3
 8001972:	4603      	mov	r3, r0
 8001974:	70fb      	strb	r3, [r7, #3]
 8001976:	460b      	mov	r3, r1
 8001978:	70bb      	strb	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	707b      	strb	r3, [r7, #1]
	dev->time_1.hour = (format == HOUR_12 && hour > 12) ? hour - 12 : hour;
 800197e:	7c3b      	ldrb	r3, [r7, #16]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d106      	bne.n	8001992 <self_RTC_dev_set_time+0x2e>
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d903      	bls.n	8001992 <self_RTC_dev_set_time+0x2e>
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	3b0c      	subs	r3, #12
 800198e:	b2db      	uxtb	r3, r3
 8001990:	e000      	b.n	8001994 <self_RTC_dev_set_time+0x30>
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	7093      	strb	r3, [r2, #2]
	dev->time_1.min = min;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	78ba      	ldrb	r2, [r7, #2]
 800199c:	705a      	strb	r2, [r3, #1]
	dev->time_1.sec = sec;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	787a      	ldrb	r2, [r7, #1]
 80019a2:	729a      	strb	r2, [r3, #10]
	dev->time_1.format = format;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7c3a      	ldrb	r2, [r7, #16]
 80019a8:	701a      	strb	r2, [r3, #0]
	dev->time_1.am_or_pm = am_pm;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7d3a      	ldrb	r2, [r7, #20]
 80019ae:	70da      	strb	r2, [r3, #3]

	if (DS3231_set_time(dev->i2c_handle, &dev->time_1))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f99b 	bl	8000cf4 <DS3231_set_time>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <self_RTC_dev_set_time+0x66>
		return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c8:	e000      	b.n	80019cc <self_RTC_dev_set_time+0x68>

	return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <self_RTC_dev_get_time>:
signed char RTC_dev_set_time(unsigned char hour, unsigned char min,
		unsigned char sec, TIME_FORMAT_e format, AM_OR_PM_e am_pm) {
	return RTC_dev.set_time(&RTC_dev, hour, min, sec, format, am_pm);
}

signed char self_RTC_dev_get_time(DS3231_device_t *dev) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	return DS3231_get_time(dev->i2c_handle, &dev->time_1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa14 	bl	8000e12 <DS3231_get_time>
 80019ea:	4603      	mov	r3, r0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <RTC_dev_get_time>:

signed char RTC_dev_get_time(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	return RTC_dev.get_time(&RTC_dev);
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <RTC_dev_get_time+0x14>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <RTC_dev_get_time+0x14>)
 80019fe:	4798      	blx	r3
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000164 	.word	0x20000164

08001a0c <self_RTC_dev_set_date_complete>:

signed char self_RTC_dev_set_date_complete(DS3231_device_t *dev,
		WEEKDAYS_e weekday, unsigned char date, MONTHS_e month,
		unsigned short year) {
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	70fb      	strb	r3, [r7, #3]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	70bb      	strb	r3, [r7, #2]
 8001a22:	4613      	mov	r3, r2
 8001a24:	707b      	strb	r3, [r7, #1]
	dev->time_1.weekday = weekday;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	711a      	strb	r2, [r3, #4]
	dev->time_1.date = date;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	78ba      	ldrb	r2, [r7, #2]
 8001a30:	715a      	strb	r2, [r3, #5]
	dev->time_1.month = month;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	787a      	ldrb	r2, [r7, #1]
 8001a36:	719a      	strb	r2, [r3, #6]
	dev->time_1.year = year;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	8b3a      	ldrh	r2, [r7, #24]
 8001a3c:	811a      	strh	r2, [r3, #8]

	return DS3231_set_date(dev->i2c_handle, dev->time_1.year, dev->time_1.month,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a18      	ldr	r0, [r3, #32]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	8919      	ldrh	r1, [r3, #8]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	799a      	ldrb	r2, [r3, #6]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	795c      	ldrb	r4, [r3, #5]
			dev->time_1.date, dev->time_1.weekday);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
	return DS3231_set_date(dev->i2c_handle, dev->time_1.year, dev->time_1.month,
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4623      	mov	r3, r4
 8001a56:	f7fe ff1d 	bl	8000894 <DS3231_set_date>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <self_RTC_dev_get_date>:
signed char RTC_dev_set_date_complete(WEEKDAYS_e weekday, unsigned char date,
		MONTHS_e month, unsigned short year) {
	return RTC_dev.set_date_complete(&RTC_dev, weekday, date, month, year);
}

signed char self_RTC_dev_get_date(DS3231_device_t *dev) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	6078      	str	r0, [r7, #4]
	return DS3231_get_date(dev->i2c_handle, &dev->time_1.year,
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a18      	ldr	r0, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f103 0108 	add.w	r1, r3, #8
			&dev->time_1.month, &dev->time_1.date, &dev->time_1.weekday);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	1d9a      	adds	r2, r3, #6
	return DS3231_get_date(dev->i2c_handle, &dev->time_1.year,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	1d5c      	adds	r4, r3, #5
			&dev->time_1.month, &dev->time_1.date, &dev->time_1.weekday);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
	return DS3231_get_date(dev->i2c_handle, &dev->time_1.year,
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	f7fe ff5a 	bl	800093e <DS3231_get_date>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}

08001a94 <self_RTC_dev_set_alarm>:
//untested
//TODO alarm stuff
signed char self_RTC_dev_set_alarm(DS3231_device_t *dev,
		TIME_TYPE_e alarm_number, unsigned char hour, unsigned char min,
		TIME_FORMAT_e format, AM_OR_PM_e am_pm, WEEKDAYS_e weekday,
		unsigned char date, DAY_OR_DATE_e date_or_day, ALARM_TYPE_e type) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	70fb      	strb	r3, [r7, #3]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	70bb      	strb	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	707b      	strb	r3, [r7, #1]
	//TODO last case
	switch (alarm_number) {
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d005      	beq.n	8001ac0 <self_RTC_dev_set_alarm+0x2c>
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d034      	beq.n	8001b22 <self_RTC_dev_set_alarm+0x8e>
		dev->alarm_2.day_or_date = date_or_day;
		dev->alarm_2.type = type;
		return DS3231_set_alarm(dev->i2c_handle,
				(ds3231_alarm_t*) &dev->alarm_2, alarm_number);
	default:
		break;
 8001ab8:	bf00      	nop
	}
	return -1;
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abe:	e05d      	b.n	8001b7c <self_RTC_dev_set_alarm+0xe8>
		dev->alarm_1.hour = (format == HOUR_12 && hour > 12) ? hour - 12 : hour;
 8001ac0:	7c3b      	ldrb	r3, [r7, #16]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d106      	bne.n	8001ad4 <self_RTC_dev_set_alarm+0x40>
 8001ac6:	78bb      	ldrb	r3, [r7, #2]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d903      	bls.n	8001ad4 <self_RTC_dev_set_alarm+0x40>
 8001acc:	78bb      	ldrb	r3, [r7, #2]
 8001ace:	3b0c      	subs	r3, #12
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	e000      	b.n	8001ad6 <self_RTC_dev_set_alarm+0x42>
 8001ad4:	78bb      	ldrb	r3, [r7, #2]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	7393      	strb	r3, [r2, #14]
		dev->alarm_1.min = min;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	787a      	ldrb	r2, [r7, #1]
 8001ade:	735a      	strb	r2, [r3, #13]
		dev->alarm_1.sec = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	751a      	strb	r2, [r3, #20]
		dev->alarm_1.format = format;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7c3a      	ldrb	r2, [r7, #16]
 8001aea:	731a      	strb	r2, [r3, #12]
		dev->alarm_1.am_or_pm = am_pm;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7d3a      	ldrb	r2, [r7, #20]
 8001af0:	73da      	strb	r2, [r3, #15]
		dev->alarm_1.weekday = weekday;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e3a      	ldrb	r2, [r7, #24]
 8001af6:	741a      	strb	r2, [r3, #16]
		dev->alarm_1.date = date;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7f3a      	ldrb	r2, [r7, #28]
 8001afc:	745a      	strb	r2, [r3, #17]
		dev->alarm_1.day_or_date = date_or_day;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b04:	749a      	strb	r2, [r3, #18]
		dev->alarm_1.type = type;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b0c:	74da      	strb	r2, [r3, #19]
		return DS3231_set_alarm(dev->i2c_handle, &dev->alarm_1, alarm_number);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a18      	ldr	r0, [r3, #32]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	330c      	adds	r3, #12
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff fa4f 	bl	8000fbc <DS3231_set_alarm>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	e02c      	b.n	8001b7c <self_RTC_dev_set_alarm+0xe8>
		dev->alarm_2.hour = (format == HOUR_12 && hour > 12) ? hour - 12 : hour;
 8001b22:	7c3b      	ldrb	r3, [r7, #16]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <self_RTC_dev_set_alarm+0xa2>
 8001b28:	78bb      	ldrb	r3, [r7, #2]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d903      	bls.n	8001b36 <self_RTC_dev_set_alarm+0xa2>
 8001b2e:	78bb      	ldrb	r3, [r7, #2]
 8001b30:	3b0c      	subs	r3, #12
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	e000      	b.n	8001b38 <self_RTC_dev_set_alarm+0xa4>
 8001b36:	78bb      	ldrb	r3, [r7, #2]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	75d3      	strb	r3, [r2, #23]
		dev->alarm_2.min = min;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	787a      	ldrb	r2, [r7, #1]
 8001b40:	759a      	strb	r2, [r3, #22]
		dev->alarm_2.format = format;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	7c3a      	ldrb	r2, [r7, #16]
 8001b46:	755a      	strb	r2, [r3, #21]
		dev->alarm_2.am_or_pm = am_pm;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7d3a      	ldrb	r2, [r7, #20]
 8001b4c:	761a      	strb	r2, [r3, #24]
		dev->alarm_2.weekday = weekday;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7e3a      	ldrb	r2, [r7, #24]
 8001b52:	765a      	strb	r2, [r3, #25]
		dev->alarm_2.date = date;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7f3a      	ldrb	r2, [r7, #28]
 8001b58:	769a      	strb	r2, [r3, #26]
		dev->alarm_2.day_or_date = date_or_day;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b60:	76da      	strb	r2, [r3, #27]
		dev->alarm_2.type = type;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b68:	771a      	strb	r2, [r3, #28]
		return DS3231_set_alarm(dev->i2c_handle,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a18      	ldr	r0, [r3, #32]
				(ds3231_alarm_t*) &dev->alarm_2, alarm_number);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3315      	adds	r3, #21
		return DS3231_set_alarm(dev->i2c_handle,
 8001b72:	78fa      	ldrb	r2, [r7, #3]
 8001b74:	4619      	mov	r1, r3
 8001b76:	f7ff fa21 	bl	8000fbc <DS3231_set_alarm>
 8001b7a:	4603      	mov	r3, r0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <self_RTC_dev_get_alarm>:
}

//TODO check second alarm
//untested
signed char self_RTC_dev_get_alarm(DS3231_device_t *dev,
		TIME_TYPE_e alarm_number) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
	//TODO last case
	switch (alarm_number) {
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <self_RTC_dev_get_alarm+0x1e>
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d00d      	beq.n	8001bb6 <self_RTC_dev_get_alarm+0x32>
		return DS3231_get_alarm(dev->i2c_handle, &dev->alarm_1, alarm_number);
	case ALARM_TWO: //short
		return DS3231_get_alarm(dev->i2c_handle,
				(ds3231_alarm_t*) &dev->alarm_2, alarm_number);
	default:
		break;
 8001b9a:	bf00      	nop
	}

	return -1;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ba0:	e012      	b.n	8001bc8 <self_RTC_dev_get_alarm+0x44>
		return DS3231_get_alarm(dev->i2c_handle, &dev->alarm_1, alarm_number);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a18      	ldr	r0, [r3, #32]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7ff fb4f 	bl	8001250 <DS3231_get_alarm>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	e008      	b.n	8001bc8 <self_RTC_dev_get_alarm+0x44>
		return DS3231_get_alarm(dev->i2c_handle,
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a18      	ldr	r0, [r3, #32]
				(ds3231_alarm_t*) &dev->alarm_2, alarm_number);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3315      	adds	r3, #21
		return DS3231_get_alarm(dev->i2c_handle,
 8001bbe:	78fa      	ldrb	r2, [r7, #3]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7ff fb45 	bl	8001250 <DS3231_get_alarm>
 8001bc6:	4603      	mov	r3, r0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <self_RTC_dev_get_temp>:
signed char RTC_dev_get_alarm(TIME_TYPE_e alarm_number) {
	return RTC_dev.get_alarm(&RTC_dev, alarm_number);
}

//untested
signed char self_RTC_dev_get_temp(DS3231_device_t *dev) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return DS3231_get_temp(dev->i2c_handle, &dev->temp);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1a      	ldr	r2, [r3, #32]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3324      	adds	r3, #36	; 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff f9ad 	bl	8000f42 <DS3231_get_temp>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <self_RTC_dev_actualize>:

signed char RTC_dev_get_temp(void) {
	return RTC_dev.get_temp(&RTC_dev);
}

signed char self_RTC_dev_actualize(DS3231_device_t *dev) {
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af06      	add	r7, sp, #24
 8001bfa:	6078      	str	r0, [r7, #4]
	if (RTC_dev.set_time(dev, dev->time_1.hour, dev->time_1.min,
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <self_RTC_dev_actualize+0xd8>)
 8001bfe:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7899      	ldrb	r1, [r3, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7858      	ldrb	r0, [r3, #1]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7a9d      	ldrb	r5, [r3, #10]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	78d2      	ldrb	r2, [r2, #3]
 8001c14:	9201      	str	r2, [sp, #4]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	462b      	mov	r3, r5
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	47a0      	blx	r4
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <self_RTC_dev_actualize+0x38>
			dev->time_1.sec, dev->time_1.format, dev->time_1.am_or_pm))
		return -1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c2a:	e04a      	b.n	8001cc2 <self_RTC_dev_actualize+0xce>
	if (RTC_dev.set_alarm(dev, ALARM_ONE, dev->alarm_1.hour, dev->alarm_1.min,
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <self_RTC_dev_actualize+0xd8>)
 8001c2e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 c00e 	ldrb.w	ip, [r3, #14]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 e00d 	ldrb.w	lr, [r3, #13]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7b1b      	ldrb	r3, [r3, #12]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	7bd2      	ldrb	r2, [r2, #15]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	7c09      	ldrb	r1, [r1, #16]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	7c40      	ldrb	r0, [r0, #17]
 8001c4c:	687d      	ldr	r5, [r7, #4]
 8001c4e:	7cad      	ldrb	r5, [r5, #18]
 8001c50:	687e      	ldr	r6, [r7, #4]
 8001c52:	7cf6      	ldrb	r6, [r6, #19]
 8001c54:	9605      	str	r6, [sp, #20]
 8001c56:	9504      	str	r5, [sp, #16]
 8001c58:	9003      	str	r0, [sp, #12]
 8001c5a:	9102      	str	r1, [sp, #8]
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4673      	mov	r3, lr
 8001c62:	4662      	mov	r2, ip
 8001c64:	2101      	movs	r1, #1
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	47a0      	blx	r4
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <self_RTC_dev_actualize+0x82>
			dev->alarm_1.format, dev->alarm_1.am_or_pm, dev->alarm_1.weekday,
			dev->alarm_1.date, dev->alarm_1.day_or_date, dev->alarm_1.type))
		return -1;
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c74:	e025      	b.n	8001cc2 <self_RTC_dev_actualize+0xce>
	if (RTC_dev.set_alarm(dev, ALARM_TWO, dev->alarm_2.hour, dev->alarm_2.min,
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <self_RTC_dev_actualize+0xd8>)
 8001c78:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 c017 	ldrb.w	ip, [r3, #23]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 e016 	ldrb.w	lr, [r3, #22]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7d5b      	ldrb	r3, [r3, #21]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	7e12      	ldrb	r2, [r2, #24]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	7e49      	ldrb	r1, [r1, #25]
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	7e80      	ldrb	r0, [r0, #26]
 8001c96:	687d      	ldr	r5, [r7, #4]
 8001c98:	7eed      	ldrb	r5, [r5, #27]
 8001c9a:	687e      	ldr	r6, [r7, #4]
 8001c9c:	7f36      	ldrb	r6, [r6, #28]
 8001c9e:	9605      	str	r6, [sp, #20]
 8001ca0:	9504      	str	r5, [sp, #16]
 8001ca2:	9003      	str	r0, [sp, #12]
 8001ca4:	9102      	str	r1, [sp, #8]
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4673      	mov	r3, lr
 8001cac:	4662      	mov	r2, ip
 8001cae:	2102      	movs	r1, #2
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	47a0      	blx	r4
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <self_RTC_dev_actualize+0xcc>
			dev->alarm_2.format, dev->alarm_2.am_or_pm, dev->alarm_2.weekday,
			dev->alarm_2.date, dev->alarm_2.day_or_date, dev->alarm_2.type))
		return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	e000      	b.n	8001cc2 <self_RTC_dev_actualize+0xce>
	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000164 	.word	0x20000164

08001cd0 <RTC_dev_init>:
	self_RTC_dev_actualize(device);

	return device;
}

signed char RTC_dev_init(unsigned char def_vals) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	//time
	if (def_vals) {
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d04e      	beq.n	8001d7e <RTC_dev_init+0xae>
		RTC_dev.time_1.format = RTC_DEF_TWELVE_HR;
 8001ce0:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <RTC_dev_init+0x118>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
		RTC_dev.time_1.hour = RTC_DEF_HOUR;
 8001ce6:	4b40      	ldr	r3, [pc, #256]	; (8001de8 <RTC_dev_init+0x118>)
 8001ce8:	220b      	movs	r2, #11
 8001cea:	709a      	strb	r2, [r3, #2]
		RTC_dev.time_1.min = RTC_DEF_MIN;
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <RTC_dev_init+0x118>)
 8001cee:	223b      	movs	r2, #59	; 0x3b
 8001cf0:	705a      	strb	r2, [r3, #1]
		RTC_dev.time_1.sec = RTC_DEF_SEC;
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <RTC_dev_init+0x118>)
 8001cf4:	223a      	movs	r2, #58	; 0x3a
 8001cf6:	729a      	strb	r2, [r3, #10]
		RTC_dev.time_1.am_or_pm = RTC_DEF_AM_PM;
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <RTC_dev_init+0x118>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	70da      	strb	r2, [r3, #3]
		RTC_dev.time_1.weekday = RTC_DEF_WEEKDAY;
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <RTC_dev_init+0x118>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	711a      	strb	r2, [r3, #4]
		RTC_dev.time_1.date = RTC_DEF_DATE;
 8001d04:	4b38      	ldr	r3, [pc, #224]	; (8001de8 <RTC_dev_init+0x118>)
 8001d06:	2205      	movs	r2, #5
 8001d08:	715a      	strb	r2, [r3, #5]
		RTC_dev.time_1.month = RTC_DEF_MONTH;
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <RTC_dev_init+0x118>)
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	719a      	strb	r2, [r3, #6]
		RTC_dev.time_1.year = RTC_DEF_YEAR;
 8001d10:	4b35      	ldr	r3, [pc, #212]	; (8001de8 <RTC_dev_init+0x118>)
 8001d12:	f240 72e1 	movw	r2, #2017	; 0x7e1
 8001d16:	811a      	strh	r2, [r3, #8]

		//alarm 1
		RTC_dev.alarm_1.format = RTC_DEF_ALM1_TWELVE_HR;
 8001d18:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <RTC_dev_init+0x118>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	731a      	strb	r2, [r3, #12]
		RTC_dev.alarm_1.min = RTC_DEF_ALM1_MIN;
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <RTC_dev_init+0x118>)
 8001d20:	2202      	movs	r2, #2
 8001d22:	735a      	strb	r2, [r3, #13]
		RTC_dev.alarm_1.hour = RTC_DEF_ALM1_HOUR;
 8001d24:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <RTC_dev_init+0x118>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	739a      	strb	r2, [r3, #14]
		RTC_dev.alarm_1.am_or_pm = RTC_DEF_ALM1_AM_PM;
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <RTC_dev_init+0x118>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	73da      	strb	r2, [r3, #15]
		RTC_dev.alarm_1.weekday = RTC_DEF_ALM1_WEEKDAY;
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <RTC_dev_init+0x118>)
 8001d32:	2203      	movs	r2, #3
 8001d34:	741a      	strb	r2, [r3, #16]
		RTC_dev.alarm_1.date = RTC_DEF_ALM1_DATE;
 8001d36:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <RTC_dev_init+0x118>)
 8001d38:	2203      	movs	r2, #3
 8001d3a:	745a      	strb	r2, [r3, #17]
		RTC_dev.alarm_1.day_or_date = RTC_DEF_ALM1_DAY_OR_DATE;
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RTC_dev_init+0x118>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	749a      	strb	r2, [r3, #18]
		RTC_dev.alarm_1.type = RTC_DEF_ALM1_TYPE;
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <RTC_dev_init+0x118>)
 8001d44:	2203      	movs	r2, #3
 8001d46:	74da      	strb	r2, [r3, #19]
		RTC_dev.alarm_1.sec = RTC_DEV_ALM1_SEC;
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <RTC_dev_init+0x118>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	751a      	strb	r2, [r3, #20]

		//alarm 1
		RTC_dev.alarm_2.format = RTC_DEF_ALM2_TWELVE_HR;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <RTC_dev_init+0x118>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	755a      	strb	r2, [r3, #21]
		RTC_dev.alarm_2.min = RTC_DEF_ALM2_MIN;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <RTC_dev_init+0x118>)
 8001d56:	2205      	movs	r2, #5
 8001d58:	759a      	strb	r2, [r3, #22]
		RTC_dev.alarm_2.hour = RTC_DEF_ALM2_HOUR;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <RTC_dev_init+0x118>)
 8001d5c:	220e      	movs	r2, #14
 8001d5e:	75da      	strb	r2, [r3, #23]
		RTC_dev.alarm_2.am_or_pm = RTC_DEF_ALM2_AM_PM;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <RTC_dev_init+0x118>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	761a      	strb	r2, [r3, #24]
		RTC_dev.alarm_2.weekday = RTC_DEF_ALM2_WEEKDAY;
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <RTC_dev_init+0x118>)
 8001d68:	2202      	movs	r2, #2
 8001d6a:	765a      	strb	r2, [r3, #25]
		RTC_dev.alarm_2.date = RTC_DEF_ALM2_DATE;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <RTC_dev_init+0x118>)
 8001d6e:	220e      	movs	r2, #14
 8001d70:	769a      	strb	r2, [r3, #26]
		RTC_dev.alarm_2.day_or_date = RTC_DEF_ALM2_DAY_OR_DATE;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <RTC_dev_init+0x118>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	76da      	strb	r2, [r3, #27]
		RTC_dev.alarm_2.type = RTC_DEF_ALM2_TYPE;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <RTC_dev_init+0x118>)
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	771a      	strb	r2, [r3, #28]
	}

	RTC_dev.i2c_handle = &RTC_I2C_PORT;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <RTC_dev_init+0x118>)
 8001d80:	4a1a      	ldr	r2, [pc, #104]	; (8001dec <RTC_dev_init+0x11c>)
 8001d82:	621a      	str	r2, [r3, #32]

	//functions
	RTC_dev.set_hour = &self_RTC_dev_time_set_hour;
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <RTC_dev_init+0x118>)
 8001d86:	4a1a      	ldr	r2, [pc, #104]	; (8001df0 <RTC_dev_init+0x120>)
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
	RTC_dev.set_min = &self_RTC_dev_time_set_min;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <RTC_dev_init+0x118>)
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <RTC_dev_init+0x124>)
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
	RTC_dev.set_sec = &self_RTC_dev_time_set_sec;
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <RTC_dev_init+0x118>)
 8001d92:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <RTC_dev_init+0x128>)
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
	RTC_dev.set_date = &self_RTC_dev_time_set_date;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <RTC_dev_init+0x118>)
 8001d98:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <RTC_dev_init+0x12c>)
 8001d9a:	639a      	str	r2, [r3, #56]	; 0x38
	RTC_dev.set_day = &self_RTC_dev_time_set_day;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <RTC_dev_init+0x118>)
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <RTC_dev_init+0x130>)
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
	RTC_dev.set_month = &self_RTC_dev_time_set_month;
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <RTC_dev_init+0x118>)
 8001da4:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <RTC_dev_init+0x134>)
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
	RTC_dev.set_year = &self_RTC_dev_time_set_year;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <RTC_dev_init+0x118>)
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <RTC_dev_init+0x138>)
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
	RTC_dev.set_time = &self_RTC_dev_set_time;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <RTC_dev_init+0x118>)
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <RTC_dev_init+0x13c>)
 8001db2:	649a      	str	r2, [r3, #72]	; 0x48
	RTC_dev.get_time = &self_RTC_dev_get_time;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <RTC_dev_init+0x118>)
 8001db6:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <RTC_dev_init+0x140>)
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
	RTC_dev.set_date_complete = &self_RTC_dev_set_date_complete;
 8001dba:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <RTC_dev_init+0x118>)
 8001dbc:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <RTC_dev_init+0x144>)
 8001dbe:	651a      	str	r2, [r3, #80]	; 0x50
	RTC_dev.get_date_complete = &self_RTC_dev_get_date;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <RTC_dev_init+0x118>)
 8001dc2:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <RTC_dev_init+0x148>)
 8001dc4:	64da      	str	r2, [r3, #76]	; 0x4c
	RTC_dev.set_alarm = &self_RTC_dev_set_alarm;
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <RTC_dev_init+0x118>)
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <RTC_dev_init+0x14c>)
 8001dca:	659a      	str	r2, [r3, #88]	; 0x58
	RTC_dev.get_alarm = &self_RTC_dev_get_alarm;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <RTC_dev_init+0x118>)
 8001dce:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <RTC_dev_init+0x150>)
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
	RTC_dev.get_temp = &self_RTC_dev_get_temp;
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <RTC_dev_init+0x118>)
 8001dd4:	4a13      	ldr	r2, [pc, #76]	; (8001e24 <RTC_dev_init+0x154>)
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c

	return self_RTC_dev_actualize(&RTC_dev);
 8001dd8:	4803      	ldr	r0, [pc, #12]	; (8001de8 <RTC_dev_init+0x118>)
 8001dda:	f7ff ff0b 	bl	8001bf4 <self_RTC_dev_actualize>
 8001dde:	4603      	mov	r3, r0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000164 	.word	0x20000164
 8001dec:	20000100 	.word	0x20000100
 8001df0:	08001829 	.word	0x08001829
 8001df4:	08001851 	.word	0x08001851
 8001df8:	08001875 	.word	0x08001875
 8001dfc:	080018bd 	.word	0x080018bd
 8001e00:	08001899 	.word	0x08001899
 8001e04:	080018e1 	.word	0x080018e1
 8001e08:	08001905 	.word	0x08001905
 8001e0c:	08001965 	.word	0x08001965
 8001e10:	080019d5 	.word	0x080019d5
 8001e14:	08001a0d 	.word	0x08001a0d
 8001e18:	08001a65 	.word	0x08001a65
 8001e1c:	08001a95 	.word	0x08001a95
 8001e20:	08001b85 	.word	0x08001b85
 8001e24:	08001bd1 	.word	0x08001bd1

08001e28 <smAddState>:
	unsigned char _initialized :1;
} sm = { 0 };

unsigned int smAddState(signed int ID, char *name, void *(*init)(void*),
		void (*enter)(void*), void (*run)(void*), void (*exit)(void*),
		void *data) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]

	// system_state_t structure
	system_state_t *new_state = (system_state_t*) calloc(1,
 8001e36:	2124      	movs	r1, #36	; 0x24
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f005 fd67 	bl	800790c <calloc>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]
			sizeof(system_state_t));

	new_state->name = strdup(name);
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f006 f8dc 	bl	8008000 <strdup>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	605a      	str	r2, [r3, #4]
	new_state->init = init;
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	60da      	str	r2, [r3, #12]
	new_state->enter = enter;
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	611a      	str	r2, [r3, #16]
	new_state->run = run;
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	6a3a      	ldr	r2, [r7, #32]
 8001e60:	615a      	str	r2, [r3, #20]
	new_state->exit = exit;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e66:	619a      	str	r2, [r3, #24]
	new_state->data = data;
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e6c:	609a      	str	r2, [r3, #8]
	new_state->ID = (ID != -1) ? ID : ++sm._state_count;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e74:	d107      	bne.n	8001e86 <smAddState+0x5e>
 8001e76:	4b13      	ldr	r3, [pc, #76]	; (8001ec4 <smAddState+0x9c>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <smAddState+0x9c>)
 8001e7e:	6093      	str	r3, [r2, #8]
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <smAddState+0x9c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	e000      	b.n	8001e88 <smAddState+0x60>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	6013      	str	r3, [r2, #0]

	if (!sm.head)
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <smAddState+0x9c>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <smAddState+0x74>
		sm.head = new_state;
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <smAddState+0x9c>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6053      	str	r3, [r2, #4]
 8001e9a:	e00d      	b.n	8001eb8 <smAddState+0x90>
	else {
		system_state_t *iterator;

		// Get end of state linked list
		for (iterator = sm.head; iterator->next; iterator = iterator->next)
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <smAddState+0x9c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	e002      	b.n	8001eaa <smAddState+0x82>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1f8      	bne.n	8001ea4 <smAddState+0x7c>
			;

		iterator->next = new_state;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	61da      	str	r2, [r3, #28]
	}

	return new_state->ID;
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200001c8 	.word	0x200001c8

08001ec8 <smFindState>:

system_state_t* smFindState(unsigned int ID) {
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
	system_state_t *iterator;

	for (iterator = sm.head; iterator->next && (iterator->next->ID != ID);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <smFindState+0x38>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	e002      	b.n	8001ede <smFindState+0x16>
			iterator = iterator->next)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	60fb      	str	r3, [r7, #12]
	for (iterator = sm.head; iterator->next && (iterator->next->ID != ID);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <smFindState+0x2a>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d1f2      	bne.n	8001ed8 <smFindState+0x10>
		;

	return iterator->next;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	69db      	ldr	r3, [r3, #28]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	200001c8 	.word	0x200001c8

08001f04 <smInit>:

			free(delete);
		}
}

unsigned char smInit(void) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
	system_state_t *iterator;

	sm.queue = xQueueCreate(STATE_MACHINE_STATE_QUEUE_LENGTH,
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f003 fa39 	bl	8005386 <xQueueGenericCreate>
 8001f14:	4603      	mov	r3, r0
 8001f16:	4a1c      	ldr	r2, [pc, #112]	; (8001f88 <smInit+0x84>)
 8001f18:	6013      	str	r3, [r2, #0]
			sizeof(unsigned int));

	if (!sm.queue) {
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <smInit+0x84>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <smInit+0x34>
		fprintf(stderr, "State queue creation failed\n");
 8001f22:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <smInit+0x88>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	221c      	movs	r2, #28
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	4818      	ldr	r0, [pc, #96]	; (8001f90 <smInit+0x8c>)
 8001f2e:	f005 fe65 	bl	8007bfc <fwrite>
		exit(EXIT_FAILURE);
 8001f32:	2001      	movs	r0, #1
 8001f34:	f005 fcf8 	bl	8007928 <exit>
	}

	// Call each state's init function
	for (iterator = sm.head; iterator; iterator = iterator->next) {
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <smInit+0x84>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e016      	b.n	8001f6e <smInit+0x6a>
		if (iterator->init)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <smInit+0x56>
			iterator->data = (iterator->init)(iterator->data);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6892      	ldr	r2, [r2, #8]
 8001f50:	4610      	mov	r0, r2
 8001f52:	4798      	blx	r3
 8001f54:	4602      	mov	r2, r0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	609a      	str	r2, [r3, #8]
		iterator->_initialized = 1;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	f892 3020 	ldrb.w	r3, [r2, #32]
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	f882 3020 	strb.w	r3, [r2, #32]
	for (iterator = sm.head; iterator; iterator = iterator->next) {
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e5      	bne.n	8001f40 <smInit+0x3c>
	}
	sm._initialized = 1;
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <smInit+0x84>)
 8001f76:	7d13      	ldrb	r3, [r2, #20]
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	7513      	strb	r3, [r2, #20]
	return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	200001c8 	.word	0x200001c8
 8001f8c:	20000064 	.word	0x20000064
 8001f90:	08008520 	.word	0x08008520

08001f94 <smSwapStates>:

void smSwapStates(unsigned int next_state_ID) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	system_state_t *next_state = smFindState(next_state_ID);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff ff93 	bl	8001ec8 <smFindState>
 8001fa2:	60f8      	str	r0, [r7, #12]

	// Swap states and run appropriate functions
	if (next_state) {
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d026      	beq.n	8001ff8 <smSwapStates+0x64>
		sm.next = next_state;
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <smSwapStates+0x6c>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6113      	str	r3, [r2, #16]

		if (sm.current != sm.next) {
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <smSwapStates+0x6c>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	; (8002000 <smSwapStates+0x6c>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d01d      	beq.n	8001ff8 <smSwapStates+0x64>
			if (sm.current->exit)
 8001fbc:	4b10      	ldr	r3, [pc, #64]	; (8002000 <smSwapStates+0x6c>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <smSwapStates+0x42>
				(sm.current->exit)(sm.current->data);
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <smSwapStates+0x6c>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <smSwapStates+0x6c>)
 8001fce:	68d2      	ldr	r2, [r2, #12]
 8001fd0:	6892      	ldr	r2, [r2, #8]
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4798      	blx	r3

			if (sm.next->enter)
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <smSwapStates+0x6c>)
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <smSwapStates+0x5c>
				(sm.next->enter)(sm.next->data);
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <smSwapStates+0x6c>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4a06      	ldr	r2, [pc, #24]	; (8002000 <smSwapStates+0x6c>)
 8001fe8:	6912      	ldr	r2, [r2, #16]
 8001fea:	6892      	ldr	r2, [r2, #8]
 8001fec:	4610      	mov	r0, r2
 8001fee:	4798      	blx	r3

			sm.current = sm.next;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <smSwapStates+0x6c>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a02      	ldr	r2, [pc, #8]	; (8002000 <smSwapStates+0x6c>)
 8001ff6:	60d3      	str	r3, [r2, #12]
		}
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	200001c8 	.word	0x200001c8

08002004 <smSetStates>:

void smSetStates(unsigned int next_state_ID) {
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	xQueueSend(sm.queue, &next_state_ID, 0);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <smSetStates+0x20>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	1d39      	adds	r1, r7, #4
 8002012:	2300      	movs	r3, #0
 8002014:	2200      	movs	r2, #0
 8002016:	f003 fa17 	bl	8005448 <xQueueGenericSend>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200001c8 	.word	0x200001c8

08002028 <smRunStates>:

void smRunStates(void) {
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	if (sm.current->run)
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <smRunStates+0x24>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <smRunStates+0x1e>
		(sm.current->run)(sm.current->data);
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <smRunStates+0x24>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	4a03      	ldr	r2, [pc, #12]	; (800204c <smRunStates+0x24>)
 800203e:	68d2      	ldr	r2, [r2, #12]
 8002040:	6892      	ldr	r2, [r2, #8]
 8002042:	4610      	mov	r0, r2
 8002044:	4798      	blx	r3
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200001c8 	.word	0x200001c8

08002050 <smHandlerTask>:

void smHandlerTask(void *argument) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	TickType_t prev_wake_time;
	unsigned char state_in;

	if (!sm._initialized) {
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <smHandlerTask+0x78>)
 800205a:	7d1b      	ldrb	r3, [r3, #20]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d117      	bne.n	8002096 <smHandlerTask+0x46>
		if (smInit()) {
 8002066:	f7ff ff4d 	bl	8001f04 <smInit>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <smHandlerTask+0x36>
			fprintf(stderr, "No states\n");
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <smHandlerTask+0x7c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	220a      	movs	r2, #10
 8002078:	2101      	movs	r1, #1
 800207a:	4815      	ldr	r0, [pc, #84]	; (80020d0 <smHandlerTask+0x80>)
 800207c:	f005 fdbe 	bl	8007bfc <fwrite>
			exit(EXIT_FAILURE);
 8002080:	2001      	movs	r0, #1
 8002082:	f005 fc51 	bl	8007928 <exit>
		}
		sm.current = sm.next = sm.head;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <smHandlerTask+0x78>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <smHandlerTask+0x78>)
 800208c:	6113      	str	r3, [r2, #16]
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <smHandlerTask+0x78>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <smHandlerTask+0x78>)
 8002094:	60d3      	str	r3, [r2, #12]
	}

	while (1) {
		if (xQueueReceive(sm.queue, &state_in, 0) == pdTRUE)
 8002096:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <smHandlerTask+0x78>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f107 010b 	add.w	r1, r7, #11
 800209e:	2200      	movs	r2, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f003 fb67 	bl	8005774 <xQueueReceive>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d103      	bne.n	80020b4 <smHandlerTask+0x64>
			smSwapStates(state_in);
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff70 	bl	8001f94 <smSwapStates>
		smRunStates();
 80020b4:	f7ff ffb8 	bl	8002028 <smRunStates>
		vTaskDelayUntil(&prev_wake_time, STATE_MACHINE_INTERVAL);
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	210a      	movs	r1, #10
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 ff54 	bl	8005f6c <vTaskDelayUntil>
		if (xQueueReceive(sm.queue, &state_in, 0) == pdTRUE)
 80020c4:	e7e7      	b.n	8002096 <smHandlerTask+0x46>
 80020c6:	bf00      	nop
 80020c8:	200001c8 	.word	0x200001c8
 80020cc:	20000064 	.word	0x20000064
 80020d0:	08008540 	.word	0x08008540

080020d4 <SN54HC595_out_int>:
	shift_dev.set_data(&shift_dev, data);
	shift_dev.output(&shift_dev, byte_count);

	return 0;
}
unsigned char SN54HC595_out_int(uint32_t data) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	static unsigned char i;

	if (shift_dev.dev_count < 4)
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <SN54HC595_out_int+0x80>)
 80020de:	791b      	ldrb	r3, [r3, #4]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d808      	bhi.n	80020f6 <SN54HC595_out_int+0x22>
		memset(shift_dev.out_buf, 0, shift_dev.dev_count);
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <SN54HC595_out_int+0x80>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <SN54HC595_out_int+0x80>)
 80020ea:	7912      	ldrb	r2, [r2, #4]
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f005 fdd0 	bl	8007c94 <memset>
 80020f4:	e005      	b.n	8002102 <SN54HC595_out_int+0x2e>
	else if (shift_dev.dev_count > 4)
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <SN54HC595_out_int+0x80>)
 80020f8:	791b      	ldrb	r3, [r3, #4]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d901      	bls.n	8002102 <SN54HC595_out_int+0x2e>
		return -1;
 80020fe:	23ff      	movs	r3, #255	; 0xff
 8002100:	e024      	b.n	800214c <SN54HC595_out_int+0x78>

	for (i = 0; i < shift_dev.dev_count; i++)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <SN54HC595_out_int+0x84>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e012      	b.n	8002130 <SN54HC595_out_int+0x5c>
		shift_dev.out_buf[i] = (data >> (i * 8)) & 0xFF;
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <SN54HC595_out_int+0x84>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	fa22 f103 	lsr.w	r1, r2, r3
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <SN54HC595_out_int+0x80>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <SN54HC595_out_int+0x84>)
 800211c:	7812      	ldrb	r2, [r2, #0]
 800211e:	4413      	add	r3, r2
 8002120:	b2ca      	uxtb	r2, r1
 8002122:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < shift_dev.dev_count; i++)
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <SN54HC595_out_int+0x84>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	b2da      	uxtb	r2, r3
 800212c:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SN54HC595_out_int+0x84>)
 800212e:	701a      	strb	r2, [r3, #0]
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <SN54HC595_out_int+0x80>)
 8002132:	791a      	ldrb	r2, [r3, #4]
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <SN54HC595_out_int+0x84>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8e6      	bhi.n	800210a <SN54HC595_out_int+0x36>

	shift_dev.output(&shift_dev, shift_dev.dev_count);
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <SN54HC595_out_int+0x80>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <SN54HC595_out_int+0x80>)
 8002142:	7912      	ldrb	r2, [r2, #4]
 8002144:	4611      	mov	r1, r2
 8002146:	4803      	ldr	r0, [pc, #12]	; (8002154 <SN54HC595_out_int+0x80>)
 8002148:	4798      	blx	r3

	return 0;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000000 	.word	0x20000000
 8002158:	200001e0 	.word	0x200001e0

0800215c <output_self>:
	}
	//latch data
	shift_dev.latch(&shift_dev);
}

void output_self(shift_array_t *self, unsigned char byte_count) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
	//Set serial clock and latch pin low
	HAL_GPIO_WritePin(self->ser_clk_port, self->ser_clk_pin, GPIO_PIN_RESET);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6918      	ldr	r0, [r3, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	89db      	ldrh	r3, [r3, #14]
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	f000 ff3f 	bl	8002ff6 <HAL_GPIO_WritePin>
	for (unsigned char i = byte_count; i > 0; i--) {
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	73fb      	strb	r3, [r7, #15]
 800217c:	e02f      	b.n	80021de <output_self+0x82>
		for (unsigned char j = 8; j > 0; j--) {
 800217e:	2308      	movs	r3, #8
 8002180:	73bb      	strb	r3, [r7, #14]
 8002182:	e026      	b.n	80021d2 <output_self+0x76>
			if (*(self->out_buf + ((i - 1) * sizeof(unsigned char)))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	3a01      	subs	r2, #1
 800218c:	4413      	add	r3, r2
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
					& (1 << (j - 1)))
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	3b01      	subs	r3, #1
			if (*(self->out_buf + ((i - 1) * sizeof(unsigned char)))
 8002196:	fa42 f303 	asr.w	r3, r2, r3
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d008      	beq.n	80021b4 <output_self+0x58>
				HAL_GPIO_WritePin(self->ser_in_port, self->ser_in_pin,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6898      	ldr	r0, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	88db      	ldrh	r3, [r3, #6]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4619      	mov	r1, r3
 80021ae:	f000 ff22 	bl	8002ff6 <HAL_GPIO_WritePin>
 80021b2:	e007      	b.n	80021c4 <output_self+0x68>
						GPIO_PIN_SET);
			else
				HAL_GPIO_WritePin(self->ser_in_port, self->ser_in_pin,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6898      	ldr	r0, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	88db      	ldrh	r3, [r3, #6]
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	f000 ff19 	bl	8002ff6 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			//clock bit
			self->clock_data(self);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	4798      	blx	r3
		for (unsigned char j = 8; j > 0; j--) {
 80021cc:	7bbb      	ldrb	r3, [r7, #14]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	73bb      	strb	r3, [r7, #14]
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1d5      	bne.n	8002184 <output_self+0x28>
	for (unsigned char i = byte_count; i > 0; i--) {
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	3b01      	subs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1cc      	bne.n	800217e <output_self+0x22>
		}
	}
	//latch data
	self->latch(self);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	4798      	blx	r3
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <output_self_delay>:

void output_self_delay(shift_array_t *self, unsigned char byte_count,
		uint32_t delay) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	460b      	mov	r3, r1
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	72fb      	strb	r3, [r7, #11]
	//Set serial clock and latch pin low
	HAL_GPIO_WritePin(self->ser_clk_port, self->ser_clk_pin, GPIO_PIN_RESET);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6918      	ldr	r0, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	89db      	ldrh	r3, [r3, #14]
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	f000 fef2 	bl	8002ff6 <HAL_GPIO_WritePin>
	for (unsigned char i = 0; i < byte_count; i++) {
 8002212:	2300      	movs	r3, #0
 8002214:	75fb      	strb	r3, [r7, #23]
 8002216:	e034      	b.n	8002282 <output_self_delay+0x8e>
		for (unsigned char j = 0; j < 8; j++) {
 8002218:	2300      	movs	r3, #0
 800221a:	75bb      	strb	r3, [r7, #22]
 800221c:	e024      	b.n	8002268 <output_self_delay+0x74>
			if (*(self->out_buf + (i * sizeof(unsigned char))) & (1 << j))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	4413      	add	r3, r2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	7dbb      	ldrb	r3, [r7, #22]
 800222c:	fa42 f303 	asr.w	r3, r2, r3
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <output_self_delay+0x56>
				HAL_GPIO_WritePin(self->ser_in_port, self->ser_in_pin,
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6898      	ldr	r0, [r3, #8]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	88db      	ldrh	r3, [r3, #6]
 8002240:	2201      	movs	r2, #1
 8002242:	4619      	mov	r1, r3
 8002244:	f000 fed7 	bl	8002ff6 <HAL_GPIO_WritePin>
 8002248:	e007      	b.n	800225a <output_self_delay+0x66>
						GPIO_PIN_SET);
			else
				HAL_GPIO_WritePin(self->ser_in_port, self->ser_in_pin,
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6898      	ldr	r0, [r3, #8]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88db      	ldrh	r3, [r3, #6]
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	f000 fece 	bl	8002ff6 <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
			//clock bit
			self->clock_data(self);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	4798      	blx	r3
		for (unsigned char j = 0; j < 8; j++) {
 8002262:	7dbb      	ldrb	r3, [r7, #22]
 8002264:	3301      	adds	r3, #1
 8002266:	75bb      	strb	r3, [r7, #22]
 8002268:	7dbb      	ldrb	r3, [r7, #22]
 800226a:	2b07      	cmp	r3, #7
 800226c:	d9d7      	bls.n	800221e <output_self_delay+0x2a>
		}
		//latch data
		self->latch(self);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	4798      	blx	r3
		HAL_Delay(delay);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fc1e 	bl	8002ab8 <HAL_Delay>
	for (unsigned char i = 0; i < byte_count; i++) {
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	3301      	adds	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
 8002282:	7dfa      	ldrb	r2, [r7, #23]
 8002284:	7afb      	ldrb	r3, [r7, #11]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3c6      	bcc.n	8002218 <output_self_delay+0x24>
	}
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <disable_self>:

static void disable_self(shift_array_t *self) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->out_ena_port, self->out_ena_pin, GPIO_PIN_SET);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a18      	ldr	r0, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	8bdb      	ldrh	r3, [r3, #30]
 80022a4:	2201      	movs	r2, #1
 80022a6:	4619      	mov	r1, r3
 80022a8:	f000 fea5 	bl	8002ff6 <HAL_GPIO_WritePin>
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <enable_self>:

static void enable_self(shift_array_t *self) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->out_ena_port, self->out_ena_pin, GPIO_PIN_RESET);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a18      	ldr	r0, [r3, #32]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	8bdb      	ldrh	r3, [r3, #30]
 80022c4:	2200      	movs	r2, #0
 80022c6:	4619      	mov	r1, r3
 80022c8:	f000 fe95 	bl	8002ff6 <HAL_GPIO_WritePin>
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <reset_latch_self>:

static void reset_latch_self(shift_array_t *self) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->latch_port, self->latch_pin, GPIO_PIN_RESET);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6998      	ldr	r0, [r3, #24]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8adb      	ldrh	r3, [r3, #22]
 80022e4:	2200      	movs	r2, #0
 80022e6:	4619      	mov	r1, r3
 80022e8:	f000 fe85 	bl	8002ff6 <HAL_GPIO_WritePin>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <set_byte_self>:

void set_byte_self(shift_array_t *self, unsigned char byte_index,
		unsigned char byte) {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
 8002300:	4613      	mov	r3, r2
 8002302:	70bb      	strb	r3, [r7, #2]
	if (byte_index < self->dev_count)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	429a      	cmp	r2, r3
 800230c:	d205      	bcs.n	800231a <set_byte_self+0x26>
		self->out_buf[byte_index] = byte;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	4413      	add	r3, r2
 8002316:	78ba      	ldrb	r2, [r7, #2]
 8002318:	701a      	strb	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <set_data_self>:

static void set_data_self(shift_array_t *self, unsigned char *data) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
	memcpy(self->out_buf, data, self->dev_count * sizeof(unsigned char));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	791b      	ldrb	r3, [r3, #4]
 8002336:	461a      	mov	r2, r3
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	f005 fc9d 	bl	8007c78 <memcpy>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <clock_data_self>:

static void clock_data_self(shift_array_t *self) {
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->ser_clk_port, self->ser_clk_pin, GPIO_PIN_SET);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6918      	ldr	r0, [r3, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	89db      	ldrh	r3, [r3, #14]
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	f000 fe4c 	bl	8002ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->ser_clk_port, self->ser_clk_pin, GPIO_PIN_RESET);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6918      	ldr	r0, [r3, #16]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	89db      	ldrh	r3, [r3, #14]
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	f000 fe44 	bl	8002ff6 <HAL_GPIO_WritePin>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <latch_self>:

static void latch_self(shift_array_t *self) {
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(self->latch_port, self->latch_pin, GPIO_PIN_SET);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6998      	ldr	r0, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8adb      	ldrh	r3, [r3, #22]
 8002386:	2201      	movs	r2, #1
 8002388:	4619      	mov	r1, r3
 800238a:	f000 fe34 	bl	8002ff6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(self->latch_port, self->latch_pin, GPIO_PIN_RESET);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6998      	ldr	r0, [r3, #24]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8adb      	ldrh	r3, [r3, #22]
 8002396:	2200      	movs	r2, #0
 8002398:	4619      	mov	r1, r3
 800239a:	f000 fe2c 	bl	8002ff6 <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <SN54HC595_init_obj>:

static void SN54HC595_init_obj(shift_array_t *shift) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	enable_self(shift);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff7f 	bl	80022b4 <enable_self>

	reset_latch_self(shift);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff ff8c 	bl	80022d4 <reset_latch_self>

	shift->out_buf = (unsigned char*) calloc(1,
			sizeof(unsigned char) * shift->dev_count);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	791b      	ldrb	r3, [r3, #4]
	shift->out_buf = (unsigned char*) calloc(1,
 80023c0:	4619      	mov	r1, r3
 80023c2:	2001      	movs	r0, #1
 80023c4:	f005 faa2 	bl	800790c <calloc>
 80023c8:	4603      	mov	r3, r0
 80023ca:	461a      	mov	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < shift->dev_count; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e008      	b.n	80023e8 <SN54HC595_init_obj+0x40>
		shift->out_buf[i] = 0xFF;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4413      	add	r3, r2
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < shift->dev_count; i++)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	791b      	ldrb	r3, [r3, #4]
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	dbf0      	blt.n	80023d6 <SN54HC595_init_obj+0x2e>

	HAL_GPIO_WritePin(shift->sr_clr_port, shift->sr_clr_pin, GPIO_PIN_SET);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023fc:	2201      	movs	r2, #1
 80023fe:	4619      	mov	r1, r3
 8002400:	f000 fdf9 	bl	8002ff6 <HAL_GPIO_WritePin>

	shift->output = &output_self;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <SN54HC595_init_obj+0x9c>)
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
	shift->output_delay = &output_self_delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <SN54HC595_init_obj+0xa0>)
 800240e:	635a      	str	r2, [r3, #52]	; 0x34
	shift->disbale = &disable_self;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0e      	ldr	r2, [pc, #56]	; (800244c <SN54HC595_init_obj+0xa4>)
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
	shift->enable = &enable_self;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <SN54HC595_init_obj+0xa8>)
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c
	shift->reset_latch = &reset_latch_self;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <SN54HC595_init_obj+0xac>)
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
	shift->set_byte = &set_byte_self;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <SN54HC595_init_obj+0xb0>)
 8002426:	645a      	str	r2, [r3, #68]	; 0x44
	shift->set_data = &set_data_self;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <SN54HC595_init_obj+0xb4>)
 800242c:	649a      	str	r2, [r3, #72]	; 0x48
	shift->clock_data = &clock_data_self;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <SN54HC595_init_obj+0xb8>)
 8002432:	64da      	str	r2, [r3, #76]	; 0x4c
	shift->latch = &latch_self;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <SN54HC595_init_obj+0xbc>)
 8002438:	651a      	str	r2, [r3, #80]	; 0x50
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	0800215d 	.word	0x0800215d
 8002448:	080021f5 	.word	0x080021f5
 800244c:	08002295 	.word	0x08002295
 8002450:	080022b5 	.word	0x080022b5
 8002454:	080022d5 	.word	0x080022d5
 8002458:	080022f5 	.word	0x080022f5
 800245c:	08002325 	.word	0x08002325
 8002460:	08002347 	.word	0x08002347
 8002464:	08002377 	.word	0x08002377

08002468 <SN54HC595_init>:

void SN54HC595_init() {
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
	SN54HC595_init_obj(&shift_dev);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <SN54HC595_init+0x10>)
 800246e:	f7ff ff9b 	bl	80023a8 <SN54HC595_init_obj>
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000000 	.word	0x20000000

0800247c <statesBlinkNixies>:
#include "buttons.h"

/*
 * If the seconds of the RTC are even Nixies should be disabled
 */
void statesBlinkNixies(void) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	// Read seconds from RTC
	RTC_dev_get_time();
 8002482:	f7ff fab7 	bl	80019f4 <RTC_dev_get_time>
	// Read RTC seconds
	unsigned int seconds = RTC_dev_time_get_sec();
 8002486:	f7ff fa63 	bl	8001950 <RTC_dev_time_get_sec>
 800248a:	4603      	mov	r3, r0
 800248c:	607b      	str	r3, [r7, #4]

	// Set Nixie enable accordingly
	if (seconds % 2)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <statesBlinkNixies+0x22>
		nixieEnableAll();
 8002498:	f7ff f910 	bl	80016bc <nixieEnableAll>
	else
		nixieDisableAll();
}
 800249c:	e001      	b.n	80024a2 <statesBlinkNixies+0x26>
		nixieDisableAll();
 800249e:	f7ff f922 	bl	80016e6 <nixieDisableAll>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <statesBlinkingInit>:

/*
 * Allocate a temporary variable to store hours/mins when setting time
 */
void* statesBlinkingInit(void *data) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	return calloc(1, sizeof(unsigned char));
 80024b2:	2101      	movs	r1, #1
 80024b4:	2001      	movs	r0, #1
 80024b6:	f005 fa29 	bl	800790c <calloc>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <statesExitFreeData>:

/*
 * Free data
 */
void statesExitFreeData(void *data) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	free(data);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f005 fbcb 	bl	8007c68 <free>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <statesSettingDigit>:

void statesSettingDigit(unsigned char nixie_index, void *data,
		unsigned char mod, unsigned char next_state) {
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	4611      	mov	r1, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	460b      	mov	r3, r1
 80024ec:	71bb      	strb	r3, [r7, #6]
 80024ee:	4613      	mov	r3, r2
 80024f0:	717b      	strb	r3, [r7, #5]
	// Blink Nixies
	statesBlinkNixies();
 80024f2:	f7ff ffc3 	bl	800247c <statesBlinkNixies>

	// Buttons pushes
	unsigned int buttons = buttonsGet();
 80024f6:	f7fe f8c9 	bl	800068c <buttonsGet>
 80024fa:	4603      	mov	r3, r0
 80024fc:	60fb      	str	r3, [r7, #12]
	if (buttons & BUTTON_MASK_LEFT) {
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <statesSettingDigit+0x3c>
		(*(unsigned char*) data)++;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e018      	b.n	8002548 <statesSettingDigit+0x6e>
	} else if (buttons & BUTTON_MASK_CENTER) {
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00a      	beq.n	8002536 <statesSettingDigit+0x5c>
		if (*(unsigned char*) data > 1)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d90f      	bls.n	8002548 <statesSettingDigit+0x6e>
			(*(unsigned char*) data)--;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	701a      	strb	r2, [r3, #0]
 8002534:	e008      	b.n	8002548 <statesSettingDigit+0x6e>
	} else if (buttons & BUTTON_MASK_RIGHT) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <statesSettingDigit+0x6e>
		smSetStates(next_state);
 8002540:	797b      	ldrb	r3, [r7, #5]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd5e 	bl	8002004 <smSetStates>
	}

	// Wrap numbers if needed
	*(unsigned char*) data %= mod;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	79ba      	ldrb	r2, [r7, #6]
 800254e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002552:	fb01 f202 	mul.w	r2, r1, r2
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	b2da      	uxtb	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	701a      	strb	r2, [r3, #0]

	// Set value to Nixies
	nixieSetDoubleDigits(*(unsigned char*) data, nixie_index);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f8ea 	bl	8001740 <nixieSetDoubleDigits>
}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <statesHoursBlinkingRun>:

/*
 * State should blink hours while showing tmp value stored in data
 */
void statesHoursBlinkingRun(void *data) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	statesSettingDigit(2, data, 24, STATE_MINUTES_BLINKING);
 800257c:	2302      	movs	r3, #2
 800257e:	2218      	movs	r2, #24
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	2002      	movs	r0, #2
 8002584:	f7ff ffa9 	bl	80024da <statesSettingDigit>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <statesMinutesBlinkingRun>:
}

/*
 * State should blink minutes while showing tmp value stored in data
 */
void statesMinutesBlinkingRun(void *data) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	statesSettingDigit(0, data, 60, STATE_SHOWING_TIME);
 8002598:	2303      	movs	r3, #3
 800259a:	223c      	movs	r2, #60	; 0x3c
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	2000      	movs	r0, #0
 80025a0:	f7ff ff9b 	bl	80024da <statesSettingDigit>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <statesShowTimeInit>:
};

/*
 * Create required data
 */
void* statesShowTimeInit(void *data) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	return calloc(1, sizeof(struct time));
 80025b4:	2102      	movs	r1, #2
 80025b6:	2001      	movs	r0, #1
 80025b8:	f005 f9a8 	bl	800790c <calloc>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <statesShowTimeEnter>:

void statesShowTimeEnter(void *data) {
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b082      	sub	sp, #8
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	nixieEnableAll();
 80025ce:	f7ff f875 	bl	80016bc <nixieEnableAll>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <statesShowTimeRun>:

/*
 * Read time from RTC and show on Nixies
 */
void statesShowTimeRun(void *data) {
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
	// Read time from RTC
	RTC_dev_get_time();
 80025e2:	f7ff fa07 	bl	80019f4 <RTC_dev_get_time>

	// Show time on Nixies
	nixieSetDoubleDigits(RTC_dev_time_get_hour(), 2);
 80025e6:	f7ff f99f 	bl	8001928 <RTC_dev_time_get_hour>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f8a6 	bl	8001740 <nixieSetDoubleDigits>
	nixieSetDoubleDigits(RTC_dev_time_get_min(), 0);
 80025f4:	f7ff f9a2 	bl	800193c <RTC_dev_time_get_min>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff f89f 	bl	8001740 <nixieSetDoubleDigits>

	//Output to Nixies through shift registers
	SN54HC595_out_int(nixieCompileOutput());
 8002602:	f7ff f8d1 	bl	80017a8 <nixieCompileOutput>
 8002606:	4603      	mov	r3, r0
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fd63 	bl	80020d4 <SN54HC595_out_int>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <statesInit>:

unsigned int statesInit(void) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af04      	add	r7, sp, #16
	smAddState(STATE_HOURS_BLINKING, "Hours blinking", statesBlinkingInit,
 800261e:	2300      	movs	r3, #0
 8002620:	9302      	str	r3, [sp, #8]
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <statesInit+0x58>)
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <statesInit+0x5c>)
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	4a12      	ldr	r2, [pc, #72]	; (8002678 <statesInit+0x60>)
 800262e:	4913      	ldr	r1, [pc, #76]	; (800267c <statesInit+0x64>)
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fbf9 	bl	8001e28 <smAddState>
	NULL, statesHoursBlinkingRun, statesExitFreeData, NULL);
	smAddState(STATE_MINUTES_BLINKING, "Minutes blinking", statesBlinkingInit,
 8002636:	2300      	movs	r3, #0
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <statesInit+0x58>)
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	4b10      	ldr	r3, [pc, #64]	; (8002680 <statesInit+0x68>)
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	4a0c      	ldr	r2, [pc, #48]	; (8002678 <statesInit+0x60>)
 8002646:	490f      	ldr	r1, [pc, #60]	; (8002684 <statesInit+0x6c>)
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fbed 	bl	8001e28 <smAddState>
	NULL, statesMinutesBlinkingRun, statesExitFreeData, NULL);
	smAddState(STATE_SHOWING_TIME, "Showing time", statesShowTimeInit,
 800264e:	2300      	movs	r3, #0
 8002650:	9302      	str	r3, [sp, #8]
 8002652:	2300      	movs	r3, #0
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <statesInit+0x70>)
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <statesInit+0x74>)
 800265c:	4a0c      	ldr	r2, [pc, #48]	; (8002690 <statesInit+0x78>)
 800265e:	490d      	ldr	r1, [pc, #52]	; (8002694 <statesInit+0x7c>)
 8002660:	2003      	movs	r0, #3
 8002662:	f7ff fbe1 	bl	8001e28 <smAddState>
			statesShowTimeEnter, statesShowTimeRun, NULL, NULL);

	return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	080024c5 	.word	0x080024c5
 8002674:	08002575 	.word	0x08002575
 8002678:	080024ab 	.word	0x080024ab
 800267c:	0800854c 	.word	0x0800854c
 8002680:	08002591 	.word	0x08002591
 8002684:	0800855c 	.word	0x0800855c
 8002688:	080025db 	.word	0x080025db
 800268c:	080025c7 	.word	0x080025c7
 8002690:	080025ad 	.word	0x080025ad
 8002694:	08008570 	.word	0x08008570

08002698 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <HAL_MspInit+0x68>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_MspInit+0x68>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6193      	str	r3, [r2, #24]
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <HAL_MspInit+0x68>)
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <HAL_MspInit+0x68>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_MspInit+0x68>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_MspInit+0x68>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	607b      	str	r3, [r7, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ce:	2200      	movs	r2, #0
 80026d0:	210f      	movs	r1, #15
 80026d2:	f06f 0001 	mvn.w	r0, #1
 80026d6:	f000 fac8 	bl	8002c6a <HAL_NVIC_SetPriority>

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_MspInit+0x6c>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_MspInit+0x6c>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000
 8002704:	40010000 	.word	0x40010000

08002708 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
	if (hi2c->Instance == I2C2) {
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_I2C_MspInit+0x74>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d124      	bne.n	8002772 <HAL_I2C_MspInit+0x6a>
		/* USER CODE BEGIN I2C2_MspInit 0 */

		/* USER CODE END I2C2_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	6193      	str	r3, [r2, #24]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
		/**I2C2 GPIO Configuration
		 PB10     ------> I2C2_SCL
		 PB11     ------> I2C2_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8002740:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002744:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002746:	2312      	movs	r3, #18
 8002748:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800274a:	2303      	movs	r3, #3
 800274c:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 0310 	add.w	r3, r7, #16
 8002752:	4619      	mov	r1, r3
 8002754:	480b      	ldr	r0, [pc, #44]	; (8002784 <HAL_I2C_MspInit+0x7c>)
 8002756:	f000 fab3 	bl	8002cc0 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C2_CLK_ENABLE();
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_I2C_MspInit+0x78>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_I2C_MspInit+0x78>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C2_MspInit 1 */

		/* USER CODE END I2C2_MspInit 1 */
	}

}
 8002772:	bf00      	nop
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40005800 	.word	0x40005800
 8002780:	40021000 	.word	0x40021000
 8002784:	40010c00 	.word	0x40010c00

08002788 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	RCC_ClkInitTypeDef clkconfig;
	uint32_t uwTimclock = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t uwPrescalerValue = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t pFLatency;
	/*Configure the TIM4 IRQ priority */
	HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	201e      	movs	r0, #30
 800279e:	f000 fa64 	bl	8002c6a <HAL_NVIC_SetPriority>

	/* Enable the TIM4 global Interrupt */
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027a2:	201e      	movs	r0, #30
 80027a4:	f000 fa7d 	bl	8002ca2 <HAL_NVIC_EnableIRQ>

	/* Enable TIM4 clock */
	__HAL_RCC_TIM4_CLK_ENABLE();
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_InitTick+0xa0>)
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_InitTick+0xa0>)
 80027ae:	f043 0304 	orr.w	r3, r3, #4
 80027b2:	61d3      	str	r3, [r2, #28]
 80027b4:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <HAL_InitTick+0xa0>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027c0:	f107 0210 	add.w	r2, r7, #16
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 f844 	bl	8004858 <HAL_RCC_GetClockConfig>

	/* Compute TIM4 clock */
	uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 80027d0:	f002 f82e 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80027d4:	4603      	mov	r3, r0
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_InitTick+0xa4>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0c9b      	lsrs	r3, r3, #18
 80027e4:	3b01      	subs	r3, #1
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialize TIM4 */
	htim4.Instance = TIM4;
 80027e8:	4b11      	ldr	r3, [pc, #68]	; (8002830 <HAL_InitTick+0xa8>)
 80027ea:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_InitTick+0xac>)
 80027ec:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim4.Init.Period = (1000000U / 1000U) - 1U;
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_InitTick+0xa8>)
 80027f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027f4:	60da      	str	r2, [r3, #12]
	htim4.Init.Prescaler = uwPrescalerValue;
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_InitTick+0xa8>)
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	6053      	str	r3, [r2, #4]
	htim4.Init.ClockDivision = 0;
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_InitTick+0xa8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_InitTick+0xa8>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]

	if (HAL_TIM_Base_Init(&htim4) == HAL_OK) {
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <HAL_InitTick+0xa8>)
 800280a:	f002 f873 	bl	80048f4 <HAL_TIM_Base_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d104      	bne.n	800281e <HAL_InitTick+0x96>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim4);
 8002814:	4806      	ldr	r0, [pc, #24]	; (8002830 <HAL_InitTick+0xa8>)
 8002816:	f002 f8c5 	bl	80049a4 <HAL_TIM_Base_Start_IT>
 800281a:	4603      	mov	r3, r0
 800281c:	e000      	b.n	8002820 <HAL_InitTick+0x98>
	}

	/* Return function status */
	return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
}
 8002820:	4618      	mov	r0, r3
 8002822:	3730      	adds	r7, #48	; 0x30
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021000 	.word	0x40021000
 800282c:	431bde83 	.word	0x431bde83
 8002830:	200001e4 	.word	0x200001e4
 8002834:	40000800 	.word	0x40000800

08002838 <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800283c:	e7fe      	b.n	800283c <NMI_Handler+0x4>

0800283e <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8002842:	e7fe      	b.n	8002842 <HardFault_Handler+0x4>

08002844 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002848:	e7fe      	b.n	8002848 <MemManage_Handler+0x4>

0800284a <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800284e:	e7fe      	b.n	800284e <BusFault_Handler+0x4>

08002850 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002854:	e7fe      	b.n	8002854 <UsageFault_Handler+0x4>

08002856 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <TIM4_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <TIM4_IRQHandler+0x10>)
 800286a:	f002 f8ed 	bl	8004a48 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200001e4 	.word	0x200001e4

08002878 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800287c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002880:	f000 fbea 	bl	8003058 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}

08002888 <_kill>:

int _getpid(void) {
	return 1;
}

int _kill(int pid, int sig) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002892:	f005 f843 	bl	800791c <__errno>
 8002896:	4603      	mov	r3, r0
 8002898:	2216      	movs	r2, #22
 800289a:	601a      	str	r2, [r3, #0]
	return -1;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <_exit>:

void _exit(int status) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ffe7 	bl	8002888 <_kill>
	while (1) {
 80028ba:	e7fe      	b.n	80028ba <_exit+0x12>

080028bc <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	e00a      	b.n	80028e4 <_read+0x28>
		*ptr++ = __io_getchar();
 80028ce:	f3af 8000 	nop.w
 80028d2:	4601      	mov	r1, r0
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	60ba      	str	r2, [r7, #8]
 80028da:	b2ca      	uxtb	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	dbf0      	blt.n	80028ce <_read+0x12>
	}

	return len;
 80028ec:	687b      	ldr	r3, [r7, #4]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	e009      	b.n	800291c <_write+0x26>
		__io_putchar(*ptr++);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	60ba      	str	r2, [r7, #8]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	dbf1      	blt.n	8002908 <_write+0x12>
	}
	return len;
 8002924:	687b      	ldr	r3, [r7, #4]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <_close>:

int _close(int file) {
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
	return -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <_fstat>:

int _fstat(int file, struct stat *st) {
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002954:	605a      	str	r2, [r3, #4]
	return 0;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <_isatty>:

int _isatty(int file) {
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
	return 1;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
	return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	bc80      	pop	{r7}
 800298c:	4770      	bx	lr
	...

08002990 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
		errno = ENOMEM;
 80029c0:	f004 ffac 	bl	800791c <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20005000 	.word	0x20005000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	2000022c 	.word	0x2000022c
 80029f8:	20001c50 	.word	0x20001c50

080029fc <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a0a:	490d      	ldr	r1, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a20:	4c0a      	ldr	r4, [pc, #40]	; (8002a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a2e:	f7ff ffe5 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a32:	f005 f8f1 	bl	8007c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a36:	f7fe fca9 	bl	800138c <main>
  bx lr
 8002a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a40:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8002a44:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 8002a48:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8002a4c:	20001c4c 	.word	0x20001c4c

08002a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <ADC1_2_IRQHandler>
	...

08002a54 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

	/* Prefetch buffer is not available on value line devices */
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_Init+0x28>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_Init+0x28>)
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f000 f8f5 	bl	8002c54 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8002a6a:	200f      	movs	r0, #15
 8002a6c:	f7ff fe8c 	bl	8002788 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8002a70:	f7ff fe12 	bl	8002698 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000

08002a80 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_IncTick+0x1c>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	2000005c 	.word	0x2000005c
 8002aa0:	20000230 	.word	0x20000230

08002aa4 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note  This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
	return uwTick;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_GetTick+0x10>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000230 	.word	0x20000230

08002ab8 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_GetTick>
 8002ac4:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ad0:	d005      	beq.n	8002ade <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <HAL_Delay+0x44>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8002ade:	bf00      	nop
 8002ae0:	f7ff ffe0 	bl	8002aa4 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f7      	bhi.n	8002ae0 <HAL_Delay+0x28>
	}
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000005c 	.word	0x2000005c

08002b00 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b30:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x44>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
	}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc80      	pop	{r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__NVIC_GetPriorityGrouping+0x18>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0a1b      	lsrs	r3, r3, #8
 8002b52:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8002b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db0b      	blt.n	8002b8e <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <__NVIC_EnableIRQ+0x34>)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	095b      	lsrs	r3, r3, #5
 8002b84:	2001      	movs	r0, #1
 8002b86:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100

08002b9c <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6039      	str	r1, [r7, #0]
 8002ba6:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	db0a      	blt.n	8002bc6 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	490c      	ldr	r1, [pc, #48]	; (8002be8 <__NVIC_SetPriority+0x4c>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	0112      	lsls	r2, r2, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8002bc4:	e00a      	b.n	8002bdc <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	4908      	ldr	r1, [pc, #32]	; (8002bec <__NVIC_SetPriority+0x50>)
 8002bcc:	79fb      	ldrb	r3, [r7, #7]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	3b04      	subs	r3, #4
 8002bd4:	0112      	lsls	r2, r2, #4
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	440b      	add	r3, r1
 8002bda:	761a      	strb	r2, [r3, #24]
	}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100
 8002bec:	e000ed00 	.word	0xe000ed00

08002bf0 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	bf28      	it	cs
 8002c0e:	2304      	movcs	r3, #4
 8002c10:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8002c16:	2b06      	cmp	r3, #6
 8002c18:	d902      	bls.n	8002c20 <NVIC_EncodePriority+0x30>
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3b03      	subs	r3, #3
 8002c1e:	e000      	b.n	8002c22 <NVIC_EncodePriority+0x32>
 8002c20:	2300      	movs	r3, #0
		SubPriorityBits =
 8002c22:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8002c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8002c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	43d9      	mvns	r1, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	400b      	ands	r3, r1
 8002c48:	4313      	orrs	r3, r2
	}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff ff4f 	bl	8002b00 <__NVIC_SetPriorityGrouping>
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b086      	sub	sp, #24
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4603      	mov	r3, r0
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002c7c:	f7ff ff64 	bl	8002b48 <__NVIC_GetPriorityGrouping>
 8002c80:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	68b9      	ldr	r1, [r7, #8]
 8002c86:	6978      	ldr	r0, [r7, #20]
 8002c88:	f7ff ffb2 	bl	8002bf0 <NVIC_EncodePriority>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff81 	bl	8002b9c <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	4603      	mov	r3, r0
 8002caa:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8002cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff57 	bl	8002b64 <__NVIC_EnableIRQ>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b08b      	sub	sp, #44	; 0x2c
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8002cd2:	e169      	b.n	8002fa8 <HAL_GPIO_Init+0x2e8>
		/* Get the IO position */
		ioposition = (0x01uL << position);
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition) {
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	f040 8158 	bne.w	8002fa2 <HAL_GPIO_Init+0x2e2>
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode) {
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a9a      	ldr	r2, [pc, #616]	; (8002f60 <HAL_GPIO_Init+0x2a0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d05e      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
 8002cfc:	4a98      	ldr	r2, [pc, #608]	; (8002f60 <HAL_GPIO_Init+0x2a0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d875      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d02:	4a98      	ldr	r2, [pc, #608]	; (8002f64 <HAL_GPIO_Init+0x2a4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d058      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
 8002d08:	4a96      	ldr	r2, [pc, #600]	; (8002f64 <HAL_GPIO_Init+0x2a4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d86f      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d0e:	4a96      	ldr	r2, [pc, #600]	; (8002f68 <HAL_GPIO_Init+0x2a8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d052      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
 8002d14:	4a94      	ldr	r2, [pc, #592]	; (8002f68 <HAL_GPIO_Init+0x2a8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d869      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d1a:	4a94      	ldr	r2, [pc, #592]	; (8002f6c <HAL_GPIO_Init+0x2ac>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d04c      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
 8002d20:	4a92      	ldr	r2, [pc, #584]	; (8002f6c <HAL_GPIO_Init+0x2ac>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d863      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d26:	4a92      	ldr	r2, [pc, #584]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d046      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
 8002d2c:	4a90      	ldr	r2, [pc, #576]	; (8002f70 <HAL_GPIO_Init+0x2b0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d85d      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d32:	2b12      	cmp	r3, #18
 8002d34:	d82a      	bhi.n	8002d8c <HAL_GPIO_Init+0xcc>
 8002d36:	2b12      	cmp	r3, #18
 8002d38:	d859      	bhi.n	8002dee <HAL_GPIO_Init+0x12e>
 8002d3a:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <HAL_GPIO_Init+0x80>)
 8002d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d40:	08002dbb 	.word	0x08002dbb
 8002d44:	08002d95 	.word	0x08002d95
 8002d48:	08002da7 	.word	0x08002da7
 8002d4c:	08002de9 	.word	0x08002de9
 8002d50:	08002def 	.word	0x08002def
 8002d54:	08002def 	.word	0x08002def
 8002d58:	08002def 	.word	0x08002def
 8002d5c:	08002def 	.word	0x08002def
 8002d60:	08002def 	.word	0x08002def
 8002d64:	08002def 	.word	0x08002def
 8002d68:	08002def 	.word	0x08002def
 8002d6c:	08002def 	.word	0x08002def
 8002d70:	08002def 	.word	0x08002def
 8002d74:	08002def 	.word	0x08002def
 8002d78:	08002def 	.word	0x08002def
 8002d7c:	08002def 	.word	0x08002def
 8002d80:	08002def 	.word	0x08002def
 8002d84:	08002d9d 	.word	0x08002d9d
 8002d88:	08002db1 	.word	0x08002db1
 8002d8c:	4a79      	ldr	r2, [pc, #484]	; (8002f74 <HAL_GPIO_Init+0x2b4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_GPIO_Init+0xfa>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
				break;

				/* Parameters are checked with assert_param */
			default:
				break;
 8002d92:	e02c      	b.n	8002dee <HAL_GPIO_Init+0x12e>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	623b      	str	r3, [r7, #32]
				break;
 8002d9a:	e029      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	3304      	adds	r3, #4
 8002da2:	623b      	str	r3, [r7, #32]
				break;
 8002da4:	e024      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	3308      	adds	r3, #8
 8002dac:	623b      	str	r3, [r7, #32]
				break;
 8002dae:	e01f      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	330c      	adds	r3, #12
 8002db6:	623b      	str	r3, [r7, #32]
				break;
 8002db8:	e01a      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				if (GPIO_Init->Pull == GPIO_NOPULL) {
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_GPIO_Init+0x108>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	623b      	str	r3, [r7, #32]
				break;
 8002dc6:	e013      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				} else if (GPIO_Init->Pull == GPIO_PULLUP) {
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d105      	bne.n	8002ddc <HAL_GPIO_Init+0x11c>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	623b      	str	r3, [r7, #32]
					GPIOx->BSRR = ioposition;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	611a      	str	r2, [r3, #16]
				break;
 8002dda:	e009      	b.n	8002df0 <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ddc:	2308      	movs	r3, #8
 8002dde:	623b      	str	r3, [r7, #32]
					GPIOx->BRR = ioposition;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	615a      	str	r2, [r3, #20]
				break;
 8002de6:	e003      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002de8:	2300      	movs	r3, #0
 8002dea:	623b      	str	r3, [r7, #32]
				break;
 8002dec:	e000      	b.n	8002df0 <HAL_GPIO_Init+0x130>
				break;
 8002dee:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2bff      	cmp	r3, #255	; 0xff
 8002df4:	d801      	bhi.n	8002dfa <HAL_GPIO_Init+0x13a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	e001      	b.n	8002dfe <HAL_GPIO_Init+0x13e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3304      	adds	r3, #4
			configregister =
 8002dfe:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	2bff      	cmp	r3, #255	; 0xff
 8002e04:	d802      	bhi.n	8002e0c <HAL_GPIO_Init+0x14c>
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	e002      	b.n	8002e12 <HAL_GPIO_Init+0x152>
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	3b08      	subs	r3, #8
 8002e10:	009b      	lsls	r3, r3, #2
			registeroffset =
 8002e12:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	210f      	movs	r1, #15
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	43db      	mvns	r3, r3
 8002e22:	401a      	ands	r2, r3
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80b1 	beq.w	8002fa2 <HAL_GPIO_Init+0x2e2>
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <HAL_GPIO_Init+0x2b8>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	4a4c      	ldr	r2, [pc, #304]	; (8002f78 <HAL_GPIO_Init+0x2b8>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	6193      	str	r3, [r2, #24]
 8002e4c:	4b4a      	ldr	r3, [pc, #296]	; (8002f78 <HAL_GPIO_Init+0x2b8>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_GPIO_Init+0x2bc>)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e64:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <HAL_GPIO_Init+0x2c0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_GPIO_Init+0x1ec>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a3f      	ldr	r2, [pc, #252]	; (8002f84 <HAL_GPIO_Init+0x2c4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_GPIO_Init+0x1e8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a3e      	ldr	r2, [pc, #248]	; (8002f88 <HAL_GPIO_Init+0x2c8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <HAL_GPIO_Init+0x1e4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <HAL_GPIO_Init+0x2cc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_GPIO_Init+0x1e0>
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e006      	b.n	8002eae <HAL_GPIO_Init+0x1ee>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	e004      	b.n	8002eae <HAL_GPIO_Init+0x1ee>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e002      	b.n	8002eae <HAL_GPIO_Init+0x1ee>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_GPIO_Init+0x1ee>
 8002eac:	2300      	movs	r3, #0
 8002eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb0:	f002 0203 	and.w	r2, r2, #3
 8002eb4:	0092      	lsls	r2, r2, #2
 8002eb6:	4093      	lsls	r3, r2
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 8002ebe:	492f      	ldr	r1, [pc, #188]	; (8002f7c <HAL_GPIO_Init+0x2bc>)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_GPIO_Init+0x226>
					SET_BIT(EXTI->IMR, iocurrent);
 8002ed8:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	492c      	ldr	r1, [pc, #176]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x234>
				} else {
					CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	4928      	ldr	r1, [pc, #160]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_GPIO_Init+0x24e>
					SET_BIT(EXTI->EMR, iocurrent);
 8002f00:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4922      	ldr	r1, [pc, #136]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x25c>
				} else {
					CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f0e:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	491e      	ldr	r1, [pc, #120]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
				}

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <HAL_GPIO_Init+0x276>
					SET_BIT(EXTI->RTSR, iocurrent);
 8002f28:	4b19      	ldr	r3, [pc, #100]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	4918      	ldr	r1, [pc, #96]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
 8002f34:	e006      	b.n	8002f44 <HAL_GPIO_Init+0x284>
				} else {
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f36:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	4914      	ldr	r1, [pc, #80]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d021      	beq.n	8002f94 <HAL_GPIO_Init+0x2d4>
					SET_BIT(EXTI->FTSR, iocurrent);
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	490e      	ldr	r1, [pc, #56]	; (8002f90 <HAL_GPIO_Init+0x2d0>)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
 8002f5c:	e021      	b.n	8002fa2 <HAL_GPIO_Init+0x2e2>
 8002f5e:	bf00      	nop
 8002f60:	10320000 	.word	0x10320000
 8002f64:	10310000 	.word	0x10310000
 8002f68:	10220000 	.word	0x10220000
 8002f6c:	10210000 	.word	0x10210000
 8002f70:	10120000 	.word	0x10120000
 8002f74:	10110000 	.word	0x10110000
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40010800 	.word	0x40010800
 8002f84:	40010c00 	.word	0x40010c00
 8002f88:	40011000 	.word	0x40011000
 8002f8c:	40011400 	.word	0x40011400
 8002f90:	40010400 	.word	0x40010400
				} else {
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f94:	4b0b      	ldr	r3, [pc, #44]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4909      	ldr	r1, [pc, #36]	; (8002fc4 <HAL_GPIO_Init+0x304>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
				}
			}
		}

		position++;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f47f ae8e 	bne.w	8002cd4 <HAL_GPIO_Init+0x14>
	}
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	372c      	adds	r7, #44	; 0x2c
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <HAL_GPIO_ReadPin>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
 8002fe4:	e001      	b.n	8002fea <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
 8003002:	4613      	mov	r3, r2
 8003004:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8003006:	787b      	ldrb	r3, [r7, #1]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800300c:	887a      	ldrh	r2, [r7, #2]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 8003012:	e003      	b.n	800301c <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	041a      	lsls	r2, r3, #16
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <HAL_GPIO_TogglePin>:
 * @brief  Toggles the specified GPIO pin
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Ouput Data Register value */
	odr = GPIOx->ODR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003038:	887a      	ldrh	r2, [r7, #2]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4013      	ands	r3, r2
 800303e:	041a      	lsls	r2, r3, #16
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	43d9      	mvns	r1, r3
 8003044:	887b      	ldrh	r3, [r7, #2]
 8003046:	400b      	ands	r3, r1
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	4013      	ands	r3, r2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd fb54 	bl	8000724 <HAL_GPIO_EXTI_Callback>
	}
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e12b      	b.n	80032f2 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d106      	bne.n	80030b4 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fb2a 	bl	8002708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0201 	bic.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ea:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 80030ec:	f001 fba0 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80030f0:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a81      	ldr	r2, [pc, #516]	; (80032fc <HAL_I2C_Init+0x274>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d807      	bhi.n	800310c <HAL_I2C_Init+0x84>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4a80      	ldr	r2, [pc, #512]	; (8003300 <HAL_I2C_Init+0x278>)
 8003100:	4293      	cmp	r3, r2
 8003102:	bf94      	ite	ls
 8003104:	2301      	movls	r3, #1
 8003106:	2300      	movhi	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e006      	b.n	800311a <HAL_I2C_Init+0x92>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	4a7d      	ldr	r2, [pc, #500]	; (8003304 <HAL_I2C_Init+0x27c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	2301      	movls	r3, #1
 8003116:	2300      	movhi	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0e7      	b.n	80032f2 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a78      	ldr	r2, [pc, #480]	; (8003308 <HAL_I2C_Init+0x280>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0c9b      	lsrs	r3, r3, #18
 800312c:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a6a      	ldr	r2, [pc, #424]	; (80032fc <HAL_I2C_Init+0x274>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d802      	bhi.n	800315c <HAL_I2C_Init+0xd4>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3301      	adds	r3, #1
 800315a:	e009      	b.n	8003170 <HAL_I2C_Init+0xe8>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	4a69      	ldr	r2, [pc, #420]	; (800330c <HAL_I2C_Init+0x284>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	099b      	lsrs	r3, r3, #6
 800316e:	3301      	adds	r3, #1
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	430b      	orrs	r3, r1
 8003176:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003182:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	495c      	ldr	r1, [pc, #368]	; (80032fc <HAL_I2C_Init+0x274>)
 800318c:	428b      	cmp	r3, r1
 800318e:	d819      	bhi.n	80031c4 <HAL_I2C_Init+0x13c>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1e59      	subs	r1, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fbb1 f3f3 	udiv	r3, r1, r3
 800319e:	1c59      	adds	r1, r3, #1
 80031a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031a4:	400b      	ands	r3, r1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_I2C_Init+0x138>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e59      	subs	r1, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031be:	e051      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e04f      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d111      	bne.n	80031f0 <HAL_I2C_Init+0x168>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	e012      	b.n	8003216 <HAL_I2C_Init+0x18e>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e58      	subs	r0, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	0099      	lsls	r1, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf0c      	ite	eq
 8003210:	2301      	moveq	r3, #1
 8003212:	2300      	movne	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_I2C_Init+0x196>
 800321a:	2301      	movs	r3, #1
 800321c:	e022      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10e      	bne.n	8003244 <HAL_I2C_Init+0x1bc>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e58      	subs	r0, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	460b      	mov	r3, r1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	440b      	add	r3, r1
 8003234:	fbb0 f3f3 	udiv	r3, r0, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003242:	e00f      	b.n	8003264 <HAL_I2C_Init+0x1dc>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1e58      	subs	r0, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	0099      	lsls	r1, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	fbb0 f3f3 	udiv	r3, r0, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003260:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	6809      	ldr	r1, [r1, #0]
 8003268:	4313      	orrs	r3, r2
 800326a:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6911      	ldr	r1, [r2, #16]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68d2      	ldr	r2, [r2, #12]
 800329e:	4311      	orrs	r1, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	431a      	orrs	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	000186a0 	.word	0x000186a0
 8003300:	001e847f 	.word	0x001e847f
 8003304:	003d08ff 	.word	0x003d08ff
 8003308:	431bde83 	.word	0x431bde83
 800330c:	10624dd3 	.word	0x10624dd3

08003310 <HAL_I2C_Mem_Write>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	817b      	strh	r3, [r7, #10]
 8003322:	460b      	mov	r3, r1
 8003324:	813b      	strh	r3, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
	/* Init tickstart for timeout management*/
	uint32_t tickstart = HAL_GetTick();
 800332a:	f7ff fbbb 	bl	8002aa4 <HAL_GetTick>
 800332e:	6178      	str	r0, [r7, #20]

	/* Check the parameters */
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b20      	cmp	r3, #32
 800333a:	f040 80d9 	bne.w	80034f0 <HAL_I2C_Mem_Write+0x1e0>
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2319      	movs	r3, #25
 8003344:	2201      	movs	r2, #1
 8003346:	496d      	ldr	r1, [pc, #436]	; (80034fc <HAL_I2C_Mem_Write+0x1ec>)
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 fcc1 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <HAL_I2C_Mem_Write+0x48>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
			return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
 8003356:	e0cc      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2C_Mem_Write+0x56>
 8003362:	2302      	movs	r3, #2
 8003364:	e0c5      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d007      	beq.n	800338c <HAL_I2C_Mem_Write+0x7c>
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800339a:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY_TX;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2221      	movs	r2, #33	; 0x21
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2240      	movs	r2, #64	; 0x40
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	641a      	str	r2, [r3, #64]	; 0x40

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferSize = hi2c->XferCount;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4a4d      	ldr	r2, [pc, #308]	; (8003500 <HAL_I2C_Mem_Write+0x1f0>)
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Send Slave Address and Memory Address */
		if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize,
 80033ce:	88f8      	ldrh	r0, [r7, #6]
 80033d0:	893a      	ldrh	r2, [r7, #8]
 80033d2:	8979      	ldrh	r1, [r7, #10]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4603      	mov	r3, r0
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 faf8 	bl	80039d4 <I2C_RequestMemoryWrite>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d052      	beq.n	8003490 <HAL_I2C_Mem_Write+0x180>
				Timeout, tickstart) != HAL_OK) {
			return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e081      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
		}

		while (hi2c->XferSize > 0U) {
			/* Wait until TXE flag is set */
			if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart)
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fd42 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <HAL_I2C_Mem_Write+0x10a>
					!= HAL_OK) {
				if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	2b04      	cmp	r3, #4
 8003404:	d107      	bne.n	8003416 <HAL_I2C_Mem_Write+0x106>
					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]
				}
				return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06b      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
			}

			/* Write data to DR */
			hi2c->Instance->DR = *hi2c->pBuffPtr;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	611a      	str	r2, [r3, #16]

			/* Increment Buffer pointer */
			hi2c->pBuffPtr++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24

			/* Update counter */
			hi2c->XferSize--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	851a      	strh	r2, [r3, #40]	; 0x28
			hi2c->XferCount--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003440:	b29b      	uxth	r3, r3
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	855a      	strh	r2, [r3, #42]	; 0x2a

			if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d11b      	bne.n	8003490 <HAL_I2C_Mem_Write+0x180>
					&& (hi2c->XferSize != 0U)) {
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_I2C_Mem_Write+0x180>
				/* Write data to DR */
				hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

				/* Increment Buffer pointer */
				hi2c->pBuffPtr++;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

				/* Update counter */
				hi2c->XferSize--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
				hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1aa      	bne.n	80033ee <HAL_I2C_Mem_Write+0xde>
			}
		}

		/* Wait until BTF flag is set */
		if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK) {
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fd2e 	bl	8003efe <I2C_WaitOnBTFFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00d      	beq.n	80034c4 <HAL_I2C_Mem_Write+0x1b4>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d107      	bne.n	80034c0 <HAL_I2C_Mem_Write+0x1b0>
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034be:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e016      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
		}

		/* Generate Stop */
		SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d2:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2C_Mem_Write+0x1e2>
	} else {
		return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
	}
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	00100002 	.word	0x00100002
 8003500:	ffff0000 	.word	0xffff0000

08003504 <HAL_I2C_Mem_Read>:
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
		uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size,
		uint32_t Timeout) {
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	817b      	strh	r3, [r7, #10]
 8003516:	460b      	mov	r3, r1
 8003518:	813b      	strh	r3, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
	__IO uint32_t count = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]

	/* Init tickstart for timeout management*/
	uint32_t tickstart = HAL_GetTick();
 8003522:	f7ff fabf 	bl	8002aa4 <HAL_GetTick>
 8003526:	6278      	str	r0, [r7, #36]	; 0x24

	/* Check the parameters */
	assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

	if (hi2c->State == HAL_I2C_STATE_READY) {
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b20      	cmp	r3, #32
 8003532:	f040 8244 	bne.w	80039be <HAL_I2C_Mem_Read+0x4ba>
		/* Wait until BUSY flag is reset */
		if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET,
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	2319      	movs	r3, #25
 800353c:	2201      	movs	r2, #1
 800353e:	4982      	ldr	r1, [pc, #520]	; (8003748 <HAL_I2C_Mem_Read+0x244>)
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fbc5 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <HAL_I2C_Mem_Read+0x4c>
				I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK) {
			return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
 800354e:	e237      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
		}

		/* Process Locked */
		__HAL_LOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_I2C_Mem_Read+0x5a>
 800355a:	2302      	movs	r3, #2
 800355c:	e230      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Check if the I2C is already enabled */
		if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE) {
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d007      	beq.n	8003584 <HAL_I2C_Mem_Read+0x80>
			/* Enable I2C peripheral */
			__HAL_I2C_ENABLE(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
		}

		/* Disable Pos */
		CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003592:	601a      	str	r2, [r3, #0]

		hi2c->State = HAL_I2C_STATE_BUSY_RX;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2222      	movs	r2, #34	; 0x22
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_MEM;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2240      	movs	r2, #64	; 0x40
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40

		/* Prepare transfer parameters */
		hi2c->pBuffPtr = pData;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
		hi2c->XferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2c->XferSize = hi2c->XferCount;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a62      	ldr	r2, [pc, #392]	; (800374c <HAL_I2C_Mem_Read+0x248>)
 80035c4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Send Slave Address and Memory Address */
		if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize,
 80035c6:	88f8      	ldrh	r0, [r7, #6]
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	8979      	ldrh	r1, [r7, #10]
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	4603      	mov	r3, r0
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fa92 	bl	8003b00 <I2C_RequestMemoryRead>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Mem_Read+0xe2>
				Timeout, tickstart) != HAL_OK) {
			return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1ec      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
		}

		if (hi2c->XferSize == 0U) {
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d113      	bne.n	8003616 <HAL_I2C_Mem_Read+0x112>
			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	69fb      	ldr	r3, [r7, #28]

			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e1c0      	b.n	8003998 <HAL_I2C_Mem_Read+0x494>
		} else if (hi2c->XferSize == 1U) {
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	2b01      	cmp	r3, #1
 800361c:	d11e      	bne.n	800365c <HAL_I2C_Mem_Read+0x158>
			/* Disable Acknowledge */
			CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("cpsid i" : : : "memory");
 800362e:	b672      	cpsid	i
}
 8003630:	bf00      	nop
			/* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
			 software sequence must complete before the current byte end of transfer */
			__disable_irq();

			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	69bb      	ldr	r3, [r7, #24]

			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
	__ASM volatile ("cpsie i" : : : "memory");
 8003658:	b662      	cpsie	i
}
 800365a:	e035      	b.n	80036c8 <HAL_I2C_Mem_Read+0x1c4>

			/* Re-enable IRQs */
			__enable_irq();
		} else if (hi2c->XferSize == 2U) {
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003660:	2b02      	cmp	r3, #2
 8003662:	d11e      	bne.n	80036a2 <HAL_I2C_Mem_Read+0x19e>
			/* Enable Pos */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003672:	601a      	str	r2, [r3, #0]
	__ASM volatile ("cpsid i" : : : "memory");
 8003674:	b672      	cpsid	i
}
 8003676:	bf00      	nop
			/* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
			 software sequence must complete before the current byte end of transfer */
			__disable_irq();

			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	697b      	ldr	r3, [r7, #20]

			/* Disable Acknowledge */
			CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800369c:	601a      	str	r2, [r3, #0]
	__ASM volatile ("cpsie i" : : : "memory");
 800369e:	b662      	cpsie	i
}
 80036a0:	e012      	b.n	80036c8 <HAL_I2C_Mem_Read+0x1c4>

			/* Re-enable IRQs */
			__enable_irq();
		} else {
			/* Enable Acknowledge */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036b0:	601a      	str	r2, [r3, #0]
			/* Clear ADDR flag */
			__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	693b      	ldr	r3, [r7, #16]
		}

		while (hi2c->XferSize > 0U) {
 80036c8:	e166      	b.n	8003998 <HAL_I2C_Mem_Read+0x494>
			if (hi2c->XferSize <= 3U) {
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	f200 811f 	bhi.w	8003912 <HAL_I2C_Mem_Read+0x40e>
				/* One byte */
				if (hi2c->XferSize == 1U) {
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d123      	bne.n	8003724 <HAL_I2C_Mem_Read+0x220>
					/* Wait until RXNE flag is set */
					if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart)
 80036dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 fc4d 	bl	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x1ec>
							!= HAL_OK) {
						return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e167      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
					}

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003722:	e139      	b.n	8003998 <HAL_I2C_Mem_Read+0x494>
				}
				/* Two bytes */
				else if (hi2c->XferSize == 2U) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b02      	cmp	r3, #2
 800372a:	d152      	bne.n	80037d2 <HAL_I2C_Mem_Read+0x2ce>
					/* Wait until BTF flag is set */
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET,
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003732:	2200      	movs	r2, #0
 8003734:	4906      	ldr	r1, [pc, #24]	; (8003750 <HAL_I2C_Mem_Read+0x24c>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 faca 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <HAL_I2C_Mem_Read+0x250>
							Timeout, tickstart) != HAL_OK) {
						return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e13c      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
 8003746:	bf00      	nop
 8003748:	00100002 	.word	0x00100002
 800374c:	ffff0000 	.word	0xffff0000
 8003750:	00010004 	.word	0x00010004
	__ASM volatile ("cpsid i" : : : "memory");
 8003754:	b672      	cpsid	i
}
 8003756:	bf00      	nop
					/* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
					 software sequence must complete before the current byte end of transfer */
					__disable_irq();

					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003766:	601a      	str	r2, [r3, #0]

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
	__ASM volatile ("cpsie i" : : : "memory");
 800379a:	b662      	cpsie	i
}
 800379c:	bf00      	nop

					/* Re-enable IRQs */
					__enable_irq();

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d0:	e0e2      	b.n	8003998 <HAL_I2C_Mem_Read+0x494>
				}
				/* 3 Last bytes */
				else {
					/* Wait until BTF flag is set */
					if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET,
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2200      	movs	r2, #0
 80037da:	497b      	ldr	r1, [pc, #492]	; (80039c8 <HAL_I2C_Mem_Read+0x4c4>)
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 fa77 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x2e8>
							Timeout, tickstart) != HAL_OK) {
						return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0e9      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
					}

					/* Disable Acknowledge */
					CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037fa:	601a      	str	r2, [r3, #0]
	__ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
					/* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
					 software sequence must complete before the current byte end of transfer */
					__disable_irq();

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b01      	subs	r3, #1
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	855a      	strh	r2, [r3, #42]	; 0x2a

					/* Wait until BTF flag is set */
					count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003832:	4b66      	ldr	r3, [pc, #408]	; (80039cc <HAL_I2C_Mem_Read+0x4c8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	08db      	lsrs	r3, r3, #3
 8003838:	4a65      	ldr	r2, [pc, #404]	; (80039d0 <HAL_I2C_Mem_Read+0x4cc>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0a1a      	lsrs	r2, r3, #8
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	00da      	lsls	r2, r3, #3
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	623b      	str	r3, [r7, #32]
					do {
						count--;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	3b01      	subs	r3, #1
 8003850:	623b      	str	r3, [r7, #32]
						if (count == 0U) {
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d118      	bne.n	800388a <HAL_I2C_Mem_Read+0x386>
							hi2c->PreviousState = I2C_STATE_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
							hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
							hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
							hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
	__ASM volatile ("cpsie i" : : : "memory");
 800387a:	b662      	cpsie	i
}
 800387c:	bf00      	nop

							/* Re-enable IRQs */
							__enable_irq();

							/* Process Unlocked */
							__HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

							return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e09a      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
						}
					} while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d1d9      	bne.n	800384c <HAL_I2C_Mem_Read+0x348>

					/* Generate Stop */
					SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a6:	601a      	str	r2, [r3, #0]

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
	__ASM volatile ("cpsie i" : : : "memory");
 80038da:	b662      	cpsie	i
}
 80038dc:	bf00      	nop

					/* Re-enable IRQs */
					__enable_irq();

					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003910:	e042      	b.n	8003998 <HAL_I2C_Mem_Read+0x494>
				}
			} else {
				/* Wait until RXNE flag is set */
				if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart)
 8003912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fb32 	bl	8003f80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Mem_Read+0x422>
						!= HAL_OK) {
					return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e04c      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
				}

				/* Read data from DR */
				*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]

				/* Increment Buffer pointer */
				hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

				/* Update counter */
				hi2c->XferSize--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
				hi2c->XferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	855a      	strh	r2, [r3, #42]	; 0x2a

				if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) {
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b04      	cmp	r3, #4
 8003964:	d118      	bne.n	8003998 <HAL_I2C_Mem_Read+0x494>
					/* Read data from DR */
					*hi2c->pBuffPtr = (uint8_t) hi2c->Instance->DR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	701a      	strb	r2, [r3, #0]

					/* Increment Buffer pointer */
					hi2c->pBuffPtr++;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	625a      	str	r2, [r3, #36]	; 0x24

					/* Update counter */
					hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28
					hi2c->XferCount--;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	3b01      	subs	r3, #1
 8003992:	b29a      	uxth	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	855a      	strh	r2, [r3, #42]	; 0x2a
		while (hi2c->XferSize > 0U) {
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399c:	2b00      	cmp	r3, #0
 800399e:	f47f ae94 	bne.w	80036ca <HAL_I2C_Mem_Read+0x1c6>
				}
			}
		}

		hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_I2C_Mem_Read+0x4bc>
	} else {
		return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
	}
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3728      	adds	r7, #40	; 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	00010004 	.word	0x00010004
 80039cc:	20000054 	.word	0x20000054
 80039d0:	14f8b589 	.word	0x14f8b589

080039d4 <I2C_RequestMemoryWrite>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint32_t Timeout, uint32_t Tickstart) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	817b      	strh	r3, [r7, #10]
 80039e6:	460b      	mov	r3, r1
 80039e8:	813b      	strh	r3, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	80fb      	strh	r3, [r7, #6]
	/* Generate Start */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039fc:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 f960 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <I2C_RequestMemoryWrite+0x5e>
			!= HAL_OK) {
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a24:	d103      	bne.n	8003a2e <I2C_RequestMemoryWrite+0x5a>
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e05f      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a32:	897b      	ldrh	r3, [r7, #10]
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a40:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	6a3a      	ldr	r2, [r7, #32]
 8003a46:	492d      	ldr	r1, [pc, #180]	; (8003afc <I2C_RequestMemoryWrite+0x128>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f998 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <I2C_RequestMemoryWrite+0x84>
			Tickstart) != HAL_OK) {
		return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e04c      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
	}

	/* Clear ADDR flag */
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697b      	ldr	r3, [r7, #20]

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a70:	6a39      	ldr	r1, [r7, #32]
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa02 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00d      	beq.n	8003a9a <I2C_RequestMemoryWrite+0xc6>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d107      	bne.n	8003a96 <I2C_RequestMemoryWrite+0xc2>
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a94:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e02b      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
	}

	/* If Memory address size is 8Bit */
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <I2C_RequestMemoryWrite+0xd8>
		/* Send Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa0:	893b      	ldrh	r3, [r7, #8]
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	611a      	str	r2, [r3, #16]
 8003aaa:	e021      	b.n	8003af0 <I2C_RequestMemoryWrite+0x11c>
	}
	/* If Memory address size is 16Bit */
	else {
		/* Send MSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aac:	893b      	ldrh	r3, [r7, #8]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

		/* Wait until TXE flag is set */
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	6a39      	ldr	r1, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f9dc 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <I2C_RequestMemoryWrite+0x112>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d107      	bne.n	8003ae2 <I2C_RequestMemoryWrite+0x10e>
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e005      	b.n	8003af2 <I2C_RequestMemoryWrite+0x11e>
		}

		/* Send LSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae6:	893b      	ldrh	r3, [r7, #8]
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	611a      	str	r2, [r3, #16]
	}

	return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	00010002 	.word	0x00010002

08003b00 <I2C_RequestMemoryRead>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c,
		uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize,
		uint32_t Timeout, uint32_t Tickstart) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	4608      	mov	r0, r1
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4603      	mov	r3, r0
 8003b10:	817b      	strh	r3, [r7, #10]
 8003b12:	460b      	mov	r3, r1
 8003b14:	813b      	strh	r3, [r7, #8]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
	/* Enable Acknowledge */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b28:	601a      	str	r2, [r3, #0]

	/* Generate Start */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b38:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f8c2 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <I2C_RequestMemoryRead+0x6e>
			!= HAL_OK) {
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d103      	bne.n	8003b6a <I2C_RequestMemoryRead+0x6a>
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b68:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0aa      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	461a      	mov	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b7c:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	4952      	ldr	r1, [pc, #328]	; (8003ccc <I2C_RequestMemoryRead+0x1cc>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8fa 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <I2C_RequestMemoryRead+0x94>
			Tickstart) != HAL_OK) {
		return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e097      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Clear ADDR flag */
	__HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	697b      	ldr	r3, [r7, #20]

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bac:	6a39      	ldr	r1, [r7, #32]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f964 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00d      	beq.n	8003bd6 <I2C_RequestMemoryRead+0xd6>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d107      	bne.n	8003bd2 <I2C_RequestMemoryRead+0xd2>
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd0:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e076      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	/* If Memory address size is 8Bit */
	if (MemAddSize == I2C_MEMADD_SIZE_8BIT) {
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d105      	bne.n	8003be8 <I2C_RequestMemoryRead+0xe8>
		/* Send Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	611a      	str	r2, [r3, #16]
 8003be6:	e021      	b.n	8003c2c <I2C_RequestMemoryRead+0x12c>
	}
	/* If Memory address size is 16Bit */
	else {
		/* Send MSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be8:	893b      	ldrh	r3, [r7, #8]
 8003bea:	0a1b      	lsrs	r3, r3, #8
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

		/* Wait until TXE flag is set */
		if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	6a39      	ldr	r1, [r7, #32]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f93e 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00d      	beq.n	8003c22 <I2C_RequestMemoryRead+0x122>
			if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d107      	bne.n	8003c1e <I2C_RequestMemoryRead+0x11e>
				/* Generate Stop */
				SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1c:	601a      	str	r2, [r3, #0]
			}
			return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e050      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
		}

		/* Send LSB of Memory Address */
		hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c22:	893b      	ldrh	r3, [r7, #8]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
	}

	/* Wait until TXE flag is set */
	if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK) {
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 f923 	bl	8003e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00d      	beq.n	8003c58 <I2C_RequestMemoryRead+0x158>
		if (hi2c->ErrorCode == HAL_I2C_ERROR_AF) {
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d107      	bne.n	8003c54 <I2C_RequestMemoryRead+0x154>
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c52:	601a      	str	r2, [r3, #0]
		}
		return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e035      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Generate Restart */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c66:	601a      	str	r2, [r3, #0]

	/* Wait until SB flag is set */
	if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart)
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f82b 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_RequestMemoryRead+0x19c>
			!= HAL_OK) {
		if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8e:	d103      	bne.n	8003c98 <I2C_RequestMemoryRead+0x198>
			hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40
		}
		return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e013      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	/* Send slave address */
	hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c9c:	897b      	ldrh	r3, [r7, #10]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]

	/* Wait until ADDR flag is set */
	if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout,
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	6a3a      	ldr	r2, [r7, #32]
 8003cb0:	4906      	ldr	r1, [pc, #24]	; (8003ccc <I2C_RequestMemoryRead+0x1cc>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f863 	bl	8003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <I2C_RequestMemoryRead+0x1c2>
			Tickstart) != HAL_OK) {
		return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <I2C_RequestMemoryRead+0x1c4>
	}

	return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	00010002 	.word	0x00010002

08003cd0 <I2C_WaitOnFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8003ce0:	e025      	b.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce8:	d021      	beq.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003cea:	f7fe fedb 	bl	8002aa4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d116      	bne.n	8003d2e <I2C_WaitOnFlagUntilTimeout+0x5e>
				hi2c->PreviousState = I2C_STATE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e023      	b.n	8003d76 <I2C_WaitOnFlagUntilTimeout+0xa6>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status) {
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d10d      	bne.n	8003d54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	43da      	mvns	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4013      	ands	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2301      	moveq	r3, #1
 8003d4c:	2300      	movne	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	e00c      	b.n	8003d6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	bf0c      	ite	eq
 8003d66:	2301      	moveq	r3, #1
 8003d68:	2300      	movne	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d0b6      	beq.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
			}
		}
	}
	return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(
		I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout,
		uint32_t Tickstart) {
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	603b      	str	r3, [r7, #0]
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8003d8c:	e051      	b.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9c:	d123      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
			/* Generate Stop */
			SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dac:	601a      	str	r2, [r3, #0]

			/* Clear AF Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db6:	615a      	str	r2, [r3, #20]

			hi2c->PreviousState = I2C_STATE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0204 	orr.w	r2, r3, #4
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e046      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dec:	d021      	beq.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003dee:	f7fe fe59 	bl	8002aa4 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
				hi2c->PreviousState = I2C_STATE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0220 	orr.w	r2, r3, #32
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e020      	b.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
	while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET) {
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	0c1b      	lsrs	r3, r3, #16
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10c      	bne.n	8003e56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	43da      	mvns	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bf14      	ite	ne
 8003e4e:	2301      	movne	r3, #1
 8003e50:	2300      	moveq	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	e00b      	b.n	8003e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	43da      	mvns	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4013      	ands	r3, r2
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf14      	ite	ne
 8003e68:	2301      	movne	r3, #1
 8003e6a:	2300      	moveq	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d18d      	bne.n	8003d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
			}
		}
	}
	return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnTXEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8003e88:	e02d      	b.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f8ce 	bl	800402c <I2C_IsAcknowledgeFailed>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
			return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e02d      	b.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea0:	d021      	beq.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003ea2:	f7fe fdff 	bl	8002aa4 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d302      	bcc.n	8003eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d116      	bne.n	8003ee6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e007      	b.n	8003ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET) {
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef0:	2b80      	cmp	r3, #128	; 0x80
 8003ef2:	d1ca      	bne.n	8003e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
			}
		}
	}
	return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <I2C_WaitOnBTFFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8003f0a:	e02d      	b.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
		/* Check if a NACK is detected */
		if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK) {
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f88d 	bl	800402c <I2C_IsAcknowledgeFailed>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
			return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e02d      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
		}

		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f22:	d021      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003f24:	f7fe fdbe 	bl	8002aa4 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d116      	bne.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
				hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
				hi2c->State = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
				hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

				/* Process Unlocked */
				__HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

				return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET) {
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d1ca      	bne.n	8003f0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
			}
		}
	}
	return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_WaitOnRXNEFlagUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart Tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c,
		uint32_t Timeout, uint32_t Tickstart) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]

	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8003f8c:	e042      	b.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
		/* Check if a STOPF is detected */
		if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d119      	bne.n	8003fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
			/* Clear STOP Flag */
			__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0210 	mvn.w	r2, #16
 8003fa4:	615a      	str	r2, [r3, #20]

			hi2c->PreviousState = I2C_STATE_NONE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e029      	b.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
		}

		/* Check for the Timeout */
		if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8003fd0:	f7fe fd68 	bl	8002aa4 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d116      	bne.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
			hi2c->PreviousState = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
			hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
			hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

			/* Process Unlocked */
			__HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

			return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e007      	b.n	8004024 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
	while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) {
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401e:	2b40      	cmp	r3, #64	; 0x40
 8004020:	d1b5      	bne.n	8003f8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
		}
	}
	return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <I2C_IsAcknowledgeFailed>:
 * @brief  This function handles Acknowledge failed detection during an I2C Communication.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c) {
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET) {
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d11b      	bne.n	800407c <I2C_IsAcknowledgeFailed+0x50>
		/* Clear NACKF Flag */
		__HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800404c:	615a      	str	r2, [r3, #20]

		hi2c->PreviousState = I2C_STATE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
		hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		hi2c->Mode = HAL_I2C_MODE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f043 0204 	orr.w	r2, r3, #4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	641a      	str	r2, [r3, #64]	; 0x40

		/* Process Unlocked */
		__HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <I2C_IsAcknowledgeFailed+0x52>
	}
	return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e272      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8087 	beq.w	80041b6 <HAL_RCC_OscConfig+0x12e>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040a8:	4b92      	ldr	r3, [pc, #584]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b04      	cmp	r3, #4
 80040b2:	d00c      	beq.n	80040ce <HAL_RCC_OscConfig+0x46>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80040b4:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d112      	bne.n	80040e6 <HAL_RCC_OscConfig+0x5e>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 80040c0:	4b8c      	ldr	r3, [pc, #560]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d10b      	bne.n	80040e6 <HAL_RCC_OscConfig+0x5e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b89      	ldr	r3, [pc, #548]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d06c      	beq.n	80041b4 <HAL_RCC_OscConfig+0x12c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d168      	bne.n	80041b4 <HAL_RCC_OscConfig+0x12c>
				return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e24c      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x76>
 80040f0:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7f      	ldr	r2, [pc, #508]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80040f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e02e      	b.n	800415c <HAL_RCC_OscConfig+0xd4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x98>
 8004106:	4b7b      	ldr	r3, [pc, #492]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a7a      	ldr	r2, [pc, #488]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b78      	ldr	r3, [pc, #480]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a77      	ldr	r2, [pc, #476]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e01d      	b.n	800415c <HAL_RCC_OscConfig+0xd4>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0xbc>
 800412a:	4b72      	ldr	r3, [pc, #456]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a71      	ldr	r2, [pc, #452]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	4b6f      	ldr	r3, [pc, #444]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6e      	ldr	r2, [pc, #440]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800413c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0xd4>
 8004144:	4b6b      	ldr	r3, [pc, #428]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a6a      	ldr	r2, [pc, #424]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800414a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a67      	ldr	r2, [pc, #412]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415a:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <HAL_RCC_OscConfig+0x104>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004164:	f7fe fc9e 	bl	8002aa4 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0xf6>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800416c:	f7fe fc9a 	bl	8002aa4 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b64      	cmp	r3, #100	; 0x64
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0xf6>
						return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e200      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800417e:	4b5d      	ldr	r3, [pc, #372]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0xe4>
 800418a:	e014      	b.n	80041b6 <HAL_RCC_OscConfig+0x12e>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800418c:	f7fe fc8a 	bl	8002aa4 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x11e>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8004194:	f7fe fc86 	bl	8002aa4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b64      	cmp	r3, #100	; 0x64
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x11e>
						return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e1ec      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80041a6:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x10c>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x12e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b4:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d063      	beq.n	800428a <HAL_RCC_OscConfig+0x202>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c2:	4b4c      	ldr	r3, [pc, #304]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00b      	beq.n	80041e6 <HAL_RCC_OscConfig+0x15e>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80041ce:	4b49      	ldr	r3, [pc, #292]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d11c      	bne.n	8004214 <HAL_RCC_OscConfig+0x18c>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE()
 80041da:	4b46      	ldr	r3, [pc, #280]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d116      	bne.n	8004214 <HAL_RCC_OscConfig+0x18c>
								== RCC_PLLSOURCE_HSI_DIV2))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b43      	ldr	r3, [pc, #268]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x176>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d001      	beq.n	80041fe <HAL_RCC_OscConfig+0x176>
				return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e1c0      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80041fe:	4b3d      	ldr	r3, [pc, #244]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	4939      	ldr	r1, [pc, #228]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004212:	e03a      	b.n	800428a <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_OscConfig+0x1d6>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800421c:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCC_OscConfig+0x270>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004222:	f7fe fc3f 	bl	8002aa4 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x1b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800422a:	f7fe fc3b 	bl	8002aa4 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x1b4>
						return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e1a1      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800423c:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x1a2>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8004248:	4b2a      	ldr	r3, [pc, #168]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4927      	ldr	r1, [pc, #156]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	600b      	str	r3, [r1, #0]
 800425c:	e015      	b.n	800428a <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800425e:	4b26      	ldr	r3, [pc, #152]	; (80042f8 <HAL_RCC_OscConfig+0x270>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004264:	f7fe fc1e 	bl	8002aa4 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x1f6>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800426c:	f7fe fc1a 	bl	8002aa4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x1f6>
						return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e180      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x1e4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d03a      	beq.n	800430c <HAL_RCC_OscConfig+0x284>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d019      	beq.n	80042d2 <HAL_RCC_OscConfig+0x24a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800429e:	4b17      	ldr	r3, [pc, #92]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80042a4:	f7fe fbfe 	bl	8002aa4 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x236>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80042ac:	f7fe fbfa 	bl	8002aa4 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x236>
					return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e160      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x224>
				}
			}
			/*  To have a fully stabilized clock in the specified range, a software delay of 1ms
			 should be added.*/
			RCC_Delay(1);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f000 faf4 	bl	80048b8 <RCC_Delay>
 80042d0:	e01c      	b.n	800430c <HAL_RCC_OscConfig+0x284>
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <HAL_RCC_OscConfig+0x274>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80042d8:	f7fe fbe4 	bl	8002aa4 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80042de:	e00f      	b.n	8004300 <HAL_RCC_OscConfig+0x278>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80042e0:	f7fe fbe0 	bl	8002aa4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d908      	bls.n	8004300 <HAL_RCC_OscConfig+0x278>
					return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e146      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000
 80042f8:	42420000 	.word	0x42420000
 80042fc:	42420480 	.word	0x42420480
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8004300:	4b92      	ldr	r3, [pc, #584]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e9      	bne.n	80042e0 <HAL_RCC_OscConfig+0x258>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a6 	beq.w	8004466 <HAL_RCC_OscConfig+0x3de>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800431e:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10d      	bne.n	8004346 <HAL_RCC_OscConfig+0x2be>
			__HAL_RCC_PWR_CLK_ENABLE();
 800432a:	4b88      	ldr	r3, [pc, #544]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4a87      	ldr	r2, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	61d3      	str	r3, [r2, #28]
 8004336:	4b85      	ldr	r3, [pc, #532]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004346:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x4c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d118      	bne.n	8004384 <HAL_RCC_OscConfig+0x2fc>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8004352:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x4c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7e      	ldr	r2, [pc, #504]	; (8004550 <HAL_RCC_OscConfig+0x4c8>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800435e:	f7fe fba1 	bl	8002aa4 <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2f0>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8004366:	f7fe fb9d 	bl	8002aa4 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b64      	cmp	r3, #100	; 0x64
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2f0>
					return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e103      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8004378:	4b75      	ldr	r3, [pc, #468]	; (8004550 <HAL_RCC_OscConfig+0x4c8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x2de>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x312>
 800438c:	4b6f      	ldr	r3, [pc, #444]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4a6e      	ldr	r2, [pc, #440]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6213      	str	r3, [r2, #32]
 8004398:	e02d      	b.n	80043f6 <HAL_RCC_OscConfig+0x36e>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x334>
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a69      	ldr	r2, [pc, #420]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	6213      	str	r3, [r2, #32]
 80043ae:	4b67      	ldr	r3, [pc, #412]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a66      	ldr	r2, [pc, #408]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 0304 	bic.w	r3, r3, #4
 80043b8:	6213      	str	r3, [r2, #32]
 80043ba:	e01c      	b.n	80043f6 <HAL_RCC_OscConfig+0x36e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d10c      	bne.n	80043de <HAL_RCC_OscConfig+0x356>
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	4a60      	ldr	r2, [pc, #384]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	f043 0304 	orr.w	r3, r3, #4
 80043ce:	6213      	str	r3, [r2, #32]
 80043d0:	4b5e      	ldr	r3, [pc, #376]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4a5d      	ldr	r2, [pc, #372]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6213      	str	r3, [r2, #32]
 80043dc:	e00b      	b.n	80043f6 <HAL_RCC_OscConfig+0x36e>
 80043de:	4b5b      	ldr	r3, [pc, #364]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a5a      	ldr	r2, [pc, #360]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6213      	str	r3, [r2, #32]
 80043ea:	4b58      	ldr	r3, [pc, #352]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a57      	ldr	r2, [pc, #348]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6213      	str	r3, [r2, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d015      	beq.n	800442a <HAL_RCC_OscConfig+0x3a2>
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80043fe:	f7fe fb51 	bl	8002aa4 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x394>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004406:	f7fe fb4d 	bl	8002aa4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x394>
					return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e0b1      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCC_OscConfig+0x37e>
 8004428:	e014      	b.n	8004454 <HAL_RCC_OscConfig+0x3cc>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 800442a:	f7fe fb3b 	bl	8002aa4 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x3c0>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8004432:	f7fe fb37 	bl	8002aa4 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x3c0>
					return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e09b      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8004448:	4b40      	ldr	r3, [pc, #256]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1ee      	bne.n	8004432 <HAL_RCC_OscConfig+0x3aa>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8004454:	7dfb      	ldrb	r3, [r7, #23]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d105      	bne.n	8004466 <HAL_RCC_OscConfig+0x3de>
			__HAL_RCC_PWR_CLK_DISABLE();
 800445a:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	4a3b      	ldr	r2, [pc, #236]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 8087 	beq.w	800457e <HAL_RCC_OscConfig+0x4f6>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8004470:	4b36      	ldr	r3, [pc, #216]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 030c 	and.w	r3, r3, #12
 8004478:	2b08      	cmp	r3, #8
 800447a:	d061      	beq.n	8004540 <HAL_RCC_OscConfig+0x4b8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d146      	bne.n	8004512 <HAL_RCC_OscConfig+0x48a>
				assert_param(
						IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
				assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCC_OscConfig+0x4cc>)
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800448a:	f7fe fb0b 	bl	8002aa4 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x41c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004492:	f7fe fb07 	bl	8002aa4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x41c>
						return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e06d      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80044a4:	4b29      	ldr	r3, [pc, #164]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f0      	bne.n	8004492 <HAL_RCC_OscConfig+0x40a>
					}
				}

				/* Configure the HSE prediv factor --------------------------------*/
				/* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
				if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d108      	bne.n	80044cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

					/* Set PREDIV1 Value */
					__HAL_RCC_HSE_PREDIV_CONFIG(
 80044ba:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	4921      	ldr	r1, [pc, #132]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->HSEPredivValue);
				}

				/* Configure the main PLL clock source and multiplication factors. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044cc:	4b1f      	ldr	r3, [pc, #124]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a19      	ldr	r1, [r3, #32]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	430b      	orrs	r3, r1
 80044de:	491b      	ldr	r1, [pc, #108]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]
						RCC_OscInitStruct->PLL.PLLMUL);
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80044e4:	4b1b      	ldr	r3, [pc, #108]	; (8004554 <HAL_RCC_OscConfig+0x4cc>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80044ea:	f7fe fadb 	bl	8002aa4 <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x47c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80044f2:	f7fe fad7 	bl	8002aa4 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x47c>
						return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e03d      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x46a>
 8004510:	e035      	b.n	800457e <HAL_RCC_OscConfig+0x4f6>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8004512:	4b10      	ldr	r3, [pc, #64]	; (8004554 <HAL_RCC_OscConfig+0x4cc>)
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8004518:	f7fe fac4 	bl	8002aa4 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x4aa>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8004520:	f7fe fac0 	bl	8002aa4 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x4aa>
						return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e026      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_RCC_OscConfig+0x4c4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x498>
 800453e:	e01e      	b.n	800457e <HAL_RCC_OscConfig+0x4f6>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <HAL_RCC_OscConfig+0x4d0>
				return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e019      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
 800454c:	40021000 	.word	0x40021000
 8004550:	40007000 	.word	0x40007000
 8004554:	42420060 	.word	0x42420060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_RCC_OscConfig+0x500>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	60fb      	str	r3, [r7, #12]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
						!= RCC_OscInitStruct->PLL.PLLSource)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8004568:	429a      	cmp	r2, r3
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x4f2>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
								!= RCC_OscInitStruct->PLL.PLLMUL)) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8004576:	429a      	cmp	r2, r3
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x4f6>
					return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <HAL_RCC_OscConfig+0x4f8>
				}
			}
		}
	}

	return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000

0800458c <HAL_RCC_ClockConfig>:
 *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0d0      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80045a0:	4b6a      	ldr	r3, [pc, #424]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d910      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80045ae:	4b67      	ldr	r3, [pc, #412]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0207 	bic.w	r2, r3, #7
 80045b6:	4965      	ldr	r1, [pc, #404]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
		}
	}

#endif /* FLASH_ACR_LATENCY */
	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x92>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x68>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045f2:	6053      	str	r3, [r2, #4]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x80>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800460a:	6053      	str	r3, [r2, #4]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d040      	beq.n	80046ac <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xb6>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d115      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d109      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e073      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800465a:	4b3d      	ldr	r3, [pc, #244]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e06b      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4936      	ldr	r1, [pc, #216]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 800467c:	f7fe fa12 	bl	8002aa4 <HAL_GetTick>
 8004680:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8004682:	e00a      	b.n	800469a <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8004684:	f7fe fa0e 	bl	8002aa4 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e053      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800469a:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d1eb      	bne.n	8004684 <HAL_RCC_ClockConfig+0xf8>
		}
	}

#if defined(FLASH_ACR_LATENCY)
	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d210      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x150>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	4922      	ldr	r1, [pc, #136]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x150>
			return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1b6>
		}
	}
#endif /* FLASH_ACR_LATENCY */

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x16e>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x18e>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	4313      	orrs	r3, r2
 8004718:	604b      	str	r3, [r1, #4]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1cc>)
 8004734:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_ClockConfig+0x1d0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe f824 	bl	8002788 <HAL_InitTick>

	return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40022000 	.word	0x40022000
 8004750:	40021000 	.word	0x40021000
 8004754:	080085f0 	.word	0x080085f0
 8004758:	20000054 	.word	0x20000054
 800475c:	20000058 	.word	0x20000058

08004760 <HAL_RCC_GetSysClockFreq>:
 * @note   Each time SYSCLK changes, this function must be called to update the
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8004760:	b490      	push	{r4, r7}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
	const uint8_t aPLLMULFactorTable[16] = { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
 8004766:	4b29      	ldr	r3, [pc, #164]	; (800480c <HAL_RCC_GetSysClockFreq+0xac>)
 8004768:	1d3c      	adds	r4, r7, #4
 800476a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800476c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			13, 14, 15, 16, 16 };
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
	const uint8_t aPredivFactorTable[2] = { 1, 2 };
 8004770:	f240 2301 	movw	r3, #513	; 0x201
 8004774:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004776:	2300      	movs	r3, #0
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
	uint32_t sysclockfreq = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

	tmpreg = RCC->CFGR;
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <HAL_RCC_GetSysClockFreq+0xb0>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	61fb      	str	r3, [r7, #28]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS) {
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 030c 	and.w	r3, r3, #12
 8004796:	2b04      	cmp	r3, #4
 8004798:	d002      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x40>
 800479a:	2b08      	cmp	r3, #8
 800479c:	d003      	beq.n	80047a6 <HAL_RCC_GetSysClockFreq+0x46>
 800479e:	e02b      	b.n	80047f8 <HAL_RCC_GetSysClockFreq+0x98>
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
	{
		sysclockfreq = HSE_VALUE;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047a2:	623b      	str	r3, [r7, #32]
		break;
 80047a4:	e02b      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x9e>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
	{
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
				>> RCC_CFGR_PLLMULL_Pos];
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	0c9b      	lsrs	r3, r3, #18
 80047aa:	f003 030f 	and.w	r3, r3, #15
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 80047ae:	3328      	adds	r3, #40	; 0x28
 80047b0:	443b      	add	r3, r7
 80047b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047b6:	617b      	str	r3, [r7, #20]
		if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2) {
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d012      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x88>
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCC_GetSysClockFreq+0xb0>)
 80047c4:	685b      	ldr	r3, [r3, #4]
					& RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047c6:	0c5b      	lsrs	r3, r3, #17
 80047c8:	f003 0301 	and.w	r3, r3, #1
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 80047cc:	3328      	adds	r3, #40	; 0x28
 80047ce:	443b      	add	r3, r7
 80047d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
			/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047da:	fb03 f202 	mul.w	r2, r3, r2
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e004      	b.n	80047f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
		} else {
			/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
			pllclk = (uint32_t) ((HSI_VALUE >> 1) * pllmul);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	4a0b      	ldr	r2, [pc, #44]	; (8004818 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ec:	fb02 f303 	mul.w	r3, r2, r3
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		sysclockfreq = pllclk;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	623b      	str	r3, [r7, #32]
		break;
 80047f6:	e002      	b.n	80047fe <HAL_RCC_GetSysClockFreq+0x9e>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	default: /* HSI used as system clock */
	{
		sysclockfreq = HSI_VALUE;
 80047f8:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047fa:	623b      	str	r3, [r7, #32]
		break;
 80047fc:	bf00      	nop
	}
	}
	return sysclockfreq;
 80047fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3728      	adds	r7, #40	; 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	bc90      	pop	{r4, r7}
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	08008580 	.word	0x08008580
 8004810:	40021000 	.word	0x40021000
 8004814:	007a1200 	.word	0x007a1200
 8004818:	003d0900 	.word	0x003d0900

0800481c <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8004820:	4b02      	ldr	r3, [pc, #8]	; (800482c <HAL_RCC_GetHCLKFreq+0x10>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	20000054 	.word	0x20000054

08004830 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8004834:	f7ff fff2 	bl	800481c <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4903      	ldr	r1, [pc, #12]	; (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800484c:	4618      	mov	r0, r3
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40021000 	.word	0x40021000
 8004854:	08008600 	.word	0x08008600

08004858 <HAL_RCC_GetClockConfig>:
 * contains the current clock configuration.
 * @param  pFLatency Pointer on the Flash Latency.
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t *pFLatency) {
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	/* Check the parameters */
	assert_param(RCC_ClkInitStruct != NULL);
	assert_param(pFLatency != NULL);

	/* Set all possible values for the Clock type parameter --------------------*/
	RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	220f      	movs	r2, #15
 8004866:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

	/* Get the SYSCLK configuration --------------------------------------------*/
	RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8004868:	4b11      	ldr	r3, [pc, #68]	; (80048b0 <HAL_RCC_GetClockConfig+0x58>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f003 0203 	and.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	605a      	str	r2, [r3, #4]

	/* Get the HCLK configuration ----------------------------------------------*/
	RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 8004874:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCC_GetClockConfig+0x58>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	609a      	str	r2, [r3, #8]

	/* Get the APB1 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_GetClockConfig+0x58>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]

	/* Get the APB2 configuration ----------------------------------------------*/
	RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <HAL_RCC_GetClockConfig+0x58>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	08db      	lsrs	r3, r3, #3
 8004892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	611a      	str	r2, [r3, #16]
			>> 3);

#if   defined(FLASH_ACR_LATENCY)
	/* Get the Flash Wait State (Latency) configuration ------------------------*/
	*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_GetClockConfig+0x5c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0207 	and.w	r2, r3, #7
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	40021000 	.word	0x40021000
 80048b4:	40022000 	.word	0x40022000

080048b8 <RCC_Delay>:
/**
 * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
 * @param  mdelay: specifies the delay time length, in milliseconds.
 * @retval None
 */
static void RCC_Delay(uint32_t mdelay) {
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	__IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <RCC_Delay+0x34>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <RCC_Delay+0x38>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	0a5b      	lsrs	r3, r3, #9
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	60fb      	str	r3, [r7, #12]
	do {
		__NOP();
 80048d4:	bf00      	nop
	} while (Delay--);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	60fa      	str	r2, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f9      	bne.n	80048d4 <RCC_Delay+0x1c>
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr
 80048ec:	20000054 	.word	0x20000054
 80048f0:	10624dd3 	.word	0x10624dd3

080048f4 <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f839 	bl	8004992 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 f9b4 	bl	8004ca0 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_TIM_Base_MspInit>:
/**
 * @brief  Initializes the TIM Base MSP.
 * @param  htim TIM Base handle
 * @retval None
 */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8004992:	b480      	push	{r7}
 8004994:	b083      	sub	sp, #12
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_Base_MspInit could be implemented in the user file
	 */
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr

080049a4 <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x18>
		return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e03a      	b.n	8004a32 <HAL_TIM_Base_Start_IT+0x8e>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <HAL_TIM_Base_Start_IT+0x98>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0x58>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e6:	d009      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0x58>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a14      	ldr	r2, [pc, #80]	; (8004a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_TIM_Base_Start_IT+0x58>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d111      	bne.n	8004a20 <HAL_TIM_Base_Start_IT+0x7c>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d010      	beq.n	8004a30 <HAL_TIM_Base_Start_IT+0x8c>
			__HAL_TIM_ENABLE(htim);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0201 	orr.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8004a1e:	e007      	b.n	8004a30 <HAL_TIM_Base_Start_IT+0x8c>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	40012c00 	.word	0x40012c00
 8004a40:	40000400 	.word	0x40000400
 8004a44:	40000800 	.word	0x40000800

08004a48 <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d122      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d11b      	bne.n	8004aa4 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0202 	mvn.w	r2, #2
 8004a74:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	f003 0303 	and.w	r3, r3, #3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_TIM_IRQHandler+0x4a>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8ed 	bl	8004c6a <HAL_TIM_IC_CaptureCallback>
 8004a90:	e005      	b.n	8004a9e <HAL_TIM_IRQHandler+0x56>
				else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f8e0 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f8ef 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d122      	bne.n	8004af8 <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b04      	cmp	r3, #4
 8004abe:	d11b      	bne.n	8004af8 <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0204 	mvn.w	r2, #4
 8004ac8:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x9e>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f8c3 	bl	8004c6a <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0xaa>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f8b6 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f8c5 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b08      	cmp	r3, #8
 8004b04:	d122      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f003 0308 	and.w	r3, r3, #8
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d11b      	bne.n	8004b4c <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0208 	mvn.w	r2, #8
 8004b1c:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2204      	movs	r2, #4
 8004b22:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0xf2>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f899 	bl	8004c6a <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0xfe>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f88c 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f89b 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0310 	and.w	r3, r3, #16
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d122      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d11b      	bne.n	8004ba0 <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0210 	mvn.w	r2, #16
 8004b70:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2208      	movs	r2, #8
 8004b76:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x146>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f86f 	bl	8004c6a <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x152>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f862 	bl	8004c58 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f871 	bl	8004c7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10e      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0201 	mvn.w	r2, #1
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fd3c 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b80      	cmp	r3, #128	; 0x80
 8004bd8:	d10e      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be4:	2b80      	cmp	r3, #128	; 0x80
 8004be6:	d107      	bne.n	8004bf8 <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f8bf 	bl	8004d76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d10e      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b40      	cmp	r3, #64	; 0x40
 8004c12:	d107      	bne.n	8004c24 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f835 	bl	8004c8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d10e      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0220 	mvn.w	r2, #32
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f88a 	bl	8004d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr

08004c6a <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a29      	ldr	r2, [pc, #164]	; (8004d58 <TIM_Base_SetConfig+0xb8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x30>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x30>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <TIM_Base_SetConfig+0xbc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x30>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <TIM_Base_SetConfig+0xc0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d108      	bne.n	8004ce2 <TIM_Base_SetConfig+0x42>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	; (8004d58 <TIM_Base_SetConfig+0xb8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00b      	beq.n	8004d02 <TIM_Base_SetConfig+0x62>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d007      	beq.n	8004d02 <TIM_Base_SetConfig+0x62>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <TIM_Base_SetConfig+0xbc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_Base_SetConfig+0x62>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <TIM_Base_SetConfig+0xc0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d108      	bne.n	8004d14 <TIM_Base_SetConfig+0x74>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d08:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <TIM_Base_SetConfig+0xb8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d103      	bne.n	8004d48 <TIM_Base_SetConfig+0xa8>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	615a      	str	r2, [r3, #20]
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800

08004d64 <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Hall commutation changed callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutCallback could be implemented in the user file
	 */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Hall Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize(void) {
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 \return               IPSR Register value
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void) {
	uint32_t result;

	__ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	60bb      	str	r3, [r7, #8]
	return (result);
 8004d94:	68bb      	ldr	r3, [r7, #8]
	osStatus_t stat;

	if (IS_IRQ()) {
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10f      	bne.n	8004dba <osKernelInitialize+0x32>
 \return               Priority Mask value
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void) {
	uint32_t result;

	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9e:	607b      	str	r3, [r7, #4]
	return (result);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <osKernelInitialize+0x32>
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <osKernelInitialize+0x60>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d109      	bne.n	8004dc2 <osKernelInitialize+0x3a>
 \return               Base Priority register value
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void) {
	uint32_t result;

	__ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dae:	f3ef 8311 	mrs	r3, BASEPRI
 8004db2:	603b      	str	r3, [r7, #0]
	return (result);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <osKernelInitialize+0x3a>
		stat = osErrorISR;
 8004dba:	f06f 0305 	mvn.w	r3, #5
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e00c      	b.n	8004ddc <osKernelInitialize+0x54>
	} else {
		if (KernelState == osKernelInactive) {
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <osKernelInitialize+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <osKernelInitialize+0x4e>
#if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
			KernelState = osKernelReady;
 8004dca:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <osKernelInitialize+0x60>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
			stat = osOK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e002      	b.n	8004ddc <osKernelInitialize+0x54>
		} else {
			stat = osError;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dda:	60fb      	str	r3, [r7, #12]
		}
	}

	return (stat);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bc80      	pop	{r7}
 8004de6:	4770      	bx	lr
 8004de8:	20000234 	.word	0x20000234

08004dec <osKernelStart>:
	}

	return (state);
}

osStatus_t osKernelStart(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
	__ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df2:	f3ef 8305 	mrs	r3, IPSR
 8004df6:	60bb      	str	r3, [r7, #8]
	return (result);
 8004df8:	68bb      	ldr	r3, [r7, #8]
	osStatus_t stat;

	if (IS_IRQ()) {
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <osKernelStart+0x32>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004e02:	607b      	str	r3, [r7, #4]
	return (result);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <osKernelStart+0x32>
 8004e0a:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <osKernelStart+0x64>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d109      	bne.n	8004e26 <osKernelStart+0x3a>
	__ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e12:	f3ef 8311 	mrs	r3, BASEPRI
 8004e16:	603b      	str	r3, [r7, #0]
	return (result);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <osKernelStart+0x3a>
		stat = osErrorISR;
 8004e1e:	f06f 0305 	mvn.w	r3, #5
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e00e      	b.n	8004e44 <osKernelStart+0x58>
	} else {
		if (KernelState == osKernelReady) {
 8004e26:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <osKernelStart+0x64>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d107      	bne.n	8004e3e <osKernelStart+0x52>
			KernelState = osKernelRunning;
 8004e2e:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <osKernelStart+0x64>)
 8004e30:	2202      	movs	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]
			vTaskStartScheduler();
 8004e34:	f001 f94c 	bl	80060d0 <vTaskStartScheduler>
			stat = osOK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e002      	b.n	8004e44 <osKernelStart+0x58>
		} else {
			stat = osError;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e42:	60fb      	str	r3, [r7, #12]
		}
	}

	return (stat);
 8004e44:	68fb      	ldr	r3, [r7, #12]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000234 	.word	0x20000234

08004e54 <osThreadNew>:
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew(osThreadFunc_t func, void *argument,
		const osThreadAttr_t *attr) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b092      	sub	sp, #72	; 0x48
 8004e58:	af04      	add	r7, sp, #16
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	uint32_t stack;
	TaskHandle_t hTask;
	UBaseType_t prio;
	int32_t mem;

	hTask = NULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
	__ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e64:	f3ef 8305 	mrs	r3, IPSR
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

	if (!IS_IRQ() && (func != NULL)) {
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f040 8094 	bne.w	8004f9a <osThreadNew+0x146>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e72:	f3ef 8310 	mrs	r3, PRIMASK
 8004e76:	623b      	str	r3, [r7, #32]
	return (result);
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f040 808d 	bne.w	8004f9a <osThreadNew+0x146>
 8004e80:	4b48      	ldr	r3, [pc, #288]	; (8004fa4 <osThreadNew+0x150>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d106      	bne.n	8004e96 <osThreadNew+0x42>
	__ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e88:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8c:	61fb      	str	r3, [r7, #28]
	return (result);
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f040 8082 	bne.w	8004f9a <osThreadNew+0x146>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d07e      	beq.n	8004f9a <osThreadNew+0x146>
		stack = configMINIMAL_STACK_SIZE;
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	633b      	str	r3, [r7, #48]	; 0x30
		prio = (UBaseType_t) osPriorityNormal;
 8004ea0:	2318      	movs	r3, #24
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

		empty = '\0';
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	76fb      	strb	r3, [r7, #27]
		name = &empty;
 8004ea8:	f107 031b 	add.w	r3, r7, #27
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
		mem = -1;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28

		if (attr != NULL) {
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d045      	beq.n	8004f46 <osThreadNew+0xf2>
			if (attr->name != NULL) {
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <osThreadNew+0x74>
				name = attr->name;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
			}
			if (attr->priority != osPriorityNone) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <osThreadNew+0x82>
				prio = (UBaseType_t) attr->priority;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			if ((prio < osPriorityIdle) || (prio > osPriorityISR)
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <osThreadNew+0x9a>
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	2b38      	cmp	r3, #56	; 0x38
 8004ee0:	d805      	bhi.n	8004eee <osThreadNew+0x9a>
					|| ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <osThreadNew+0x9e>
				return (NULL);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e054      	b.n	8004f9c <osThreadNew+0x148>
			}

			if (attr->stack_size > 0U) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <osThreadNew+0xae>
				/* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
				/* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
				stack = attr->stack_size / sizeof(StackType_t);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if ((attr->cb_mem != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00e      	beq.n	8004f28 <osThreadNew+0xd4>
					&& (attr->cb_size >= sizeof(StaticTask_t))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2bbb      	cmp	r3, #187	; 0xbb
 8004f10:	d90a      	bls.n	8004f28 <osThreadNew+0xd4>
					&& (attr->stack_mem != NULL) && (attr->stack_size > 0U)) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <osThreadNew+0xd4>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <osThreadNew+0xd4>
				mem = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f26:	e010      	b.n	8004f4a <osThreadNew+0xf6>
			} else {
				if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10c      	bne.n	8004f4a <osThreadNew+0xf6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <osThreadNew+0xf6>
						&& (attr->stack_mem == NULL)) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <osThreadNew+0xf6>
					mem = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f44:	e001      	b.n	8004f4a <osThreadNew+0xf6>
				}
			}
		} else {
			mem = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		if (mem == 1) {
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d110      	bne.n	8004f72 <osThreadNew+0x11e>
			hTask = xTaskCreateStatic((TaskFunction_t) func, name, stack,
					argument, prio, (StackType_t*) attr->stack_mem,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
					(StaticTask_t*) attr->cb_mem);
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
			hTask = xTaskCreateStatic((TaskFunction_t) func, name, stack,
 8004f58:	9202      	str	r2, [sp, #8]
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fe50 	bl	8005c0c <xTaskCreateStatic>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	e013      	b.n	8004f9a <osThreadNew+0x146>
		} else {
			if (mem == 0) {
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d110      	bne.n	8004f9a <osThreadNew+0x146>
				if (xTaskCreate((TaskFunction_t) func, name, (uint16_t) stack,
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	f107 0314 	add.w	r3, r7, #20
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fe9a 	bl	8005cc4 <xTaskCreate>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <osThreadNew+0x146>
						argument, prio, &hTask) != pdPASS) {
					hTask = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
				}
			}
		}
	}

	return ((osThreadId_t) hTask);
 8004f9a:	697b      	ldr	r3, [r7, #20]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3738      	adds	r7, #56	; 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000234 	.word	0x20000234

08004fa8 <osDelay>:

	/* Return flags before clearing */
	return (rflags);
}

osStatus_t osDelay(uint32_t ticks) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb0:	f3ef 8305 	mrs	r3, IPSR
 8004fb4:	613b      	str	r3, [r7, #16]
	return (result);
 8004fb6:	693b      	ldr	r3, [r7, #16]
	osStatus_t stat;

	if (IS_IRQ()) {
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10f      	bne.n	8004fdc <osDelay+0x34>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc0:	60fb      	str	r3, [r7, #12]
	return (result);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <osDelay+0x34>
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <osDelay+0x58>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d109      	bne.n	8004fe4 <osDelay+0x3c>
	__ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fd0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd4:	60bb      	str	r3, [r7, #8]
	return (result);
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <osDelay+0x3c>
		stat = osErrorISR;
 8004fdc:	f06f 0305 	mvn.w	r3, #5
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e007      	b.n	8004ff4 <osDelay+0x4c>
	} else {
		stat = osOK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

		if (ticks != 0U) {
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <osDelay+0x4c>
			vTaskDelay(ticks);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 f83a 	bl	8006068 <vTaskDelay>
		}
	}

	return (stat);
 8004ff4:	697b      	ldr	r3, [r7, #20]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20000234 	.word	0x20000234

08005004 <vApplicationGetIdleTaskMemory>:
/*
 vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
 equals to 1 and is required for static memory allocation support.
 */
void vApplicationGetIdleTaskMemory(StaticTask_t **ppxIdleTaskTCBBuffer,
		StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &Idle_TCB;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a06      	ldr	r2, [pc, #24]	; (800502c <vApplicationGetIdleTaskMemory+0x28>)
 8005014:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <vApplicationGetIdleTaskMemory+0x2c>)
 800501a:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = (uint32_t) configMINIMAL_STACK_SIZE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2280      	movs	r2, #128	; 0x80
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	20000238 	.word	0x20000238
 8005030:	200002f4 	.word	0x200002f4

08005034 <vApplicationGetTimerTaskMemory>:
/*
 vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
 equals to 1 and is required for static memory allocation support.
 */
void vApplicationGetTimerTaskMemory(StaticTask_t **ppxTimerTaskTCBBuffer,
		StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
	*ppxTimerTaskTCBBuffer = &Timer_TCB;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a07      	ldr	r2, [pc, #28]	; (8005060 <vApplicationGetTimerTaskMemory+0x2c>)
 8005044:	601a      	str	r2, [r3, #0]
	*ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4a06      	ldr	r2, [pc, #24]	; (8005064 <vApplicationGetTimerTaskMemory+0x30>)
 800504a:	601a      	str	r2, [r3, #0]
	*pulTimerTaskStackSize = (uint32_t) configTIMER_TASK_STACK_DEPTH;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200004f4 	.word	0x200004f4
 8005064:	200005b0 	.word	0x200005b0

08005068 <vListInitialise>:

/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise(List_t *const pxList) {
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	 end of the list.  To initialise the list the list end is inserted
	 as the only list entry. */
	pxList->pxIndex = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f103 0208 	add.w	r2, r3, #8
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	 ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	 when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t*) &(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f103 0208 	add.w	r2, r3, #8
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = (ListItem_t*) &(pxList->xListEnd);/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f103 0208 	add.w	r2, r3, #8
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = (UBaseType_t) 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList ); listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem) {
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	 configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem ); listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr

080050be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem) {
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]
	ListItem_t *const pxIndex = pxList->pxIndex;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_INTEGRITY( pxList ); listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	 makes the new list item the last item to be removed by a call to
	 listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void*) pxList;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem) {
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	ListItem_t *pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60bb      	str	r3, [r7, #8]
	 new list item should be placed after it.  This ensures that TCB's which are
	 stored in ready lists (all of which have the same xItemValue value) get a
	 share of the CPU.  However, if the xItemValue is the same as the back marker
	 the iteration loop below will not end.  Therefore the value is checked
	 first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800511a:	d103      	bne.n	8005124 <vListInsert+0x20>
		pxIterator = pxList->xListEnd.pxPrevious;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	e00c      	b.n	800513e <vListInsert+0x3a>
		 4) Using a queue or semaphore before it has been initialised or
		 before the scheduler has been started (are interrupts firing
		 before vTaskStartScheduler() has been called?).
		 **********************************************************************/

		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3308      	adds	r3, #8
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	e002      	b.n	8005132 <vListInsert+0x2e>
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
				pxIterator = pxIterator->pxNext) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
				pxIterator->pxNext->xItemValue <= xValueOfInsertion;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
		for (pxIterator = (ListItem_t*) &(pxList->xListEnd);
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d2f6      	bcs.n	800512c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			 insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	 item later. */
	pxNewListItem->pvContainer = (void*) pxList;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	611a      	str	r2, [r3, #16]

	(pxList->uxNumberOfItems)++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove) {
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* The list item knows which list it is in.  Obtain the list from the list
	 item. */
	List_t *const pxList = (List_t*) pxItemToRemove->pvContainer;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6852      	ldr	r2, [r2, #4]
 8005194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d103      	bne.n	80051a8 <uxListRemove+0x34>
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	611a      	str	r2, [r3, #16]
	(pxList->uxNumberOfItems)--;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <xQueueGenericReset>:
		}													\
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset(QueueHandle_t xQueue, BaseType_t xNewQueue) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
	Queue_t *const pxQueue = (Queue_t*) xQueue;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60fb      	str	r3, [r7, #12]

	configASSERT(pxQueue);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xQueueGenericReset+0x2a>
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortRaiseBASEPRI(void) {
	uint32_t ulNewBASEPRI;

	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60bb      	str	r3, [r7, #8]
			"	msr basepri, %0											\n"
			"	isb														\n"
			"	dsb														\n"
			:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80051f2:	f002 f8b3 	bl	800735c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681a      	ldr	r2, [r3, #0]
				+ (pxQueue->uxLength * pxQueue->uxItemSize);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005202:	fb01 f303 	mul.w	r3, r1, r3
 8005206:	441a      	add	r2, r3
		pxQueue->pcTail = pxQueue->pcHead
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t) 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom =
				pxQueue->pcHead
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681a      	ldr	r2, [r3, #0]
						+ ((pxQueue->uxLength - (UBaseType_t) 1U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	3b01      	subs	r3, #1
								* pxQueue->uxItemSize);
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005228:	fb01 f303 	mul.w	r3, r1, r3
						+ ((pxQueue->uxLength - (UBaseType_t) 1U)
 800522c:	441a      	add	r2, r3
		pxQueue->u.pcReadFrom =
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	22ff      	movs	r2, #255	; 0xff
 8005236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	22ff      	movs	r2, #255	; 0xff
 800523e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if (xNewQueue == pdFALSE) {
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d114      	bne.n	8005272 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			 the tasks will remain blocked as after this function exits the queue
			 will still be empty.  If there are tasks blocked waiting to write to
			 the queue, then one should be unblocked as after this function exits
			 it will be possible to write to it. */
			if ( listLIST_IS_EMPTY(
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01a      	beq.n	8005286 <xQueueGenericReset+0xbe>
					&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
				if (xTaskRemoveFromEventList(
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3310      	adds	r3, #16
				if (xTaskRemoveFromEventList(
 8005254:	4618      	mov	r0, r3
 8005256:	f001 f9d7 	bl	8006608 <xTaskRemoveFromEventList>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d012      	beq.n	8005286 <xQueueGenericReset+0xbe>
					queueYIELD_IF_USING_PREEMPTION();
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <xQueueGenericReset+0xcc>)
 8005262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	e009      	b.n	8005286 <xQueueGenericReset+0xbe>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		} else {
			/* Ensure the event queues start in the correct state. */
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3310      	adds	r3, #16
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff fef6 	bl	8005068 <vListInitialise>
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3324      	adds	r3, #36	; 0x24
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fef1 	bl	8005068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005286:	f002 f899 	bl	80073bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	 versions. */
	return pdPASS;
 800528a:	2301      	movs	r3, #1
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueGenericCreateStatic>:

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreateStatic(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, uint8_t *pucQueueStorage,
		StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b08e      	sub	sp, #56	; 0x38
 800529c:	af02      	add	r7, sp, #8
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

	configASSERT(uxQueueLength > (UBaseType_t ) 0);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10a      	bne.n	80052c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xQueueGenericCreateStatic+0x28>

	/* The StaticQueue_t structure and the queue storage area must be
	 supplied. */
	configASSERT(pxStaticQueue != NULL);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericCreateStatic+0x44>

	/* A queue storage area should be provided if the item size is not 0, and
	 should not be provided if the item size is 0. */
	configASSERT(!( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <xQueueGenericCreateStatic+0x52>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <xQueueGenericCreateStatic+0x56>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <xQueueGenericCreateStatic+0x58>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	623b      	str	r3, [r7, #32]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xQueueGenericCreateStatic+0x70>
	configASSERT(!( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <xQueueGenericCreateStatic+0x7e>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <xQueueGenericCreateStatic+0x82>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <xQueueGenericCreateStatic+0x84>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	61fb      	str	r3, [r7, #28]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreateStatic+0x9c>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticQueue_t or StaticSemaphore_t equals the size of
		 the real queue and semaphore structures. */
		volatile size_t xSize = sizeof(StaticQueue_t);
 8005336:	2350      	movs	r3, #80	; 0x50
 8005338:	617b      	str	r3, [r7, #20]
		configASSERT(xSize == sizeof(Queue_t));
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2b50      	cmp	r3, #80	; 0x50
 800533e:	d00a      	beq.n	8005356 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	61bb      	str	r3, [r7, #24]
}
 8005352:	bf00      	nop
 8005354:	e7fe      	b.n	8005354 <xQueueGenericCreateStatic+0xbc>
#endif /* configASSERT_DEFINED */

	/* The address of a statically allocated queue was passed in, use it.
	 The address of a statically allocated storage area was also passed in
	 but is already set. */
	pxNewQueue = (Queue_t*) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (pxNewQueue != NULL) {
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00d      	beq.n	800537c <xQueueGenericCreateStatic+0xe4>
#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
		{
			/* Queues can be allocated wither statically or dynamically, so
			 note this queue was allocated statically in case the queue is
			 later deleted. */
			pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage,
 8005368:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68b9      	ldr	r1, [r7, #8]
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 f843 	bl	8005402 <prvInitialiseNewQueue>
				ucQueueType, pxNewQueue);
	} else {
		traceQUEUE_CREATE_FAILED( ucQueueType );
	}

	return pxNewQueue;
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800537e:	4618      	mov	r0, r3
 8005380:	3730      	adds	r7, #48	; 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

QueueHandle_t xQueueGenericCreate(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, const uint8_t ucQueueType) {
 8005386:	b580      	push	{r7, lr}
 8005388:	b08a      	sub	sp, #40	; 0x28
 800538a:	af02      	add	r7, sp, #8
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	4613      	mov	r3, r2
 8005392:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

	configASSERT(uxQueueLength > (UBaseType_t ) 0);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10a      	bne.n	80053b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	613b      	str	r3, [r7, #16]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <xQueueGenericCreate+0x28>

	if (uxItemSize == (UBaseType_t) 0) {
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <xQueueGenericCreate+0x36>
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = (size_t) 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	e004      	b.n	80053c6 <xQueueGenericCreate+0x40>
	} else {
		/* Allocate enough space to hold the maximum number of items that
		 can be in the queue at any time. */
		xQueueSizeInBytes = (size_t) (uxQueueLength * uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	61fb      	str	r3, [r7, #28]
	}

	pxNewQueue = (Queue_t*) pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3350      	adds	r3, #80	; 0x50
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 f8c6 	bl	800755c <pvPortMalloc>
 80053d0:	61b8      	str	r0, [r7, #24]

	if (pxNewQueue != NULL) {
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <xQueueGenericCreate+0x72>
		/* Jump past the queue structure to find the location of the queue
		 storage area. */
		pucQueueStorage = ((uint8_t*) pxNewQueue) + sizeof(Queue_t);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	3350      	adds	r3, #80	; 0x50
 80053dc:	617b      	str	r3, [r7, #20]
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			/* Queues can be created either statically or dynamically, so
			 note this task was created dynamically in case it is later
			 deleted. */
			pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewQueue(uxQueueLength, uxItemSize, pucQueueStorage,
 80053e6:	79fa      	ldrb	r2, [r7, #7]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f805 	bl	8005402 <prvInitialiseNewQueue>
				ucQueueType, pxNewQueue);
	} else {
		traceQUEUE_CREATE_FAILED( ucQueueType );
	}

	return pxNewQueue;
 80053f8:	69bb      	ldr	r3, [r7, #24]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3720      	adds	r7, #32
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <prvInitialiseNewQueue>:
#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue(const UBaseType_t uxQueueLength,
		const UBaseType_t uxItemSize, uint8_t *pucQueueStorage,
		const uint8_t ucQueueType, Queue_t *pxNewQueue) {
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	 configUSE_TRACE_FACILITY not be set to 1. */
	(void) ucQueueType;

	if (uxItemSize == (UBaseType_t) 0) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d103      	bne.n	800541e <prvInitialiseNewQueue+0x1c>
		/* No RAM was allocated for the queue storage area, but PC head cannot
		 be set to NULL because NULL is used as a key to say the queue is used as
		 a mutex.  Therefore just set pcHead to point to the queue as a benign
		 value that is known to be within the memory map. */
		pxNewQueue->pcHead = (int8_t*) pxNewQueue;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e002      	b.n	8005424 <prvInitialiseNewQueue+0x22>
	} else {
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = (int8_t*) pucQueueStorage;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	 defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
	(void) xQueueGenericReset(pxNewQueue, pdTRUE);
 8005430:	2101      	movs	r1, #1
 8005432:	69b8      	ldr	r0, [r7, #24]
 8005434:	f7ff fec8 	bl	80051c8 <xQueueGenericReset>

#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <xQueueGenericSend>:
#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend(QueueHandle_t xQueue,
		const void *const pvItemToQueue, TickType_t xTicksToWait,
		const BaseType_t xCopyPosition) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b08e      	sub	sp, #56	; 0x38
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
	BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = (Queue_t*) xQueue;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT(pxQueue);
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xQueueGenericSend+0x32>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xQueueGenericSend+0x30>
	configASSERT(
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d103      	bne.n	8005488 <xQueueGenericSend+0x40>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <xQueueGenericSend+0x44>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <xQueueGenericSend+0x46>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10a      	bne.n	80054a8 <xQueueGenericSend+0x60>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054a4:	bf00      	nop
 80054a6:	e7fe      	b.n	80054a6 <xQueueGenericSend+0x5e>
			!( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ));
	configASSERT(
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x6e>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d101      	bne.n	80054ba <xQueueGenericSend+0x72>
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <xQueueGenericSend+0x74>
 80054ba:	2300      	movs	r3, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10a      	bne.n	80054d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	623b      	str	r3, [r7, #32]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xQueueGenericSend+0x8c>
			!( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ));
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 80054d6:	f001 fa5d 	bl	8006994 <xTaskGetSchedulerState>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <xQueueGenericSend+0x9e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <xQueueGenericSend+0xa2>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <xQueueGenericSend+0xa4>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericSend+0xbe>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	61fb      	str	r3, [r7, #28]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericSend+0xbc>

	/* This function relaxes the coding standard somewhat to allow return
	 statements within the function itself.  This is done in the interest
	 of execution time efficiency. */
	for (;;) {
		taskENTER_CRITICAL();
 8005506:	f001 ff29 	bl	800735c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			 highest priority task wanting to access the queue.  If the head item
			 in the queue is to be overwritten then it does not matter if the
			 queue is full. */
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	429a      	cmp	r2, r3
 8005514:	d302      	bcc.n	800551c <xQueueGenericSend+0xd4>
					|| (xCopyPosition == queueOVERWRITE)) {
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d129      	bne.n	8005570 <xQueueGenericSend+0x128>
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue,
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005522:	f000 fa07 	bl	8005934 <prvCopyDataToQueue>
 8005526:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					 queue then unblock it now. */
					if ( listLIST_IS_EMPTY(
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	2b00      	cmp	r3, #0
 800552e:	d010      	beq.n	8005552 <xQueueGenericSend+0x10a>
							&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
						if (xTaskRemoveFromEventList(
								&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	3324      	adds	r3, #36	; 0x24
						if (xTaskRemoveFromEventList(
 8005534:	4618      	mov	r0, r3
 8005536:	f001 f867 	bl	8006608 <xTaskRemoveFromEventList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d013      	beq.n	8005568 <xQueueGenericSend+0x120>
							/* The unblocked task has a priority higher than
							 our own so yield immediately.  Yes it is ok to do
							 this from within the critical section - the kernel
							 takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005540:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	e00a      	b.n	8005568 <xQueueGenericSend+0x120>
						} else {
							mtCOVERAGE_TEST_MARKER();
						}
					} else if (xYieldRequired != pdFALSE) {
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d007      	beq.n	8005568 <xQueueGenericSend+0x120>
						/* This path is a special case that will only get
						 executed if the task was holding multiple mutexes and
						 the mutexes were given back in an order that is
						 different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005558:	4b39      	ldr	r3, [pc, #228]	; (8005640 <xQueueGenericSend+0x1f8>)
 800555a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005568:	f001 ff28 	bl	80073bc <vPortExitCritical>
				return pdPASS;
 800556c:	2301      	movs	r3, #1
 800556e:	e063      	b.n	8005638 <xQueueGenericSend+0x1f0>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <xQueueGenericSend+0x136>
					/* The queue was full and no block time is specified (or
					 the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005576:	f001 ff21 	bl	80073bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					 the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800557a:	2300      	movs	r3, #0
 800557c:	e05c      	b.n	8005638 <xQueueGenericSend+0x1f0>
				} else if (xEntryTimeSet == pdFALSE) {
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <xQueueGenericSend+0x14a>
					/* The queue was full and a block time was specified so
					 configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f8a1 	bl	80066d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800558e:	2301      	movs	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005592:	f001 ff13 	bl	80073bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 now the critical section has been exited. */

		vTaskSuspendAll();
 8005596:	f000 fe0b 	bl	80061b0 <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 800559a:	f001 fedf 	bl	800735c <vPortEnterCritical>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055a4:	b25b      	sxtb	r3, r3
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055aa:	d103      	bne.n	80055b4 <xQueueGenericSend+0x16c>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055ba:	b25b      	sxtb	r3, r3
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c0:	d103      	bne.n	80055ca <xQueueGenericSend+0x182>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ca:	f001 fef7 	bl	80073bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80055ce:	1d3a      	adds	r2, r7, #4
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 f890 	bl	80066fc <xTaskCheckForTimeOut>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d124      	bne.n	800562c <xQueueGenericSend+0x1e4>
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
 80055e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055e4:	f000 fa9e 	bl	8005b24 <prvIsQueueFull>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d018      	beq.n	8005620 <xQueueGenericSend+0x1d8>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend),
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3310      	adds	r3, #16
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 ffb6 	bl	8006568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				 event list.  It is possible that interrupts occurring now
				 remove this task from the event list again - but as the
				 scheduler is suspended the task will go onto the pending
				 ready last instead of the actual ready list. */
				prvUnlockQueue(pxQueue);
 80055fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055fe:	f000 fa29 	bl	8005a54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				 ready list into the ready list - so it is feasible that this
				 task is already in a ready list before it yields - in which
				 case the yield will not cause a context switch unless there
				 is also a higher priority task in the pending ready list. */
				if (xTaskResumeAll() == pdFALSE) {
 8005602:	f000 fde3 	bl	80061cc <xTaskResumeAll>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	f47f af7c 	bne.w	8005506 <xQueueGenericSend+0xbe>
					portYIELD_WITHIN_API()
 800560e:	4b0c      	ldr	r3, [pc, #48]	; (8005640 <xQueueGenericSend+0x1f8>)
 8005610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	e772      	b.n	8005506 <xQueueGenericSend+0xbe>
					;
				}
			} else {
				/* Try again. */
				prvUnlockQueue(pxQueue);
 8005620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005622:	f000 fa17 	bl	8005a54 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8005626:	f000 fdd1 	bl	80061cc <xTaskResumeAll>
 800562a:	e76c      	b.n	8005506 <xQueueGenericSend+0xbe>
			}
		} else {
			/* The timeout has expired. */
			prvUnlockQueue(pxQueue);
 800562c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800562e:	f000 fa11 	bl	8005a54 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8005632:	f000 fdcb 	bl	80061cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005636:	2300      	movs	r3, #0
		}
	}
}
 8005638:	4618      	mov	r0, r3
 800563a:	3738      	adds	r7, #56	; 0x38
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR(QueueHandle_t xQueue,
		const void *const pvItemToQueue,
		BaseType_t *const pxHigherPriorityTaskWoken,
		const BaseType_t xCopyPosition) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	; 0x38
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;
	UBaseType_t uxSavedInterruptStatus;
	Queue_t *const pxQueue = (Queue_t*) xQueue;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT(pxQueue);
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueGenericSendFromISR+0x2c>
	configASSERT(
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <xQueueGenericSendFromISR+0x3c>
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <xQueueGenericSendFromISR+0x40>
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <xQueueGenericSendFromISR+0x42>
 8005684:	2300      	movs	r3, #0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10a      	bne.n	80056a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	623b      	str	r3, [r7, #32]
}
 800569c:	bf00      	nop
 800569e:	e7fe      	b.n	800569e <xQueueGenericSendFromISR+0x5a>
			!( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ));
	configASSERT(
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <xQueueGenericSendFromISR+0x6a>
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <xQueueGenericSendFromISR+0x6e>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <xQueueGenericSendFromISR+0x70>
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	61fb      	str	r3, [r7, #28]
}
 80056ca:	bf00      	nop
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericSendFromISR+0x88>
	 that have been assigned a priority at or (logically) below the maximum
	 system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	 safe API to ensure interrupt entry is as fast and as simple as possible.
	 More information (albeit Cortex-M specific) is provided on the following
	 link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056ce:	f001 ff07 	bl	80074e0 <vPortValidateInterruptPriority>
/*-----------------------------------------------------------*/

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI(void) {
	uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056d2:	f3ef 8211 	mrs	r2, BASEPRI
 80056d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	61ba      	str	r2, [r7, #24]
 80056e8:	617b      	str	r3, [r7, #20]
			:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	 warnings. */
	return ulOriginalBASEPRI;
 80056ea:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	 in the queue.  Also don't directly wake a task that was blocked on a queue
	 read, instead return a flag to say whether a context switch is required or
	 not (i.e. has a task with a higher priority than us been woken by this
	 post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength)
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d302      	bcc.n	8005700 <xQueueGenericSendFromISR+0xbc>
				|| (xCopyPosition == queueOVERWRITE)) {
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d12c      	bne.n	800575a <xQueueGenericSendFromISR+0x116>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			 semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			 in a task disinheriting a priority and prvCopyDataToQueue() can be
			 called here even though the disinherit function does not check if
			 the scheduler is suspended before accessing the ready lists. */
			(void) prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	68b9      	ldr	r1, [r7, #8]
 800570e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005710:	f000 f910 	bl	8005934 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			 be done when the queue is unlocked later. */
			if (cTxLock == queueUNLOCKED) {
 8005714:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571c:	d112      	bne.n	8005744 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if ( listLIST_IS_EMPTY(
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d016      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
							&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
						if (xTaskRemoveFromEventList(
								&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	3324      	adds	r3, #36	; 0x24
						if (xTaskRemoveFromEventList(
 800572a:	4618      	mov	r0, r3
 800572c:	f000 ff6c 	bl	8006608 <xTaskRemoveFromEventList>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00e      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
							/* The task waiting has a higher priority so record that a
							 context	switch is required. */
							if (pxHigherPriorityTaskWoken != NULL) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <xQueueGenericSendFromISR+0x110>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e007      	b.n	8005754 <xQueueGenericSendFromISR+0x110>
				}
#endif /* configUSE_QUEUE_SETS */
			} else {
				/* Increment the lock count so the task that unlocks the queue
				 knows that data was posted while it was locked. */
				pxQueue->cTxLock = (int8_t) (cTxLock + 1);
 8005744:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005748:	3301      	adds	r3, #1
 800574a:	b2db      	uxtb	r3, r3
 800574c:	b25a      	sxtb	r2, r3
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005754:	2301      	movs	r3, #1
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
				|| (xCopyPosition == queueOVERWRITE)) {
 8005758:	e001      	b.n	800575e <xQueueGenericSendFromISR+0x11a>
		} else {
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800575a:	2300      	movs	r3, #0
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005760:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue) {
	__asm volatile
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f383 8811 	msr	BASEPRI, r3
	(
			"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR(uxSavedInterruptStatus);

	return xReturn;
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800576c:	4618      	mov	r0, r3
 800576e:	3738      	adds	r7, #56	; 0x38
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive(QueueHandle_t xQueue, void *const pvBuffer,
		TickType_t xTicksToWait) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
	BaseType_t xEntryTimeSet = pdFALSE;
 8005780:	2300      	movs	r3, #0
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
	TimeOut_t xTimeOut;
	Queue_t *const pxQueue = (Queue_t*) xQueue;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT((pxQueue));
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10a      	bne.n	80057a4 <xQueueReceive+0x30>
	__asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	623b      	str	r3, [r7, #32]
}
 80057a0:	bf00      	nop
 80057a2:	e7fe      	b.n	80057a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	 is zero (so no data is copied into the buffer. */
	configASSERT(
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <xQueueReceive+0x3e>
 80057aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <xQueueReceive+0x42>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <xQueueReceive+0x44>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xQueueReceive+0x5e>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	61fb      	str	r3, [r7, #28]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xQueueReceive+0x5c>
			!( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ));

	/* Cannot block if the scheduler is suspended. */
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT(
 80057d2:	f001 f8df 	bl	8006994 <xTaskGetSchedulerState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <xQueueReceive+0x6e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xQueueReceive+0x72>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xQueueReceive+0x74>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueReceive+0x8e>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61bb      	str	r3, [r7, #24]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueReceive+0x8c>
	/* This function relaxes the coding standard somewhat to allow return
	 statements within the function itself.  This is done in the interest
	 of execution time efficiency. */

	for (;;) {
		taskENTER_CRITICAL();
 8005802:	f001 fdab 	bl	800735c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			 must be the highest priority task wanting to access the queue. */
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01f      	beq.n	8005852 <xQueueReceive+0xde>
				/* Data available, remove one item. */
				prvCopyDataFromQueue(pxQueue, pvBuffer);
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005816:	f000 f8f7 	bl	8005a08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
						- (UBaseType_t) 1;
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1e5a      	subs	r2, r3, #1
				pxQueue->uxMessagesWaiting = uxMessagesWaiting
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				 post to the queue?  If so, unblock the highest priority waiting
				 task. */
				if ( listLIST_IS_EMPTY(
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00f      	beq.n	800584a <xQueueReceive+0xd6>
						&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	3310      	adds	r3, #16
					if (xTaskRemoveFromEventList(
 800582e:	4618      	mov	r0, r3
 8005830:	f000 feea 	bl	8006608 <xTaskRemoveFromEventList>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <xQueueReceive+0xd6>
						queueYIELD_IF_USING_PREEMPTION();
 800583a:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <xQueueReceive+0x1bc>)
 800583c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	f3bf 8f6f 	isb	sy
					}
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800584a:	f001 fdb7 	bl	80073bc <vPortExitCritical>
				return pdPASS;
 800584e:	2301      	movs	r3, #1
 8005850:	e069      	b.n	8005926 <xQueueReceive+0x1b2>
			} else {
				if (xTicksToWait == (TickType_t) 0) {
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <xQueueReceive+0xec>
					/* The queue was empty and no block time is specified (or
					 the block time has expired) so leave now. */
					taskEXIT_CRITICAL(); traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005858:	f001 fdb0 	bl	80073bc <vPortExitCritical>
					return errQUEUE_EMPTY;
 800585c:	2300      	movs	r3, #0
 800585e:	e062      	b.n	8005926 <xQueueReceive+0x1b2>
				} else if (xEntryTimeSet == pdFALSE) {
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <xQueueReceive+0x100>
					/* The queue was empty and a block time was specified so
					 configure the timeout structure. */
					vTaskInternalSetTimeOutState(&xTimeOut);
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	4618      	mov	r0, r3
 800586c:	f000 ff30 	bl	80066d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005874:	f001 fda2 	bl	80073bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		 now the critical section has been exited. */

		vTaskSuspendAll();
 8005878:	f000 fc9a 	bl	80061b0 <vTaskSuspendAll>
		prvLockQueue(pxQueue);
 800587c:	f001 fd6e 	bl	800735c <vPortEnterCritical>
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005886:	b25b      	sxtb	r3, r3
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588c:	d103      	bne.n	8005896 <xQueueReceive+0x122>
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589c:	b25b      	sxtb	r3, r3
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a2:	d103      	bne.n	80058ac <xQueueReceive+0x138>
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058ac:	f001 fd86 	bl	80073bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
 80058b0:	1d3a      	adds	r2, r7, #4
 80058b2:	f107 0310 	add.w	r3, r7, #16
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 ff1f 	bl	80066fc <xTaskCheckForTimeOut>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d123      	bne.n	800590c <xQueueReceive+0x198>
			/* The timeout has not expired.  If the queue is still empty place
			 the task on the list of tasks waiting to receive from the queue. */
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 80058c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058c6:	f000 f917 	bl	8005af8 <prvIsQueueEmpty>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <xQueueReceive+0x18c>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive),
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	3324      	adds	r3, #36	; 0x24
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f000 fe45 	bl	8006568 <vTaskPlaceOnEventList>
						xTicksToWait);
				prvUnlockQueue(pxQueue);
 80058de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e0:	f000 f8b8 	bl	8005a54 <prvUnlockQueue>
				if (xTaskResumeAll() == pdFALSE) {
 80058e4:	f000 fc72 	bl	80061cc <xTaskResumeAll>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d189      	bne.n	8005802 <xQueueReceive+0x8e>
					portYIELD_WITHIN_API()
 80058ee:	4b10      	ldr	r3, [pc, #64]	; (8005930 <xQueueReceive+0x1bc>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	e780      	b.n	8005802 <xQueueReceive+0x8e>
					mtCOVERAGE_TEST_MARKER();
				}
			} else {
				/* The queue contains data again.  Loop back to try and read the
				 data. */
				prvUnlockQueue(pxQueue);
 8005900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005902:	f000 f8a7 	bl	8005a54 <prvUnlockQueue>
				(void) xTaskResumeAll();
 8005906:	f000 fc61 	bl	80061cc <xTaskResumeAll>
 800590a:	e77a      	b.n	8005802 <xQueueReceive+0x8e>
			}
		} else {
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			 back and attempt to read the data. */
			prvUnlockQueue(pxQueue);
 800590c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800590e:	f000 f8a1 	bl	8005a54 <prvUnlockQueue>
			(void) xTaskResumeAll();
 8005912:	f000 fc5b 	bl	80061cc <xTaskResumeAll>

			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
 8005916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005918:	f000 f8ee 	bl	8005af8 <prvIsQueueEmpty>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	f43f af6f 	beq.w	8005802 <xQueueReceive+0x8e>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005924:	2300      	movs	r3, #0
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005926:	4618      	mov	r0, r3
 8005928:	3730      	adds	r7, #48	; 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue(Queue_t *const pxQueue,
		const void *pvItemToQueue, const BaseType_t xPosition) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005940:	2300      	movs	r3, #0
 8005942:	617b      	str	r3, [r7, #20]
	UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	613b      	str	r3, [r7, #16]

	if (pxQueue->uxItemSize == (UBaseType_t) 0) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10d      	bne.n	800596e <prvCopyDataToQueue+0x3a>
#if ( configUSE_MUTEXES == 1 )
		{
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d14d      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit(
						(void*) pxQueue->pxMutexHolder);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	685b      	ldr	r3, [r3, #4]
				xReturn = xTaskPriorityDisinherit(
 800595e:	4618      	mov	r0, r3
 8005960:	f001 f836 	bl	80069d0 <xTaskPriorityDisinherit>
 8005964:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	e043      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}
#endif /* configUSE_MUTEXES */
	} else if (xPosition == queueSEND_TO_BACK) {
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d119      	bne.n	80059a8 <prvCopyDataToQueue+0x74>
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6898      	ldr	r0, [r3, #8]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pxQueue->pcWriteTo, pvItemToQueue,
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	f002 f97a 	bl	8007c78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	441a      	add	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	609a      	str	r2, [r3, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	429a      	cmp	r2, r3
 800599c:	d32b      	bcc.n	80059f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	609a      	str	r2, [r3, #8]
 80059a6:	e026      	b.n	80059f6 <prvCopyDataToQueue+0xc2>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		(void) memcpy((void*) pxQueue->u.pcReadFrom, pvItemToQueue,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68d8      	ldr	r0, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pxQueue->u.pcReadFrom, pvItemToQueue,
 80059b0:	461a      	mov	r2, r3
 80059b2:	68b9      	ldr	r1, [r7, #8]
 80059b4:	f002 f960 	bl	8007c78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	425b      	negs	r3, r3
 80059c2:	441a      	add	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom < pxQueue->pcHead) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d207      	bcs.n	80059e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	425b      	negs	r3, r3
 80059de:	441a      	add	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}

		if (xPosition == queueOVERWRITE) {
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d105      	bne.n	80059f6 <prvCopyDataToQueue+0xc2>
			if (uxMessagesWaiting > (UBaseType_t) 0) {
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <prvCopyDataToQueue+0xc2>
				/* An item is not being added but overwritten, so subtract
				 one from the recorded number of items in the queue so when
				 one is added again below the number of recorded items remains
				 correct. */
				--uxMessagesWaiting;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	613b      	str	r3, [r7, #16]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t) 1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059fe:	697b      	ldr	r3, [r7, #20]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue(Queue_t *const pxQueue, void *const pvBuffer) {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
	if (pxQueue->uxItemSize != (UBaseType_t) 0) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d018      	beq.n	8005a4c <prvCopyDataFromQueue+0x44>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	441a      	add	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	60da      	str	r2, [r3, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d303      	bcc.n	8005a3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60da      	str	r2, [r3, #12]
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.pcReadFrom,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68d9      	ldr	r1, [r3, #12]
				(size_t) pxQueue->uxItemSize); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
		(void) memcpy((void*) pvBuffer, (void*) pxQueue->u.pcReadFrom,
 8005a44:	461a      	mov	r2, r3
 8005a46:	6838      	ldr	r0, [r7, #0]
 8005a48:	f002 f916 	bl	8007c78 <memcpy>
	}
}
 8005a4c:	bf00      	nop
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue(Queue_t *const pxQueue) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	 removed from the queue while the queue was locked.  When a queue is
	 locked items can be added or removed, but the event lists cannot be
	 updated. */
	taskENTER_CRITICAL();
 8005a5c:	f001 fc7e 	bl	800735c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8005a68:	e011      	b.n	8005a8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				 the pending ready list as the scheduler is still suspended. */
				if ( listLIST_IS_EMPTY(
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d012      	beq.n	8005a98 <prvUnlockQueue+0x44>
						&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
					if (xTaskRemoveFromEventList(
							&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3324      	adds	r3, #36	; 0x24
					if (xTaskRemoveFromEventList(
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fdc6 	bl	8006608 <xTaskRemoveFromEventList>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d001      	beq.n	8005a86 <prvUnlockQueue+0x32>
						/* The task waiting has a higher priority so record that
						 a context switch is required. */
						vTaskMissedYield();
 8005a82:	f000 fe9d 	bl	80067c0 <vTaskMissedYield>
					break;
				}
			}
#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	73fb      	strb	r3, [r7, #15]
		while (cTxLock > queueLOCKED_UNMODIFIED) {
 8005a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dce9      	bgt.n	8005a6a <prvUnlockQueue+0x16>
 8005a96:	e000      	b.n	8005a9a <prvUnlockQueue+0x46>
					break;
 8005a98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	22ff      	movs	r2, #255	; 0xff
 8005a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005aa2:	f001 fc8b 	bl	80073bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005aa6:	f001 fc59 	bl	800735c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab0:	73bb      	strb	r3, [r7, #14]

		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8005ab2:	e011      	b.n	8005ad8 <prvUnlockQueue+0x84>
			if ( listLIST_IS_EMPTY(
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d012      	beq.n	8005ae2 <prvUnlockQueue+0x8e>
					&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
				if (xTaskRemoveFromEventList(
						&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3310      	adds	r3, #16
				if (xTaskRemoveFromEventList(
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fda1 	bl	8006608 <xTaskRemoveFromEventList>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <prvUnlockQueue+0x7c>
					vTaskMissedYield();
 8005acc:	f000 fe78 	bl	80067c0 <vTaskMissedYield>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	73bb      	strb	r3, [r7, #14]
		while (cRxLock > queueLOCKED_UNMODIFIED) {
 8005ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dce9      	bgt.n	8005ab4 <prvUnlockQueue+0x60>
 8005ae0:	e000      	b.n	8005ae4 <prvUnlockQueue+0x90>
			} else {
				break;
 8005ae2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005aec:	f001 fc66 	bl	80073bc <vPortExitCritical>
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b00:	f001 fc2c 	bl	800735c <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d102      	bne.n	8005b12 <prvIsQueueEmpty+0x1a>
			xReturn = pdTRUE;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e001      	b.n	8005b16 <prvIsQueueEmpty+0x1e>
		} else {
			xReturn = pdFALSE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b16:	f001 fc51 	bl	80073bc <vPortExitCritical>

	return xReturn;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <prvIsQueueFull>:

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull(const Queue_t *pxQueue) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b2c:	f001 fc16 	bl	800735c <vPortEnterCritical>
	{
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d102      	bne.n	8005b42 <prvIsQueueFull+0x1e>
			xReturn = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e001      	b.n	8005b46 <prvIsQueueFull+0x22>
		} else {
			xReturn = pdFALSE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b46:	f001 fc39 	bl	80073bc <vPortExitCritical>

	return xReturn;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

void vQueueAddToRegistry(QueueHandle_t xQueue, const char *pcQueueName) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

	/* See if there is an empty space in the registry.  A NULL name denotes
	 a free slot. */
	for (ux = (UBaseType_t) 0U; ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e014      	b.n	8005b8e <vQueueAddToRegistry+0x3a>
			ux++) {
		if (xQueueRegistry[ux].pcQueueName == NULL) {
 8005b64:	4a0e      	ldr	r2, [pc, #56]	; (8005ba0 <vQueueAddToRegistry+0x4c>)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <vQueueAddToRegistry+0x34>
			/* Store the information on this queue. */
			xQueueRegistry[ux].pcQueueName = pcQueueName;
 8005b70:	490b      	ldr	r1, [pc, #44]	; (8005ba0 <vQueueAddToRegistry+0x4c>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			xQueueRegistry[ux].xHandle = xQueue;
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <vQueueAddToRegistry+0x4c>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

			traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
			break;
 8005b86:	e006      	b.n	8005b96 <vQueueAddToRegistry+0x42>
			ux++) {
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
	for (ux = (UBaseType_t) 0U; ux < (UBaseType_t) configQUEUE_REGISTRY_SIZE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b07      	cmp	r3, #7
 8005b92:	d9e7      	bls.n	8005b64 <vQueueAddToRegistry+0x10>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	200009b0 	.word	0x200009b0

08005ba4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

void vQueueWaitForMessageRestricted(QueueHandle_t xQueue,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
	Queue_t *const pxQueue = (Queue_t*) xQueue;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	617b      	str	r3, [r7, #20]
	 will not actually cause the task to block, just place it on a blocked
	 list.  It will not block until the scheduler is unlocked - at which
	 time a yield will be performed.  If an item is added to the queue while
	 the queue is locked, and the calling task blocks on the queue, then the
	 calling task will be immediately unblocked when the queue is unlocked. */
	prvLockQueue(pxQueue);
 8005bb4:	f001 fbd2 	bl	800735c <vPortEnterCritical>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bbe:	b25b      	sxtb	r3, r3
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc4:	d103      	bne.n	8005bce <vQueueWaitForMessageRestricted+0x2a>
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd4:	b25b      	sxtb	r3, r3
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bda:	d103      	bne.n	8005be4 <vQueueWaitForMessageRestricted+0x40>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be4:	f001 fbea 	bl	80073bc <vPortExitCritical>
	if (pxQueue->uxMessagesWaiting == (UBaseType_t) 0U) {
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d106      	bne.n	8005bfe <vQueueWaitForMessageRestricted+0x5a>
		/* There is nothing in the queue, block for the specified period. */
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive),
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	3324      	adds	r3, #36	; 0x24
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fcd9 	bl	80065b0 <vTaskPlaceOnEventListRestricted>
				xTicksToWait, xWaitIndefinitely);
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
	prvUnlockQueue(pxQueue);
 8005bfe:	6978      	ldr	r0, [r7, #20]
 8005c00:	f7ff ff28 	bl	8005a54 <prvUnlockQueue>
}
 8005c04:	bf00      	nop
 8005c06:	3718      	adds	r7, #24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <xTaskCreateStatic>:

TaskHandle_t xTaskCreateStatic(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, StackType_t *const puxStackBuffer,
		StaticTask_t *const pxTaskBuffer) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b08e      	sub	sp, #56	; 0x38
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

	configASSERT(puxStackBuffer != NULL);
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10a      	bne.n	8005c36 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	623b      	str	r3, [r7, #32]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xTaskCreateStatic+0x28>
	configASSERT(pxTaskBuffer != NULL);
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	61fb      	str	r3, [r7, #28]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTaskCreateStatic+0x44>
#if( configASSERT_DEFINED == 1 )
	{
		/* Sanity check that the size of the structure used to declare a
		 variable of type StaticTask_t equals the size of the real task
		 structure. */
		volatile size_t xSize = sizeof(StaticTask_t);
 8005c52:	23bc      	movs	r3, #188	; 0xbc
 8005c54:	613b      	str	r3, [r7, #16]
		configASSERT(xSize == sizeof(TCB_t));
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2bbc      	cmp	r3, #188	; 0xbc
 8005c5a:	d00a      	beq.n	8005c72 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61bb      	str	r3, [r7, #24]
}
 8005c6e:	bf00      	nop
 8005c70:	e7fe      	b.n	8005c70 <xTaskCreateStatic+0x64>
	}
#endif /* configASSERT_DEFINED */

	if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL)) {
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01e      	beq.n	8005cb6 <xTaskCreateStatic+0xaa>
 8005c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01b      	beq.n	8005cb6 <xTaskCreateStatic+0xaa>
		/* The memory used for the task's TCB and stack are passed into this
		 function - use them. */
		pxNewTCB = (TCB_t*) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
		pxNewTCB->pxStack = (StackType_t*) puxStackBuffer;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30

#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created statically in case the task is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
					tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters,
 8005c90:	2300      	movs	r3, #0
 8005c92:	9303      	str	r3, [sp, #12]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	f107 0314 	add.w	r3, r7, #20
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68b9      	ldr	r1, [r7, #8]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f851 	bl	8005d50 <prvInitialiseNewTask>
				uxPriority, &xReturn, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8005cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cb0:	f000 f8ec 	bl	8005e8c <prvAddNewTaskToReadyList>
 8005cb4:	e001      	b.n	8005cba <xTaskCreateStatic+0xae>
	} else {
		xReturn = NULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cba:	697b      	ldr	r3, [r7, #20]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3728      	adds	r7, #40	; 0x28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <xTaskCreate>:

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

BaseType_t xTaskCreate(TaskFunction_t pxTaskCode, const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
const configSTACK_DEPTH_TYPE usStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08c      	sub	sp, #48	; 0x30
 8005cc8:	af04      	add	r7, sp, #16
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	80fb      	strh	r3, [r7, #6]
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = (StackType_t*) pvPortMalloc(
				(((size_t) usStackDepth) * sizeof(StackType_t))); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
		pxStack = (StackType_t*) pvPortMalloc(
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f001 fc3f 	bl	800755c <pvPortMalloc>
 8005cde:	6178      	str	r0, [r7, #20]

		if (pxStack != NULL) {
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00e      	beq.n	8005d04 <xTaskCreate+0x40>
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t*) pvPortMalloc(sizeof(TCB_t)); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ce6:	20bc      	movs	r0, #188	; 0xbc
 8005ce8:	f001 fc38 	bl	800755c <pvPortMalloc>
 8005cec:	61f8      	str	r0, [r7, #28]

			if (pxNewTCB != NULL) {
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <xTaskCreate+0x38>
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfa:	e005      	b.n	8005d08 <xTaskCreate+0x44>
			} else {
				/* The stack cannot be used as the TCB was not created.  Free
				 it again. */
				vPortFree(pxStack);
 8005cfc:	6978      	ldr	r0, [r7, #20]
 8005cfe:	f001 fcf1 	bl	80076e4 <vPortFree>
 8005d02:	e001      	b.n	8005d08 <xTaskCreate+0x44>
			}
		} else {
			pxNewTCB = NULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL) {
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d017      	beq.n	8005d3e <xTaskCreate+0x7a>
#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
			 task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated =
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
					tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t) usStackDepth,
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9303      	str	r3, [sp, #12]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	9302      	str	r3, [sp, #8]
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f80f 	bl	8005d50 <prvInitialiseNewTask>
				pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
		prvAddNewTaskToReadyList(pxNewTCB);
 8005d32:	69f8      	ldr	r0, [r7, #28]
 8005d34:	f000 f8aa 	bl	8005e8c <prvAddNewTaskToReadyList>
		xReturn = pdPASS;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e002      	b.n	8005d44 <xTaskCreate+0x80>
	} else {
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d42:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
 8005d44:	69bb      	ldr	r3, [r7, #24]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <prvInitialiseNewTask>:

static void prvInitialiseNewTask(TaskFunction_t pxTaskCode,
		const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
		const uint32_t ulStackDepth, void *const pvParameters,
		UBaseType_t uxPriority, TaskHandle_t *const pxCreatedTask,
		TCB_t *pxNewTCB, const MemoryRegion_t *const xRegions) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		(void) memset(pxNewTCB->pxStack, (int) tskSTACK_FILL_BYTE,
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	461a      	mov	r2, r3
 8005d68:	21a5      	movs	r1, #165	; 0xa5
 8005d6a:	f001 ff93 	bl	8007c94 <memset>
	 grows from high memory to low (as per the 80x86) or vice versa.
	 portSTACK_GROWTH is used to make the result positive or negative as required
	 by the port. */
#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t) 1);
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 8005d80:	69bb      	ldr	r3, [r7, #24]
				& (~(( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK))); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d82:	f023 0307 	bic.w	r3, r3, #7
		pxTopOfStack = (StackType_t*) ((( portPOINTER_SIZE_TYPE ) pxTopOfStack)
 8005d86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT(
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00a      	beq.n	8005da8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	617b      	str	r3, [r7, #20]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN; x++) {
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e012      	b.n	8005dd4 <prvInitialiseNewTask+0x84>
		pxNewTCB->pcTaskName[x] = pcName[x];
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	7819      	ldrb	r1, [r3, #0]
 8005db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	3334      	adds	r3, #52	; 0x34
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		 configMAX_TASK_NAME_LEN characters just in case the memory after the
		 string is not accessible (extremely unlikely). */
		if (pcName[x] == 0x00) {
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <prvInitialiseNewTask+0x8c>
	for (x = (UBaseType_t) 0; x < (UBaseType_t) configMAX_TASK_NAME_LEN; x++) {
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b0f      	cmp	r3, #15
 8005dd8:	d9e9      	bls.n	8005dae <prvInitialiseNewTask+0x5e>
 8005dda:	e000      	b.n	8005dde <prvInitialiseNewTask+0x8e>
			break;
 8005ddc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	 was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1] = '\0';
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	 remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t) configMAX_PRIORITIES) {
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	2b37      	cmp	r3, #55	; 0x37
 8005dea:	d901      	bls.n	8005df0 <prvInitialiseNewTask+0xa0>
		uxPriority = (UBaseType_t) configMAX_PRIORITIES - (UBaseType_t) 1U;
 8005dec:	2337      	movs	r3, #55	; 0x37
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c
#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2200      	movs	r2, #0
 8005e00:	651a      	str	r2, [r3, #80]	; 0x50
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	3304      	adds	r3, #4
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff f94d 	bl	80050a6 <vListInitialiseItem>
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	3318      	adds	r3, #24
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff f948 	bl	80050a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	 back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem),
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	619a      	str	r2, [r3, #24]
			( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
#endif

#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR((&(pxNewTCB->xNewLib_reent)));
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	3354      	adds	r3, #84	; 0x54
 8005e40:	2260      	movs	r2, #96	; 0x60
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 ff25 	bl	8007c94 <memset>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	4a0c      	ldr	r2, [pc, #48]	; (8005e80 <prvInitialiseNewTask+0x130>)
 8005e4e:	659a      	str	r2, [r3, #88]	; 0x58
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <prvInitialiseNewTask+0x134>)
 8005e54:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	4a0b      	ldr	r2, [pc, #44]	; (8005e88 <prvInitialiseNewTask+0x138>)
 8005e5a:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode,
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	69b8      	ldr	r0, [r7, #24]
 8005e62:	f001 f989 	bl	8007178 <pxPortInitialiseStack>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6a:	601a      	str	r2, [r3, #0]
				pvParameters);
	}
#endif /* portUSING_MPU_WRAPPERS */

	if ((void*) pxCreatedTask != NULL) {
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <prvInitialiseNewTask+0x128>
		/* Pass the handle out in an anonymous way.  The handle can be used to
		 change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t) pxNewTCB;
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e76:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e78:	bf00      	nop
 8005e7a:	3720      	adds	r7, #32
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	08008628 	.word	0x08008628
 8005e84:	08008648 	.word	0x08008648
 8005e88:	08008608 	.word	0x08008608

08005e8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	 updated. */
	taskENTER_CRITICAL();
 8005e94:	f001 fa62 	bl	800735c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e98:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <prvAddNewTaskToReadyList+0xc4>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <prvAddNewTaskToReadyList+0xc4>)
 8005ea0:	6013      	str	r3, [r2, #0]
		if (pxCurrentTCB == NULL) {
 8005ea2:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <prvAddNewTaskToReadyList+0xc8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <prvAddNewTaskToReadyList+0x32>
			/* There are no other tasks, or all the other tasks are in
			 the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eaa:	4a2a      	ldr	r2, [pc, #168]	; (8005f54 <prvAddNewTaskToReadyList+0xc8>)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6013      	str	r3, [r2, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t) 1) {
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <prvAddNewTaskToReadyList+0xc4>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d110      	bne.n	8005eda <prvAddNewTaskToReadyList+0x4e>
				/* This is the first task to be created so do the preliminary
				 initialisation required.  We will not recover if this call
				 fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005eb8:	f000 fca6 	bl	8006808 <prvInitialiseTaskLists>
 8005ebc:	e00d      	b.n	8005eda <prvAddNewTaskToReadyList+0x4e>
			}
		} else {
			/* If the scheduler is not already running, make this task the
			 current task if it is the highest priority task to be created
			 so far. */
			if (xSchedulerRunning == pdFALSE) {
 8005ebe:	4b26      	ldr	r3, [pc, #152]	; (8005f58 <prvAddNewTaskToReadyList+0xcc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d109      	bne.n	8005eda <prvAddNewTaskToReadyList+0x4e>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
 8005ec6:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <prvAddNewTaskToReadyList+0xc8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d802      	bhi.n	8005eda <prvAddNewTaskToReadyList+0x4e>
					pxCurrentTCB = pxNewTCB;
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <prvAddNewTaskToReadyList+0xc8>)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6013      	str	r3, [r2, #0]
			} else {
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005eda:	4b20      	ldr	r3, [pc, #128]	; (8005f5c <prvAddNewTaskToReadyList+0xd0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <prvAddNewTaskToReadyList+0xd0>)
 8005ee2:	6013      	str	r3, [r2, #0]

#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ee4:	4b1d      	ldr	r3, [pc, #116]	; (8005f5c <prvAddNewTaskToReadyList+0xd0>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	645a      	str	r2, [r3, #68]	; 0x44
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList(pxNewTCB);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <prvAddNewTaskToReadyList+0xd4>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <prvAddNewTaskToReadyList+0x74>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a18      	ldr	r2, [pc, #96]	; (8005f60 <prvAddNewTaskToReadyList+0xd4>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <prvAddNewTaskToReadyList+0xd8>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7ff f8d1 	bl	80050be <vListInsertEnd>

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
 8005f1c:	f001 fa4e 	bl	80073bc <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE) {
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <prvAddNewTaskToReadyList+0xcc>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00e      	beq.n	8005f46 <prvAddNewTaskToReadyList+0xba>
		/* If the created task is of a higher priority than the current task
		 then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddNewTaskToReadyList+0xc8>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d207      	bcs.n	8005f46 <prvAddNewTaskToReadyList+0xba>
			taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvAddNewTaskToReadyList+0xdc>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
			mtCOVERAGE_TEST_MARKER();
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000ec4 	.word	0x20000ec4
 8005f54:	200009f0 	.word	0x200009f0
 8005f58:	20000ed0 	.word	0x20000ed0
 8005f5c:	20000ee0 	.word	0x20000ee0
 8005f60:	20000ecc 	.word	0x20000ecc
 8005f64:	200009f4 	.word	0x200009f4
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

void vTaskDelayUntil(TickType_t *const pxPreviousWakeTime,
		const TickType_t xTimeIncrement) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005f76:	2300      	movs	r3, #0
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24

	configASSERT(pxPreviousWakeTime);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <vTaskDelayUntil+0x2a>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	617b      	str	r3, [r7, #20]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <vTaskDelayUntil+0x28>
	configASSERT((xTimeIncrement > 0U));
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <vTaskDelayUntil+0x46>
	__asm volatile
 8005f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	613b      	str	r3, [r7, #16]
}
 8005fae:	bf00      	nop
 8005fb0:	e7fe      	b.n	8005fb0 <vTaskDelayUntil+0x44>
	configASSERT(uxSchedulerSuspended == 0);
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	; (800605c <vTaskDelayUntil+0xf0>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <vTaskDelayUntil+0x64>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vTaskDelayUntil+0x62>

	vTaskSuspendAll();
 8005fd0:	f000 f8ee 	bl	80061b0 <vTaskSuspendAll>
	{
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fd4:	4b22      	ldr	r3, [pc, #136]	; (8006060 <vTaskDelayUntil+0xf4>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	623b      	str	r3, [r7, #32]

		/* Generate the tick time at which the task wants to wake. */
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	61fb      	str	r3, [r7, #28]

		if (xConstTickCount < *pxPreviousWakeTime) {
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d20b      	bcs.n	8006006 <vTaskDelayUntil+0x9a>
			/* The tick count has overflowed since this function was
			 lasted called.  In this case the only time we should ever
			 actually delay is if the wake time has also	overflowed,
			 and the wake time is greater than the tick time.  When this
			 is the case it is as if neither time had overflowed. */
			if ((xTimeToWake < *pxPreviousWakeTime)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d211      	bcs.n	800601c <vTaskDelayUntil+0xb0>
					&& (xTimeToWake > xConstTickCount)) {
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d90d      	bls.n	800601c <vTaskDelayUntil+0xb0>
				xShouldDelay = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	e00a      	b.n	800601c <vTaskDelayUntil+0xb0>
			}
		} else {
			/* The tick time has not overflowed.  In this case we will
			 delay if either the wake time has overflowed, and/or the
			 tick time is less than the wake time. */
			if ((xTimeToWake < *pxPreviousWakeTime)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	429a      	cmp	r2, r3
 800600e:	d303      	bcc.n	8006018 <vTaskDelayUntil+0xac>
					|| (xTimeToWake > xConstTickCount)) {
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	429a      	cmp	r2, r3
 8006016:	d901      	bls.n	800601c <vTaskDelayUntil+0xb0>
				xShouldDelay = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
				mtCOVERAGE_TEST_MARKER();
			}
		}

		/* Update the wake time ready for the next call. */
		*pxPreviousWakeTime = xTimeToWake;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	601a      	str	r2, [r3, #0]

		if (xShouldDelay != pdFALSE) {
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	d006      	beq.n	8006036 <vTaskDelayUntil+0xca>
			traceTASK_DELAY_UNTIL( xTimeToWake );

			/* prvAddCurrentTaskToDelayedList() needs the block time, not
			 the time to wake, so subtract the current tick count. */
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount,
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fd3b 	bl	8006aac <prvAddCurrentTaskToDelayedList>
					pdFALSE);
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006036:	f000 f8c9 	bl	80061cc <xTaskResumeAll>
 800603a:	61b8      	str	r0, [r7, #24]

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <vTaskDelayUntil+0xe6>
		portYIELD_WITHIN_API()
 8006042:	4b08      	ldr	r3, [pc, #32]	; (8006064 <vTaskDelayUntil+0xf8>)
 8006044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006052:	bf00      	nop
 8006054:	3728      	adds	r7, #40	; 0x28
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000eec 	.word	0x20000eec
 8006060:	20000ec8 	.word	0x20000ec8
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <vTaskDelay>:
#endif /* INCLUDE_vTaskDelayUntil */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

void vTaskDelay(const TickType_t xTicksToDelay) {
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t) 0U) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d017      	beq.n	80060aa <vTaskDelay+0x42>
		configASSERT(uxSchedulerSuspended == 0);
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <vTaskDelay+0x60>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <vTaskDelay+0x30>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	60bb      	str	r3, [r7, #8]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vTaskDelay+0x2e>
		vTaskSuspendAll();
 8006098:	f000 f88a 	bl	80061b0 <vTaskSuspendAll>
			 list or removed from the blocked list until the scheduler
			 is resumed.

			 This task cannot be in an event list as it is the currently
			 executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fd04 	bl	8006aac <prvAddCurrentTaskToDelayedList>
		}
		xAlreadyYielded = xTaskResumeAll();
 80060a4:	f000 f892 	bl	80061cc <xTaskResumeAll>
 80060a8:	60f8      	str	r0, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
	 have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE) {
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d107      	bne.n	80060c0 <vTaskDelay+0x58>
		portYIELD_WITHIN_API()
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <vTaskDelay+0x64>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
		;
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c0:	bf00      	nop
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	20000eec 	.word	0x20000eec
 80060cc:	e000ed04 	.word	0xe000ed04

080060d0 <vTaskStartScheduler>:
}

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
	BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		 address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer,
 80060de:	463a      	mov	r2, r7
 80060e0:	1d39      	adds	r1, r7, #4
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe ff8c 	bl	8005004 <vApplicationGetIdleTaskMemory>
				&pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
		xIdleTaskHandle = xTaskCreateStatic(prvIdleTask,
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	9202      	str	r2, [sp, #8]
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	460a      	mov	r2, r1
 80060fe:	4924      	ldr	r1, [pc, #144]	; (8006190 <vTaskStartScheduler+0xc0>)
 8006100:	4824      	ldr	r0, [pc, #144]	; (8006194 <vTaskStartScheduler+0xc4>)
 8006102:	f7ff fd83 	bl	8005c0c <xTaskCreateStatic>
 8006106:	4603      	mov	r3, r0
 8006108:	4a23      	ldr	r2, [pc, #140]	; (8006198 <vTaskStartScheduler+0xc8>)
 800610a:	6013      	str	r3, [r2, #0]
		configIDLE_TASK_NAME, ulIdleTaskStackSize, (void*) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
		( tskIDLE_PRIORITY | portPRIVILEGE_BIT), pxIdleTaskStackBuffer,
				pxIdleTaskTCBBuffer); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if (xIdleTaskHandle != NULL) {
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <vTaskStartScheduler+0xc8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <vTaskStartScheduler+0x4a>
			xReturn = pdPASS;
 8006114:	2301      	movs	r3, #1
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e001      	b.n	800611e <vTaskStartScheduler+0x4e>
		} else {
			xReturn = pdFAIL;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

#if ( configUSE_TIMERS == 1 )
	{
		if (xReturn == pdPASS) {
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d102      	bne.n	800612a <vTaskStartScheduler+0x5a>
			xReturn = xTimerCreateTimerTask();
 8006124:	f000 fd16 	bl	8006b54 <xTimerCreateTimerTask>
 8006128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS) {
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d11b      	bne.n	8006168 <vTaskStartScheduler+0x98>
	__asm volatile
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
}
 8006142:	bf00      	nop

#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			 structure specific to the task that will run first. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
 8006144:	4b15      	ldr	r3, [pc, #84]	; (800619c <vTaskStartScheduler+0xcc>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3354      	adds	r3, #84	; 0x54
 800614a:	4a15      	ldr	r2, [pc, #84]	; (80061a0 <vTaskStartScheduler+0xd0>)
 800614c:	6013      	str	r3, [r2, #0]
		}
#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800614e:	4b15      	ldr	r3, [pc, #84]	; (80061a4 <vTaskStartScheduler+0xd4>)
 8006150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <vTaskStartScheduler+0xd8>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
		xTickCount = (TickType_t) 0U;
 800615c:	4b13      	ldr	r3, [pc, #76]	; (80061ac <vTaskStartScheduler+0xdc>)
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
		 FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		 portable interface. */
		if (xPortStartScheduler() != pdFALSE) {
 8006162:	f001 f889 	bl	8007278 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	 meaning xIdleTaskHandle is not used anywhere else. */
	(void) xIdleTaskHandle;
}
 8006166:	e00e      	b.n	8006186 <vTaskStartScheduler+0xb6>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800616e:	d10a      	bne.n	8006186 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	60fb      	str	r3, [r7, #12]
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <vTaskStartScheduler+0xb4>
}
 8006186:	bf00      	nop
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	08008590 	.word	0x08008590
 8006194:	080067d9 	.word	0x080067d9
 8006198:	20000ee8 	.word	0x20000ee8
 800619c:	200009f0 	.word	0x200009f0
 80061a0:	20000064 	.word	0x20000064
 80061a4:	20000ee4 	.word	0x20000ee4
 80061a8:	20000ed0 	.word	0x20000ed0
 80061ac:	20000ec8 	.word	0x20000ec8

080061b0 <vTaskSuspendAll>:
	xSchedulerRunning = pdFALSE;
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void) {
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	 BaseType_t.  Please read Richard Barry's reply in the following link to a
	 post in the FreeRTOS support forum before reporting this as a bug! -
	 http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <vTaskSuspendAll+0x18>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	4a03      	ldr	r2, [pc, #12]	; (80061c8 <vTaskSuspendAll+0x18>)
 80061bc:	6013      	str	r3, [r2, #0]
}
 80061be:	bf00      	nop
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000eec 	.word	0x20000eec

080061cc <xTaskResumeAll>:
	}

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
	TCB_t *pxTCB = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	 previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <xTaskResumeAll+0x118>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	603b      	str	r3, [r7, #0]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	 list while the scheduler was suspended.  If this was the case then the
	 removed task will have been added to the xPendingReadyList.  Once the
	 scheduler has been resumed it is safe to move all the pending ready
	 tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061f8:	f001 f8b0 	bl	800735c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061fc:	4b39      	ldr	r3, [pc, #228]	; (80062e4 <xTaskResumeAll+0x118>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	3b01      	subs	r3, #1
 8006202:	4a38      	ldr	r2, [pc, #224]	; (80062e4 <xTaskResumeAll+0x118>)
 8006204:	6013      	str	r3, [r2, #0]

		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <xTaskResumeAll+0x118>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d162      	bne.n	80062d4 <xTaskResumeAll+0x108>
			if (uxCurrentNumberOfTasks > (UBaseType_t) 0U) {
 800620e:	4b36      	ldr	r3, [pc, #216]	; (80062e8 <xTaskResumeAll+0x11c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d05e      	beq.n	80062d4 <xTaskResumeAll+0x108>
				/* Move any readied tasks from the pending list into the
				 appropriate ready list. */
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8006216:	e02f      	b.n	8006278 <xTaskResumeAll+0xac>
					pxTCB = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(
 8006218:	4b34      	ldr	r3, [pc, #208]	; (80062ec <xTaskResumeAll+0x120>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	60fb      	str	r3, [r7, #12]
							(&xPendingReadyList));
					(void) uxListRemove(&(pxTCB->xEventListItem));
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3318      	adds	r3, #24
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe ffa5 	bl	8005174 <uxListRemove>
					(void) uxListRemove(&(pxTCB->xStateListItem));
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	3304      	adds	r3, #4
 800622e:	4618      	mov	r0, r3
 8006230:	f7fe ffa0 	bl	8005174 <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4b2d      	ldr	r3, [pc, #180]	; (80062f0 <xTaskResumeAll+0x124>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d903      	bls.n	8006248 <xTaskResumeAll+0x7c>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a2a      	ldr	r2, [pc, #168]	; (80062f0 <xTaskResumeAll+0x124>)
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4a27      	ldr	r2, [pc, #156]	; (80062f4 <xTaskResumeAll+0x128>)
 8006256:	441a      	add	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7fe ff2d 	bl	80050be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					 task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	4b23      	ldr	r3, [pc, #140]	; (80062f8 <xTaskResumeAll+0x12c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	429a      	cmp	r2, r3
 8006270:	d302      	bcc.n	8006278 <xTaskResumeAll+0xac>
						xYieldPending = pdTRUE;
 8006272:	4b22      	ldr	r3, [pc, #136]	; (80062fc <xTaskResumeAll+0x130>)
 8006274:	2201      	movs	r2, #1
 8006276:	601a      	str	r2, [r3, #0]
				while ( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE) {
 8006278:	4b1c      	ldr	r3, [pc, #112]	; (80062ec <xTaskResumeAll+0x120>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1cb      	bne.n	8006218 <xTaskResumeAll+0x4c>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL) {
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <xTaskResumeAll+0xbe>
					 which may have prevented the next unblock time from being
					 re-calculated, in which case re-calculate it now.  Mainly
					 important for low power tickless implementations, where
					 this can prevent an unnecessary exit from low power
					 state. */
					prvResetNextTaskUnblockTime();
 8006286:	f000 fb61 	bl	800694c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				 they should be processed now.  This ensures the tick count does
				 not	slip, and that any delayed tasks are resumed at the correct
				 time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <xTaskResumeAll+0x134>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	607b      	str	r3, [r7, #4]

					if (uxPendedCounts > (UBaseType_t) 0U) {
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d010      	beq.n	80062b8 <xTaskResumeAll+0xec>
						do {
							if (xTaskIncrementTick() != pdFALSE) {
 8006296:	f000 f845 	bl	8006324 <xTaskIncrementTick>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d002      	beq.n	80062a6 <xTaskResumeAll+0xda>
								xYieldPending = pdTRUE;
 80062a0:	4b16      	ldr	r3, [pc, #88]	; (80062fc <xTaskResumeAll+0x130>)
 80062a2:	2201      	movs	r2, #1
 80062a4:	601a      	str	r2, [r3, #0]
							} else {
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	607b      	str	r3, [r7, #4]
						} while (uxPendedCounts > (UBaseType_t) 0U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f1      	bne.n	8006296 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <xTaskResumeAll+0x134>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
					} else {
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE) {
 80062b8:	4b10      	ldr	r3, [pc, #64]	; (80062fc <xTaskResumeAll+0x130>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d009      	beq.n	80062d4 <xTaskResumeAll+0x108>
#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <xTaskResumeAll+0x138>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062d4:	f001 f872 	bl	80073bc <vPortExitCritical>

	return xAlreadyYielded;
 80062d8:	68bb      	ldr	r3, [r7, #8]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000eec 	.word	0x20000eec
 80062e8:	20000ec4 	.word	0x20000ec4
 80062ec:	20000e84 	.word	0x20000e84
 80062f0:	20000ecc 	.word	0x20000ecc
 80062f4:	200009f4 	.word	0x200009f4
 80062f8:	200009f0 	.word	0x200009f0
 80062fc:	20000ed8 	.word	0x20000ed8
 8006300:	20000ed4 	.word	0x20000ed4
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void) {
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800630e:	4b04      	ldr	r3, [pc, #16]	; (8006320 <xTaskGetTickCount+0x18>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	607b      	str	r3, [r7, #4]
	} portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006314:	687b      	ldr	r3, [r7, #4]
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	20000ec8 	.word	0x20000ec8

08006324 <xTaskIncrementTick>:
	}

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 800632a:	2300      	movs	r3, #0
 800632c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	 Increments the tick then checks to see if the new tick value will cause any
	 tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 800632e:	4b51      	ldr	r3, [pc, #324]	; (8006474 <xTaskIncrementTick+0x150>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 808e 	bne.w	8006454 <xTaskIncrementTick+0x130>
		/* Minor optimisation.  The tick count cannot change in this
		 block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t) 1;
 8006338:	4b4f      	ldr	r3, [pc, #316]	; (8006478 <xTaskIncrementTick+0x154>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	3301      	adds	r3, #1
 800633e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		 delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006340:	4a4d      	ldr	r2, [pc, #308]	; (8006478 <xTaskIncrementTick+0x154>)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	6013      	str	r3, [r2, #0]

		if (xConstTickCount == (TickType_t) 0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d120      	bne.n	800638e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800634c:	4b4b      	ldr	r3, [pc, #300]	; (800647c <xTaskIncrementTick+0x158>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <xTaskIncrementTick+0x48>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	603b      	str	r3, [r7, #0]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <xTaskIncrementTick+0x46>
 800636c:	4b43      	ldr	r3, [pc, #268]	; (800647c <xTaskIncrementTick+0x158>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	4b43      	ldr	r3, [pc, #268]	; (8006480 <xTaskIncrementTick+0x15c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a41      	ldr	r2, [pc, #260]	; (800647c <xTaskIncrementTick+0x158>)
 8006378:	6013      	str	r3, [r2, #0]
 800637a:	4a41      	ldr	r2, [pc, #260]	; (8006480 <xTaskIncrementTick+0x15c>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b40      	ldr	r3, [pc, #256]	; (8006484 <xTaskIncrementTick+0x160>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a3f      	ldr	r2, [pc, #252]	; (8006484 <xTaskIncrementTick+0x160>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	f000 fadf 	bl	800694c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		 the	queue in the order of their wake time - meaning once one task
		 has been found whose block time has not expired there is no need to
		 look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime) {
 800638e:	4b3e      	ldr	r3, [pc, #248]	; (8006488 <xTaskIncrementTick+0x164>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	429a      	cmp	r2, r3
 8006396:	d34e      	bcc.n	8006436 <xTaskIncrementTick+0x112>
			for (;;) {
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8006398:	4b38      	ldr	r3, [pc, #224]	; (800647c <xTaskIncrementTick+0x158>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <xTaskIncrementTick+0x82>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e000      	b.n	80063a8 <xTaskIncrementTick+0x84>
 80063a6:	2300      	movs	r3, #0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					 to the maximum possible value so it is extremely
					 unlikely that the
					 if( xTickCount >= xNextTaskUnblockTime ) test will pass
					 next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ac:	4b36      	ldr	r3, [pc, #216]	; (8006488 <xTaskIncrementTick+0x164>)
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063b2:	601a      	str	r2, [r3, #0]
					break;
 80063b4:	e03f      	b.n	8006436 <xTaskIncrementTick+0x112>
				} else {
					/* The delayed list is not empty, get the value of the
					 item at the head of the delayed list.  This is the time
					 at which the task at the head of the delayed list must
					 be removed from the Blocked state. */
					pxTCB = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(
 80063b6:	4b31      	ldr	r3, [pc, #196]	; (800647c <xTaskIncrementTick+0x158>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	60bb      	str	r3, [r7, #8]
							pxDelayedTaskList);
					xItemValue = listGET_LIST_ITEM_VALUE(
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	607b      	str	r3, [r7, #4]
							&(pxTCB->xStateListItem));

					if (xConstTickCount < xItemValue) {
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d203      	bcs.n	80063d6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						 item value is the time at which the task at the head
						 of the blocked list must be removed from the Blocked
						 state -	so record the item value in
						 xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80063ce:	4a2e      	ldr	r2, [pc, #184]	; (8006488 <xTaskIncrementTick+0x164>)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6013      	str	r3, [r2, #0]
						break;
 80063d4:	e02f      	b.n	8006436 <xTaskIncrementTick+0x112>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void) uxListRemove(&(pxTCB->xStateListItem));
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	3304      	adds	r3, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe feca 	bl	8005174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					 it from the event list. */
					if ( listLIST_ITEM_CONTAINER(
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <xTaskIncrementTick+0xce>
							&(pxTCB->xEventListItem)) != NULL) {
						(void) uxListRemove(&(pxTCB->xEventListItem));
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	3318      	adds	r3, #24
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fe fec1 	bl	8005174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					 list. */
					prvAddTaskToReadyList(pxTCB);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f6:	4b25      	ldr	r3, [pc, #148]	; (800648c <xTaskIncrementTick+0x168>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d903      	bls.n	8006406 <xTaskIncrementTick+0xe2>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	4a22      	ldr	r2, [pc, #136]	; (800648c <xTaskIncrementTick+0x168>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <xTaskIncrementTick+0x16c>)
 8006414:	441a      	add	r2, r3
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe fe4e 	bl	80050be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						 only be performed if the unblocked task has a
						 priority that is equal to or higher than the
						 currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <xTaskIncrementTick+0x170>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642c:	429a      	cmp	r2, r3
 800642e:	d3b3      	bcc.n	8006398 <xTaskIncrementTick+0x74>
							xSwitchRequired = pdTRUE;
 8006430:	2301      	movs	r3, #1
 8006432:	617b      	str	r3, [r7, #20]
				if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8006434:	e7b0      	b.n	8006398 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		 processing time (time slice) if preemption is on, and the application
		 writer has not explicitly turned time slicing off. */
#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if ( listCURRENT_LIST_LENGTH(
 8006436:	4b17      	ldr	r3, [pc, #92]	; (8006494 <xTaskIncrementTick+0x170>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643c:	4914      	ldr	r1, [pc, #80]	; (8006490 <xTaskIncrementTick+0x16c>)
 800643e:	4613      	mov	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	440b      	add	r3, r1
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d907      	bls.n	800645e <xTaskIncrementTick+0x13a>
					&(pxReadyTasksLists[pxCurrentTCB->uxPriority]))
					> (UBaseType_t) 1) {
				xSwitchRequired = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e004      	b.n	800645e <xTaskIncrementTick+0x13a>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICK_HOOK */
	} else {
		++uxPendedTicks;
 8006454:	4b10      	ldr	r3, [pc, #64]	; (8006498 <xTaskIncrementTick+0x174>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a0f      	ldr	r2, [pc, #60]	; (8006498 <xTaskIncrementTick+0x174>)
 800645c:	6013      	str	r3, [r2, #0]
		#endif
	}

#if ( configUSE_PREEMPTION == 1 )
	{
		if (xYieldPending != pdFALSE) {
 800645e:	4b0f      	ldr	r3, [pc, #60]	; (800649c <xTaskIncrementTick+0x178>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <xTaskIncrementTick+0x146>
			xSwitchRequired = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800646a:	697b      	ldr	r3, [r7, #20]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000eec 	.word	0x20000eec
 8006478:	20000ec8 	.word	0x20000ec8
 800647c:	20000e7c 	.word	0x20000e7c
 8006480:	20000e80 	.word	0x20000e80
 8006484:	20000edc 	.word	0x20000edc
 8006488:	20000ee4 	.word	0x20000ee4
 800648c:	20000ecc 	.word	0x20000ecc
 8006490:	200009f4 	.word	0x200009f4
 8006494:	200009f0 	.word	0x200009f0
 8006498:	20000ed4 	.word	0x20000ed4
 800649c:	20000ed8 	.word	0x20000ed8

080064a0 <vTaskSwitchContext>:
	}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void) {
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t) pdFALSE) {
 80064a6:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <vTaskSwitchContext+0xb0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <vTaskSwitchContext+0x16>
		/* The scheduler is currently suspended - do not allow a context
		 switch. */
		xYieldPending = pdTRUE;
 80064ae:	4b29      	ldr	r3, [pc, #164]	; (8006554 <vTaskSwitchContext+0xb4>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
			 structure specific to this task. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80064b4:	e046      	b.n	8006544 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80064b6:	4b27      	ldr	r3, [pc, #156]	; (8006554 <vTaskSwitchContext+0xb4>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); traceTASK_SWITCHED_IN();
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <vTaskSwitchContext+0xb8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e010      	b.n	80064e6 <vTaskSwitchContext+0x46>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10a      	bne.n	80064e0 <vTaskSwitchContext+0x40>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	607b      	str	r3, [r7, #4]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskSwitchContext+0x3e>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	491d      	ldr	r1, [pc, #116]	; (800655c <vTaskSwitchContext+0xbc>)
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	440b      	add	r3, r1
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0e4      	beq.n	80064c4 <vTaskSwitchContext+0x24>
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <vTaskSwitchContext+0xbc>)
 8006506:	4413      	add	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	3308      	adds	r3, #8
 800651c:	429a      	cmp	r2, r3
 800651e:	d104      	bne.n	800652a <vTaskSwitchContext+0x8a>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	4a0b      	ldr	r2, [pc, #44]	; (8006560 <vTaskSwitchContext+0xc0>)
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	4a08      	ldr	r2, [pc, #32]	; (8006558 <vTaskSwitchContext+0xb8>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6013      	str	r3, [r2, #0]
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <vTaskSwitchContext+0xc0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3354      	adds	r3, #84	; 0x54
 8006540:	4a08      	ldr	r2, [pc, #32]	; (8006564 <vTaskSwitchContext+0xc4>)
 8006542:	6013      	str	r3, [r2, #0]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20000eec 	.word	0x20000eec
 8006554:	20000ed8 	.word	0x20000ed8
 8006558:	20000ecc 	.word	0x20000ecc
 800655c:	200009f4 	.word	0x200009f4
 8006560:	200009f0 	.word	0x200009f0
 8006564:	20000064 	.word	0x20000064

08006568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList,
		const TickType_t xTicksToWait) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	60fb      	str	r3, [r7, #12]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	 This is placed in the list in priority order so the highest priority task
	 is the first to be woken by the event.  The queue that contains the event
	 list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <vTaskPlaceOnEventList+0x44>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3318      	adds	r3, #24
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fe fdb4 	bl	8005104 <vListInsert>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 800659c:	2101      	movs	r1, #1
 800659e:	6838      	ldr	r0, [r7, #0]
 80065a0:	f000 fa84 	bl	8006aac <prvAddCurrentTaskToDelayedList>
}
 80065a4:	bf00      	nop
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200009f0 	.word	0x200009f0

080065b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList,
		TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely) {
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	617b      	str	r3, [r7, #20]
}
 80065d4:	bf00      	nop
 80065d6:	e7fe      	b.n	80065d6 <vTaskPlaceOnEventListRestricted+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	 In this case it is assume that this is the only task that is going to
	 be waiting on this event list, so the faster vListInsertEnd() function
	 can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 80065d8:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <vTaskPlaceOnEventListRestricted+0x54>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3318      	adds	r3, #24
 80065de:	4619      	mov	r1, r3
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7fe fd6c 	bl	80050be <vListInsertEnd>

	/* If the task should block indefinitely then set the block time to a
	 value that will be recognised as an indefinite delay inside the
	 prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE) {
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <vTaskPlaceOnEventListRestricted+0x42>
		xTicksToWait = portMAX_DELAY;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f0:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68b8      	ldr	r0, [r7, #8]
 80065f6:	f000 fa59 	bl	8006aac <prvAddCurrentTaskToDelayedList>
}
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	200009f0 	.word	0x200009f0

08006608 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
	 get called - the lock count on the queue will get modified instead.  This
	 means exclusive access to the event list is guaranteed here.

	 This function assumes that a check has already been made to ensure that
	 pxEventList is not empty. */
	pxUnblockedTCB = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	613b      	str	r3, [r7, #16]
	configASSERT(pxUnblockedTCB);
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10a      	bne.n	8006634 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	60fb      	str	r3, [r7, #12]
}
 8006630:	bf00      	nop
 8006632:	e7fe      	b.n	8006632 <xTaskRemoveFromEventList+0x2a>
	(void) uxListRemove(&(pxUnblockedTCB->xEventListItem));
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3318      	adds	r3, #24
 8006638:	4618      	mov	r0, r3
 800663a:	f7fe fd9b 	bl	8005174 <uxListRemove>

	if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 800663e:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <xTaskRemoveFromEventList+0xb0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d11d      	bne.n	8006682 <xTaskRemoveFromEventList+0x7a>
		(void) uxListRemove(&(pxUnblockedTCB->xStateListItem));
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	3304      	adds	r3, #4
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fd92 	bl	8005174 <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <xTaskRemoveFromEventList+0xb4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d903      	bls.n	8006664 <xTaskRemoveFromEventList+0x5c>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	4a16      	ldr	r2, [pc, #88]	; (80066bc <xTaskRemoveFromEventList+0xb4>)
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006668:	4613      	mov	r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4a13      	ldr	r2, [pc, #76]	; (80066c0 <xTaskRemoveFromEventList+0xb8>)
 8006672:	441a      	add	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	3304      	adds	r3, #4
 8006678:	4619      	mov	r1, r3
 800667a:	4610      	mov	r0, r2
 800667c:	f7fe fd1f 	bl	80050be <vListInsertEnd>
 8006680:	e005      	b.n	800668e <xTaskRemoveFromEventList+0x86>
	} else {
		/* The delayed and ready lists cannot be accessed, so hold this task
		 pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3318      	adds	r3, #24
 8006686:	4619      	mov	r1, r3
 8006688:	480e      	ldr	r0, [pc, #56]	; (80066c4 <xTaskRemoveFromEventList+0xbc>)
 800668a:	f7fe fd18 	bl	80050be <vListInsertEnd>
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006692:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <xTaskRemoveFromEventList+0xc0>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	429a      	cmp	r2, r3
 800669a:	d905      	bls.n	80066a8 <xTaskRemoveFromEventList+0xa0>
		/* Return true if the task removed from the event list has a higher
		 priority than the calling task.  This allows the calling task to know if
		 it should force a context switch now. */
		xReturn = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		 "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066a0:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <xTaskRemoveFromEventList+0xc4>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e001      	b.n	80066ac <xTaskRemoveFromEventList+0xa4>
	} else {
		xReturn = pdFALSE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80066ac:	697b      	ldr	r3, [r7, #20]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000eec 	.word	0x20000eec
 80066bc:	20000ecc 	.word	0x20000ecc
 80066c0:	200009f4 	.word	0x200009f4
 80066c4:	20000e84 	.word	0x20000e84
 80066c8:	200009f0 	.word	0x200009f0
 80066cc:	20000ed8 	.word	0x20000ed8

080066d0 <vTaskInternalSetTimeOutState>:
	}
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut) {
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <vTaskInternalSetTimeOutState+0x24>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <vTaskInternalSetTimeOutState+0x28>)
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	605a      	str	r2, [r3, #4]
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bc80      	pop	{r7}
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000edc 	.word	0x20000edc
 80066f8:	20000ec8 	.word	0x20000ec8

080066fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut,
		TickType_t *const pxTicksToWait) {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	613b      	str	r3, [r7, #16]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTaskCheckForTimeOut+0x24>
	configASSERT(pxTicksToWait);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10a      	bne.n	800673e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	60fb      	str	r3, [r7, #12]
}
 800673a:	bf00      	nop
 800673c:	e7fe      	b.n	800673c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800673e:	f000 fe0d 	bl	800735c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <xTaskCheckForTimeOut+0xbc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount
				- pxTimeOut->xTimeOnEntering;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
		const TickType_t xElapsedTime = xConstTickCount
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

#if ( INCLUDE_vTaskSuspend == 1 )
		if (*pxTicksToWait == portMAX_DELAY) {
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675a:	d102      	bne.n	8006762 <xTaskCheckForTimeOut+0x66>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
			 specified is the maximum block time then the task should block
			 indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e023      	b.n	80067aa <xTaskCheckForTimeOut+0xae>
		} else
#endif

		if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4b15      	ldr	r3, [pc, #84]	; (80067bc <xTaskCheckForTimeOut+0xc0>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d007      	beq.n	800677e <xTaskCheckForTimeOut+0x82>
				&& (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d302      	bcc.n	800677e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			 vTaskSetTimeout() was called, but has also overflowed since
			 vTaskSetTimeOut() was called.  It must have wrapped all the way
			 around and gone past again. This passed since vTaskSetTimeout()
			 was called. */
			xReturn = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	e015      	b.n	80067aa <xTaskCheckForTimeOut+0xae>
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	429a      	cmp	r2, r3
 8006786:	d20b      	bcs.n	80067a0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1ad2      	subs	r2, r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff ff9b 	bl	80066d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	e004      	b.n	80067aa <xTaskCheckForTimeOut+0xae>
		} else {
			*pxTicksToWait = 0;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80067a6:	2301      	movs	r3, #1
 80067a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80067aa:	f000 fe07 	bl	80073bc <vPortExitCritical>

	return xReturn;
 80067ae:	69fb      	ldr	r3, [r7, #28]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3720      	adds	r7, #32
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000ec8 	.word	0x20000ec8
 80067bc:	20000edc 	.word	0x20000edc

080067c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void) {
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80067c4:	4b03      	ldr	r3, [pc, #12]	; (80067d4 <vTaskMissedYield+0x14>)
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bc80      	pop	{r7}
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	20000ed8 	.word	0x20000ed8

080067d8 <prvIdleTask>:
 * language extensions.  The equivalent prototype for this function is:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters ) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	portTASK_CALLS_SECURE_FUNCTIONS();

	for (;;) {
		/* See if any tasks have deleted themselves - if so then the idle task
		 is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80067e0:	f000 f852 	bl	8006888 <prvCheckTasksWaitingTermination>

			 A critical region is not required here as we are just reading from
			 the list, and an occasional incorrect value will not matter.  If
			 the ready list at the idle priority contains more than one task
			 then a task other than the idle task is ready to execute. */
			if ( listCURRENT_LIST_LENGTH(
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <prvIdleTask+0x28>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d9f9      	bls.n	80067e0 <prvIdleTask+0x8>
					&( pxReadyTasksLists[ tskIDLE_PRIORITY ] ))
					> (UBaseType_t) 1) {
				taskYIELD();
 80067ec:	4b05      	ldr	r3, [pc, #20]	; (8006804 <prvIdleTask+0x2c>)
 80067ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	f3bf 8f4f 	dsb	sy
 80067f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067fc:	e7f0      	b.n	80067e0 <prvIdleTask+0x8>
 80067fe:	bf00      	nop
 8006800:	200009f4 	.word	0x200009f4
 8006804:	e000ed04 	.word	0xe000ed04

08006808 <prvInitialiseTaskLists>:
	}

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t) 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	607b      	str	r3, [r7, #4]
 8006812:	e00c      	b.n	800682e <prvInitialiseTaskLists+0x26>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <prvInitialiseTaskLists+0x60>)
 8006820:	4413      	add	r3, r2
 8006822:	4618      	mov	r0, r3
 8006824:	f7fe fc20 	bl	8005068 <vListInitialise>
			uxPriority < (UBaseType_t) configMAX_PRIORITIES; uxPriority++) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3301      	adds	r3, #1
 800682c:	607b      	str	r3, [r7, #4]
	for (uxPriority = (UBaseType_t) 0U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b37      	cmp	r3, #55	; 0x37
 8006832:	d9ef      	bls.n	8006814 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
 8006834:	480d      	ldr	r0, [pc, #52]	; (800686c <prvInitialiseTaskLists+0x64>)
 8006836:	f7fe fc17 	bl	8005068 <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 800683a:	480d      	ldr	r0, [pc, #52]	; (8006870 <prvInitialiseTaskLists+0x68>)
 800683c:	f7fe fc14 	bl	8005068 <vListInitialise>
	vListInitialise(&xPendingReadyList);
 8006840:	480c      	ldr	r0, [pc, #48]	; (8006874 <prvInitialiseTaskLists+0x6c>)
 8006842:	f7fe fc11 	bl	8005068 <vListInitialise>

#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise(&xTasksWaitingTermination);
 8006846:	480c      	ldr	r0, [pc, #48]	; (8006878 <prvInitialiseTaskLists+0x70>)
 8006848:	f7fe fc0e 	bl	8005068 <vListInitialise>
	}
#endif /* INCLUDE_vTaskDelete */

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise(&xSuspendedTaskList);
 800684c:	480b      	ldr	r0, [pc, #44]	; (800687c <prvInitialiseTaskLists+0x74>)
 800684e:	f7fe fc0b 	bl	8005068 <vListInitialise>
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	 using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006852:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <prvInitialiseTaskLists+0x78>)
 8006854:	4a05      	ldr	r2, [pc, #20]	; (800686c <prvInitialiseTaskLists+0x64>)
 8006856:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <prvInitialiseTaskLists+0x7c>)
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <prvInitialiseTaskLists+0x68>)
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	200009f4 	.word	0x200009f4
 800686c:	20000e54 	.word	0x20000e54
 8006870:	20000e68 	.word	0x20000e68
 8006874:	20000e84 	.word	0x20000e84
 8006878:	20000e98 	.word	0x20000e98
 800687c:	20000eb0 	.word	0x20000eb0
 8006880:	20000e7c 	.word	0x20000e7c
 8006884:	20000e80 	.word	0x20000e80

08006888 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void) {
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		 being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 800688e:	e019      	b.n	80068c4 <prvCheckTasksWaitingTermination+0x3c>
			taskENTER_CRITICAL();
 8006890:	f000 fd64 	bl	800735c <vPortEnterCritical>
			{
				pxTCB = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <prvCheckTasksWaitingTermination+0x50>)
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	607b      	str	r3, [r7, #4]
						(&xTasksWaitingTermination));
				(void) uxListRemove(&(pxTCB->xStateListItem));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fc67 	bl	8005174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80068a6:	4b0d      	ldr	r3, [pc, #52]	; (80068dc <prvCheckTasksWaitingTermination+0x54>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4a0b      	ldr	r2, [pc, #44]	; (80068dc <prvCheckTasksWaitingTermination+0x54>)
 80068ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	4a0a      	ldr	r2, [pc, #40]	; (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80068ba:	f000 fd7f 	bl	80073bc <vPortExitCritical>

			prvDeleteTCB(pxTCB);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f810 	bl	80068e4 <prvDeleteTCB>
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t) 0U) {
 80068c4:	4b06      	ldr	r3, [pc, #24]	; (80068e0 <prvCheckTasksWaitingTermination+0x58>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e1      	bne.n	8006890 <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000e98 	.word	0x20000e98
 80068dc:	20000ec4 	.word	0x20000ec4
 80068e0:	20000eac 	.word	0x20000eac

080068e4 <prvDeleteTCB>:
#endif /* INCLUDE_uxTaskGetStackHighWaterMark */
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

static void prvDeleteTCB(TCB_t *pxTCB) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]

	/* Free up the memory allocated by the scheduler for the task.  It is up
	 to the task to free any memory allocated at the application level. */
#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		_reclaim_reent(&(pxTCB->xNewLib_reent));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3354      	adds	r3, #84	; 0x54
 80068f0:	4618      	mov	r0, r3
 80068f2:	f001 fad5 	bl	8007ea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
	{
		/* The task could have been allocated statically or dynamically, so
		 check what was statically allocated before trying to free the
		 memory. */
		if (pxTCB->ucStaticallyAllocated
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d108      	bne.n	8006912 <prvDeleteTCB+0x2e>
				== tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB) {
			/* Both the stack and TCB were allocated dynamically, so both
			 must be freed. */
			vPortFree(pxTCB->pxStack);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	4618      	mov	r0, r3
 8006906:	f000 feed 	bl	80076e4 <vPortFree>
			vPortFree(pxTCB);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 feea 	bl	80076e4 <vPortFree>
			configASSERT(
					pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB); mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006910:	e018      	b.n	8006944 <prvDeleteTCB+0x60>
		} else if (pxTCB->ucStaticallyAllocated
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006918:	2b01      	cmp	r3, #1
 800691a:	d103      	bne.n	8006924 <prvDeleteTCB+0x40>
			vPortFree(pxTCB);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fee1 	bl	80076e4 <vPortFree>
}
 8006922:	e00f      	b.n	8006944 <prvDeleteTCB+0x60>
			configASSERT(
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800692a:	2b02      	cmp	r3, #2
 800692c:	d00a      	beq.n	8006944 <prvDeleteTCB+0x60>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	60fb      	str	r3, [r7, #12]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <prvDeleteTCB+0x5e>
}
 8006944:	bf00      	nop
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void) {
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if ( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE) {
 8006952:	4b0e      	ldr	r3, [pc, #56]	; (800698c <prvResetNextTaskUnblockTime+0x40>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <prvResetNextTaskUnblockTime+0x14>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <prvResetNextTaskUnblockTime+0x16>
 8006960:	2300      	movs	r3, #0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		 the maximum possible value so it is	extremely unlikely that the
		 if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		 there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <prvResetNextTaskUnblockTime+0x44>)
 8006968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800696c:	601a      	str	r2, [r3, #0]
		 from the Blocked state. */
		(pxTCB) = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
				&((pxTCB)->xStateListItem));
	}
}
 800696e:	e008      	b.n	8006982 <prvResetNextTaskUnblockTime+0x36>
		(pxTCB) = (TCB_t*) listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
 8006970:	4b06      	ldr	r3, [pc, #24]	; (800698c <prvResetNextTaskUnblockTime+0x40>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4a04      	ldr	r2, [pc, #16]	; (8006990 <prvResetNextTaskUnblockTime+0x44>)
 8006980:	6013      	str	r3, [r2, #0]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr
 800698c:	20000e7c 	.word	0x20000e7c
 8006990:	20000ee4 	.word	0x20000ee4

08006994 <xTaskGetSchedulerState>:
#endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

BaseType_t xTaskGetSchedulerState(void) {
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE) {
 800699a:	4b0b      	ldr	r3, [pc, #44]	; (80069c8 <xTaskGetSchedulerState+0x34>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d102      	bne.n	80069a8 <xTaskGetSchedulerState+0x14>
		xReturn = taskSCHEDULER_NOT_STARTED;
 80069a2:	2301      	movs	r3, #1
 80069a4:	607b      	str	r3, [r7, #4]
 80069a6:	e008      	b.n	80069ba <xTaskGetSchedulerState+0x26>
	} else {
		if (uxSchedulerSuspended == (UBaseType_t) pdFALSE) {
 80069a8:	4b08      	ldr	r3, [pc, #32]	; (80069cc <xTaskGetSchedulerState+0x38>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d102      	bne.n	80069b6 <xTaskGetSchedulerState+0x22>
			xReturn = taskSCHEDULER_RUNNING;
 80069b0:	2302      	movs	r3, #2
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	e001      	b.n	80069ba <xTaskGetSchedulerState+0x26>
		} else {
			xReturn = taskSCHEDULER_SUSPENDED;
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
 80069ba:	687b      	ldr	r3, [r7, #4]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000ed0 	.word	0x20000ed0
 80069cc:	20000eec 	.word	0x20000eec

080069d0 <xTaskPriorityDisinherit>:
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	TCB_t *const pxTCB = (TCB_t*) pxMutexHolder;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]

	if (pxMutexHolder != NULL) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d056      	beq.n	8006a94 <xTaskPriorityDisinherit+0xc4>
		/* A task can only have an inherited priority if it holds the mutex.
		 If the mutex is held by a task then it cannot be given from an
		 interrupt, and if a mutex is given by the holding task then it must
		 be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
 80069e6:	4b2e      	ldr	r3, [pc, #184]	; (8006aa0 <xTaskPriorityDisinherit+0xd0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d00a      	beq.n	8006a06 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xTaskPriorityDisinherit+0x34>
		configASSERT(pxTCB->uxMutexesHeld);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	60bb      	str	r3, [r7, #8]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <xTaskPriorityDisinherit+0x52>
		(pxTCB->uxMutexesHeld)--;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	1e5a      	subs	r2, r3, #1
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	651a      	str	r2, [r3, #80]	; 0x50

		/* Has the holder of the mutex inherited the priority of another
		 task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d02c      	beq.n	8006a94 <xTaskPriorityDisinherit+0xc4>
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t) 0) {
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d128      	bne.n	8006a94 <xTaskPriorityDisinherit+0xc4>
				/* A task can only have an inherited priority if it holds
				 the mutex.  If the mutex is held by a task then it cannot be
				 given from an interrupt, and if a mutex is given by the
				 holding task then it must be the running state task.  Remove
				 the holding task from the ready list. */
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t) 0) {
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	3304      	adds	r3, #4
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fe fb94 	bl	8005174 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the
				 new	ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
				 any other purpose if this task is running, and it must be
				 running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a58:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	619a      	str	r2, [r3, #24]
						( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
				prvAddTaskToReadyList(pxTCB);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	4b0f      	ldr	r3, [pc, #60]	; (8006aa4 <xTaskPriorityDisinherit+0xd4>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d903      	bls.n	8006a74 <xTaskPriorityDisinherit+0xa4>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a70:	4a0c      	ldr	r2, [pc, #48]	; (8006aa4 <xTaskPriorityDisinherit+0xd4>)
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4a09      	ldr	r2, [pc, #36]	; (8006aa8 <xTaskPriorityDisinherit+0xd8>)
 8006a82:	441a      	add	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f7fe fb17 	bl	80050be <vListInsertEnd>
				 in an order different to that in which they were taken.
				 If a context switch did not occur when the first mutex was
				 returned, even if a task was waiting on it, then a context
				 switch should occur when the last mutex is returned whether
				 a task is waiting on it or not. */
				xReturn = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	617b      	str	r3, [r7, #20]
		}
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a94:	697b      	ldr	r3, [r7, #20]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	200009f0 	.word	0x200009f0
 8006aa4:	20000ecc 	.word	0x20000ecc
 8006aa8:	200009f4 	.word	0x200009f4

08006aac <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait,
		const BaseType_t xCanBlockIndefinitely) {
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 8006ab6:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	 as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t) 0) {
 8006abc:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fb56 	bl	8005174 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if ((xTicksToWait == portMAX_DELAY )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ace:	d10a      	bne.n	8006ae6 <prvAddCurrentTaskToDelayedList+0x3a>
				&& (xCanBlockIndefinitely != pdFALSE)) {
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <prvAddCurrentTaskToDelayedList+0x3a>
			/* Add the task to the suspended task list instead of a delayed task
			 list to ensure it is not woken by a timing event.  It will block
			 indefinitely. */
			vListInsertEnd(&xSuspendedTaskList,
					&(pxCurrentTCB->xStateListItem));
 8006ad6:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
			vListInsertEnd(&xSuspendedTaskList,
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4819      	ldr	r0, [pc, #100]	; (8006b44 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ae0:	f7fe faed 	bl	80050be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ae4:	e026      	b.n	8006b34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4413      	add	r3, r2
 8006aec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem),
 8006aee:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68ba      	ldr	r2, [r7, #8]
 8006af4:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount) {
 8006af6:	68ba      	ldr	r2, [r7, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d209      	bcs.n	8006b12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList,
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b00:	681a      	ldr	r2, [r3, #0]
						&(pxCurrentTCB->xStateListItem));
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b04:	681b      	ldr	r3, [r3, #0]
				vListInsert(pxOverflowDelayedTaskList,
 8006b06:	3304      	adds	r3, #4
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	f7fe fafa 	bl	8005104 <vListInsert>
}
 8006b10:	e010      	b.n	8006b34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 8006b12:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe faf0 	bl	8005104 <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime) {
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d202      	bcs.n	8006b34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b2e:	4a08      	ldr	r2, [pc, #32]	; (8006b50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	6013      	str	r3, [r2, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20000ec8 	.word	0x20000ec8
 8006b40:	200009f0 	.word	0x200009f0
 8006b44:	20000eb0 	.word	0x20000eb0
 8006b48:	20000e80 	.word	0x20000e80
 8006b4c:	20000e7c 	.word	0x20000e7c
 8006b50:	20000ee4 	.word	0x20000ee4

08006b54 <xTimerCreateTimerTask>:
const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload,
		void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction,
		Timer_t *pxNewTimer) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask(void) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	; 0x28
 8006b58:	af04      	add	r7, sp, #16
	BaseType_t xReturn = pdFAIL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	 configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	 timer service task has been created/initialised.  If timers have already
	 been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b5e:	f000 facb 	bl	80070f8 <prvCheckForValidListAndQueue>

	if (xTimerQueue != NULL) {
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <xTimerCreateTimerTask+0x80>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d021      	beq.n	8006bae <xTimerCreateTimerTask+0x5a>
#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory(&pxTimerTaskTCBBuffer,
 8006b72:	1d3a      	adds	r2, r7, #4
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fa59 	bl	8005034 <vApplicationGetTimerTaskMemory>
					&pxTimerTaskStackBuffer, &ulTimerTaskStackSize);
			xTimerTaskHandle = xTaskCreateStatic(prvTimerTask,
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	9202      	str	r2, [sp, #8]
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	460a      	mov	r2, r1
 8006b94:	4910      	ldr	r1, [pc, #64]	; (8006bd8 <xTimerCreateTimerTask+0x84>)
 8006b96:	4811      	ldr	r0, [pc, #68]	; (8006bdc <xTimerCreateTimerTask+0x88>)
 8006b98:	f7ff f838 	bl	8005c0c <xTaskCreateStatic>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <xTimerCreateTimerTask+0x8c>)
 8006ba0:	6013      	str	r3, [r2, #0]
			configTIMER_SERVICE_TASK_NAME, ulTimerTaskStackSize,
			NULL, ((UBaseType_t) configTIMER_TASK_PRIORITY) | portPRIVILEGE_BIT,
					pxTimerTaskStackBuffer, pxTimerTaskTCBBuffer);

			if (xTimerTaskHandle != NULL) {
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <xTimerCreateTimerTask+0x8c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <xTimerCreateTimerTask+0x5a>
				xReturn = pdPASS;
 8006baa:	2301      	movs	r3, #1
 8006bac:	617b      	str	r3, [r7, #20]
		#endif /* configSUPPORT_STATIC_ALLOCATION */
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT(xReturn);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000f20 	.word	0x20000f20
 8006bd8:	08008598 	.word	0x08008598
 8006bdc:	08006d01 	.word	0x08006d01
 8006be0:	20000f24 	.word	0x20000f24

08006be4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand(TimerHandle_t xTimer,
		const BaseType_t xCommandID, const TickType_t xOptionalValue,
		BaseType_t *const pxHigherPriorityTaskWoken,
		const TickType_t xTicksToWait) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b08a      	sub	sp, #40	; 0x28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn = pdFAIL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
	DaemonTaskMessage_t xMessage;

	configASSERT(xTimer);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	623b      	str	r3, [r7, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	 on a particular timer definition. */
	if (xTimerQueue != NULL) {
 8006c12:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <xTimerGenericCommand+0x98>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d02a      	beq.n	8006c70 <xTimerGenericCommand+0x8c>
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = (Timer_t*) xTimer;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	61bb      	str	r3, [r7, #24]

		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b05      	cmp	r3, #5
 8006c2a:	dc18      	bgt.n	8006c5e <xTimerGenericCommand+0x7a>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
 8006c2c:	f7ff feb2 	bl	8006994 <xTaskGetSchedulerState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d109      	bne.n	8006c4a <xTimerGenericCommand+0x66>
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage,
 8006c36:	4b11      	ldr	r3, [pc, #68]	; (8006c7c <xTimerGenericCommand+0x98>)
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	f107 0110 	add.w	r1, r7, #16
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	f7fe fc01 	bl	8005448 <xQueueGenericSend>
 8006c46:	6278      	str	r0, [r7, #36]	; 0x24
 8006c48:	e012      	b.n	8006c70 <xTimerGenericCommand+0x8c>
						xTicksToWait);
			} else {
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
 8006c4a:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <xTimerGenericCommand+0x98>)
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	f107 0110 	add.w	r1, r7, #16
 8006c52:	2300      	movs	r3, #0
 8006c54:	2200      	movs	r2, #0
 8006c56:	f7fe fbf7 	bl	8005448 <xQueueGenericSend>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c5c:	e008      	b.n	8006c70 <xTimerGenericCommand+0x8c>
			}
		} else {
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage,
 8006c5e:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <xTimerGenericCommand+0x98>)
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	f107 0110 	add.w	r1, r7, #16
 8006c66:	2300      	movs	r3, #0
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	f7fe fceb 	bl	8005644 <xQueueGenericSendFromISR>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24
		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3728      	adds	r7, #40	; 0x28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000f20 	.word	0x20000f20

08006c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer(const TickType_t xNextExpireTime,
		const TickType_t xTimeNow) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
	BaseType_t xResult;
	Timer_t *const pxTimer = (Timer_t*) listGET_OWNER_OF_HEAD_ENTRY(
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <prvProcessExpiredTimer+0x7c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	617b      	str	r3, [r7, #20]
			pxCurrentTimerList);

	/* Remove the timer from the list of active timers.  A check has already
	 been performed to ensure the list is not empty. */
	(void) uxListRemove(&(pxTimer->xTimerListItem));
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fe fa6b 	bl	8005174 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	 expiry time and re-insert the timer in the list of active timers. */
	if (pxTimer->uxAutoReload == (UBaseType_t) pdTRUE) {
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d122      	bne.n	8006cec <prvProcessExpiredTimer+0x6c>
		/* The timer is inserted into a list using a time relative to anything
		 other than the current time.  It will therefore be inserted into the
		 correct list relative to the time this task thinks it is now. */
		if (prvInsertTimerInActiveList(pxTimer,
				(xNextExpireTime + pxTimer->xTimerPeriodInTicks), xTimeNow,
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	699a      	ldr	r2, [r3, #24]
		if (prvInsertTimerInActiveList(pxTimer,
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	18d1      	adds	r1, r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	6978      	ldr	r0, [r7, #20]
 8006cb4:	f000 f8c8 	bl	8006e48 <prvInsertTimerInActiveList>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d016      	beq.n	8006cec <prvProcessExpiredTimer+0x6c>
				xNextExpireTime) != pdFALSE) {
			/* The timer expired before it was added to the active timer
			 list.  Reload it now.  */
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE,
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	2100      	movs	r1, #0
 8006cc8:	6978      	ldr	r0, [r7, #20]
 8006cca:	f7ff ff8b 	bl	8006be4 <xTimerGenericCommand>
 8006cce:	6138      	str	r0, [r7, #16]
					xNextExpireTime, NULL, tmrNO_DELAY);
			configASSERT(xResult);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	60fb      	str	r3, [r7, #12]
}
 8006ce8:	bf00      	nop
 8006cea:	e7fe      	b.n	8006cea <prvProcessExpiredTimer+0x6a>
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	6978      	ldr	r0, [r7, #20]
 8006cf2:	4798      	blx	r3
}
 8006cf4:	bf00      	nop
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000f18 	.word	0x20000f18

08006d00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask(void *pvParameters) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */

	for (;;) {
		/* Query the timers list to see if it contains any timers, and if so,
		 obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 8006d08:	f107 0308 	add.w	r3, r7, #8
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f857 	bl	8006dc0 <prvGetNextExpireTime>
 8006d12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		 until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask(xNextExpireTime, xListWasEmpty);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4619      	mov	r1, r3
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f803 	bl	8006d24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d1e:	f000 f8d5 	bl	8006ecc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime(&xListWasEmpty);
 8006d22:	e7f1      	b.n	8006d08 <prvTimerTask+0x8>

08006d24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask(const TickType_t xNextExpireTime,
		BaseType_t xListWasEmpty) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeNow;
	BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d2e:	f7ff fa3f 	bl	80061b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		 has expired or not.  If obtaining the time causes the lists to switch
		 then don't process this timer as any timers that remained in the list
		 when the lists were switched will have been processed within the
		 prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f866 	bl	8006e08 <prvSampleTimeNow>
 8006d3c:	60f8      	str	r0, [r7, #12]
		if (xTimerListsWereSwitched == pdFALSE) {
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d130      	bne.n	8006da6 <prvProcessTimerOrBlockTask+0x82>
			/* The tick count has not overflowed, has the timer expired? */
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <prvProcessTimerOrBlockTask+0x3c>
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d806      	bhi.n	8006d60 <prvProcessTimerOrBlockTask+0x3c>
				(void) xTaskResumeAll();
 8006d52:	f7ff fa3b 	bl	80061cc <xTaskResumeAll>
				prvProcessExpiredTimer(xNextExpireTime, xTimeNow);
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ff91 	bl	8006c80 <prvProcessExpiredTimer>
			}
		} else {
			(void) xTaskResumeAll();
		}
	}
}
 8006d5e:	e024      	b.n	8006daa <prvProcessTimerOrBlockTask+0x86>
				if (xListWasEmpty != pdFALSE) {
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d008      	beq.n	8006d78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
 8006d66:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <prvProcessTimerOrBlockTask+0x90>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted(xTimerQueue,
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <prvProcessTimerOrBlockTask+0x94>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	4619      	mov	r1, r3
 8006d86:	f7fe ff0d 	bl	8005ba4 <vQueueWaitForMessageRestricted>
				if (xTaskResumeAll() == pdFALSE) {
 8006d8a:	f7ff fa1f 	bl	80061cc <xTaskResumeAll>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10a      	bne.n	8006daa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API()
 8006d94:	4b09      	ldr	r3, [pc, #36]	; (8006dbc <prvProcessTimerOrBlockTask+0x98>)
 8006d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	f3bf 8f6f 	isb	sy
}
 8006da4:	e001      	b.n	8006daa <prvProcessTimerOrBlockTask+0x86>
			(void) xTaskResumeAll();
 8006da6:	f7ff fa11 	bl	80061cc <xTaskResumeAll>
}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000f1c 	.word	0x20000f1c
 8006db8:	20000f20 	.word	0x20000f20
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime(BaseType_t *const pxListWasEmpty) {
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
	 the timer with the nearest expiry time will expire.  If there are no
	 active timers then just set the next expire time to 0.  That will cause
	 this task to unblock when the tick count overflows, at which point the
	 timer lists will be switched and the next expiry time can be
	 re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
 8006dc8:	4b0e      	ldr	r3, [pc, #56]	; (8006e04 <prvGetNextExpireTime+0x44>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf0c      	ite	eq
 8006dd2:	2301      	moveq	r3, #1
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	461a      	mov	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	601a      	str	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d105      	bne.n	8006df2 <prvGetNextExpireTime+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <prvGetNextExpireTime+0x44>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]
 8006df0:	e001      	b.n	8006df6 <prvGetNextExpireTime+0x36>
	} else {
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = (TickType_t) 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bc80      	pop	{r7}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	20000f18 	.word	0x20000f18

08006e08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow(BaseType_t *const pxTimerListsWereSwitched) {
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeNow;
	PRIVILEGED_DATA static TickType_t xLastTime = (TickType_t) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e10:	f7ff fa7a 	bl	8006308 <xTaskGetTickCount>
 8006e14:	60f8      	str	r0, [r7, #12]

	if (xTimeNow < xLastTime) {
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <prvSampleTimeNow+0x3c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d205      	bcs.n	8006e2c <prvSampleTimeNow+0x24>
		prvSwitchTimerLists();
 8006e20:	f000 f908 	bl	8007034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e002      	b.n	8006e32 <prvSampleTimeNow+0x2a>
	} else {
		*pxTimerListsWereSwitched = pdFALSE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e32:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <prvSampleTimeNow+0x3c>)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e38:	68fb      	ldr	r3, [r7, #12]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	20000f28 	.word	0x20000f28

08006e48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer,
		const TickType_t xNextExpiryTime, const TickType_t xTimeNow,
		const TickType_t xCommandTime) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
	BaseType_t xProcessTimerNow = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	611a      	str	r2, [r3, #16]

	if (xNextExpiryTime <= xTimeNow) {
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d812      	bhi.n	8006e94 <prvInsertTimerInActiveList+0x4c>
		/* Has the expiry time elapsed between the command to start/reset a
		 timer was issued, and the time the command was processed? */
		if (((TickType_t) (xTimeNow - xCommandTime))
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1ad2      	subs	r2, r2, r3
				>= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	699b      	ldr	r3, [r3, #24]
		if (((TickType_t) (xTimeNow - xCommandTime))
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d302      	bcc.n	8006e82 <prvInsertTimerInActiveList+0x3a>
				{
			/* The time between a command being issued and the command being
			 processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e01b      	b.n	8006eba <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <prvInsertTimerInActiveList+0x7c>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	f7fe f939 	bl	8005104 <vListInsert>
 8006e92:	e012      	b.n	8006eba <prvInsertTimerInActiveList+0x72>
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d206      	bcs.n	8006eaa <prvInsertTimerInActiveList+0x62>
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d302      	bcc.n	8006eaa <prvInsertTimerInActiveList+0x62>
			/* If, since the command was issued, the tick count has overflowed
			 but the expiry time has not, then the timer must have already passed
			 its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	e007      	b.n	8006eba <prvInsertTimerInActiveList+0x72>
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <prvInsertTimerInActiveList+0x80>)
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	f7fe f925 	bl	8005104 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006eba:	697b      	ldr	r3, [r7, #20]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000f1c 	.word	0x20000f1c
 8006ec8:	20000f18 	.word	0x20000f18

08006ecc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void prvProcessReceivedCommands(void) {
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08e      	sub	sp, #56	; 0x38
 8006ed0:	af02      	add	r7, sp, #8
	DaemonTaskMessage_t xMessage;
	Timer_t *pxTimer;
	BaseType_t xTimerListsWereSwitched, xResult;
	TickType_t xTimeNow;

	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ed2:	e09d      	b.n	8007010 <prvProcessReceivedCommands+0x144>
	{
#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			 commands. */
			if (xMessage.xMessageID < (BaseType_t) 0) {
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da18      	bge.n	8006f0c <prvProcessReceivedCommands+0x40>
				const CallbackParameters_t *const pxCallback =
 8006eda:	1d3b      	adds	r3, r7, #4
 8006edc:	3304      	adds	r3, #4
 8006ede:	62fb      	str	r3, [r7, #44]	; 0x2c
						&(xMessage.u.xCallbackParameters);

				/* The timer uses the xCallbackParameters member to request a
				 callback be executed.  Check the callback is not NULL. */
				configASSERT(pxCallback);
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10a      	bne.n	8006efc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	61fb      	str	r3, [r7, #28]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction(pxCallback->pvParameter1,
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f02:	6850      	ldr	r0, [r2, #4]
 8006f04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f06:	6892      	ldr	r2, [r2, #8]
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4798      	blx	r3
		}
#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		 function calls. */
		if (xMessage.xMessageID >= (BaseType_t) 0) {
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db7d      	blt.n	800700e <prvProcessReceivedCommands+0x142>
			/* The messages uses the xTimerParameters member to work on a
			 software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	62bb      	str	r3, [r7, #40]	; 0x28

			if ( listIS_CONTAINED_WITHIN(NULL,
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <prvProcessReceivedCommands+0x5c>
					&(pxTimer->xTimerListItem)) == pdFALSE) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
					{
				/* The timer is in a list, remove it. */
				(void) uxListRemove(&(pxTimer->xTimerListItem));
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	3304      	adds	r3, #4
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe f926 	bl	8005174 <uxListRemove>
			 it must be present in the function call.  prvSampleTimeNow() must be
			 called after the message is received from xTimerQueue so there is no
			 possibility of a higher priority task adding a message to the message
			 queue with a time that is ahead of the timer daemon task (because it
			 pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
 8006f28:	463b      	mov	r3, r7
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff ff6c 	bl	8006e08 <prvSampleTimeNow>
 8006f30:	6278      	str	r0, [r7, #36]	; 0x24

			switch (xMessage.xMessageID) {
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b09      	cmp	r3, #9
 8006f36:	d86b      	bhi.n	8007010 <prvProcessReceivedCommands+0x144>
 8006f38:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <prvProcessReceivedCommands+0x74>)
 8006f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3e:	bf00      	nop
 8006f40:	08006f69 	.word	0x08006f69
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f69 	.word	0x08006f69
 8006f4c:	08007011 	.word	0x08007011
 8006f50:	08006fc5 	.word	0x08006fc5
 8006f54:	08006ffd 	.word	0x08006ffd
 8006f58:	08006f69 	.word	0x08006f69
 8006f5c:	08006f69 	.word	0x08006f69
 8006f60:	08007011 	.word	0x08007011
 8006f64:	08006fc5 	.word	0x08006fc5
			case tmrCOMMAND_RESET:
			case tmrCOMMAND_RESET_FROM_ISR:
			case tmrCOMMAND_START_DONT_TRACE:
				/* Start or restart a timer. */
				if (prvInsertTimerInActiveList(pxTimer,
						xMessage.u.xTimerParameters.xMessageValue
 8006f68:	68ba      	ldr	r2, [r7, #8]
								+ pxTimer->xTimerPeriodInTicks, xTimeNow,
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	699b      	ldr	r3, [r3, #24]
				if (prvInsertTimerInActiveList(pxTimer,
 8006f6e:	18d1      	adds	r1, r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f76:	f7ff ff67 	bl	8006e48 <prvInsertTimerInActiveList>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d047      	beq.n	8007010 <prvProcessReceivedCommands+0x144>
						xMessage.u.xTimerParameters.xMessageValue) != pdFALSE) {
					/* The timer expired before it was added to the active
					 timer list.  Process it now. */
					pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f86:	4798      	blx	r3
					traceTIMER_EXPIRED( pxTimer );

					if (pxTimer->uxAutoReload == (UBaseType_t) pdTRUE) {
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d13f      	bne.n	8007010 <prvProcessReceivedCommands+0x144>
						xResult = xTimerGenericCommand(pxTimer,
								tmrCOMMAND_START_DONT_TRACE,
								xMessage.u.xTimerParameters.xMessageValue
 8006f90:	68ba      	ldr	r2, [r7, #8]
										+ pxTimer->xTimerPeriodInTicks, NULL,
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	699b      	ldr	r3, [r3, #24]
						xResult = xTimerGenericCommand(pxTimer,
 8006f96:	441a      	add	r2, r3
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa2:	f7ff fe1f 	bl	8006be4 <xTimerGenericCommand>
 8006fa6:	6238      	str	r0, [r7, #32]
								tmrNO_DELAY);
						configASSERT(xResult);
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d130      	bne.n	8007010 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61bb      	str	r3, [r7, #24]
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <prvProcessReceivedCommands+0xf6>
				break;

			case tmrCOMMAND_CHANGE_PERIOD:
			case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
				pxTimer->xTimerPeriodInTicks =
						xMessage.u.xTimerParameters.xMessageValue;
 8006fc4:	68ba      	ldr	r2, [r7, #8]
				pxTimer->xTimerPeriodInTicks =
 8006fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc8:	619a      	str	r2, [r3, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0))
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	617b      	str	r3, [r7, #20]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <prvProcessReceivedCommands+0x11a>
				 therefore set to the current time, and as the period cannot
				 be zero the next expiry time can only be in the future,
				 meaning (unlike for the xTimerStart() case above) there is
				 no fail case that needs to be handled here. */
				(void) prvInsertTimerInActiveList(pxTimer,
						(xTimeNow + pxTimer->xTimerPeriodInTicks), xTimeNow,
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	699a      	ldr	r2, [r3, #24]
				(void) prvInsertTimerInActiveList(pxTimer,
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	18d1      	adds	r1, r2, r3
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff6:	f7ff ff27 	bl	8006e48 <prvInsertTimerInActiveList>
						xTimeNow);
				break;
 8006ffa:	e009      	b.n	8007010 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
			{
				/* The timer could have been allocated statically or
				 dynamically, so check before attempting to free the
				 memory. */
				if (pxTimer->ucStaticallyAllocated == (uint8_t) pdFALSE) {
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <prvProcessReceivedCommands+0x144>
					vPortFree(pxTimer);
 8007006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007008:	f000 fb6c 	bl	80076e4 <vPortFree>
				} else {
					mtCOVERAGE_TEST_MARKER();
				}
			}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
				break;
 800700c:	e000      	b.n	8007010 <prvProcessReceivedCommands+0x144>

			default:
				/* Don't expect to get here. */
				break;
			}
		}
 800700e:	bf00      	nop
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY) != pdFAIL) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007010:	4b07      	ldr	r3, [pc, #28]	; (8007030 <prvProcessReceivedCommands+0x164>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	1d39      	adds	r1, r7, #4
 8007016:	2200      	movs	r2, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fbab 	bl	8005774 <xQueueReceive>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f47f af57 	bne.w	8006ed4 <prvProcessReceivedCommands+0x8>
	}
}
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	3730      	adds	r7, #48	; 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20000f20 	.word	0x20000f20

08007034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists(void) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	 If there are any timers still referenced from the current timer list
	 then they must have expired and should be processed before the lists
	 are switched. */
	while ( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE) {
 800703a:	e045      	b.n	80070c8 <prvSwitchTimerLists+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
 800703c:	4b2c      	ldr	r3, [pc, #176]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = (Timer_t*) listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
 8007046:	4b2a      	ldr	r3, [pc, #168]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	60fb      	str	r3, [r7, #12]
		(void) uxListRemove(&(pxTimer->xTimerListItem));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3304      	adds	r3, #4
 8007054:	4618      	mov	r0, r3
 8007056:	f7fe f88d 	bl	8005174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		 it is an auto-reload timer.  It cannot be restarted here as the lists
		 have not yet been switched. */
		pxTimer->pxCallbackFunction((TimerHandle_t) pxTimer);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	4798      	blx	r3

		if (pxTimer->uxAutoReload == (UBaseType_t) pdTRUE) {
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d12e      	bne.n	80070c8 <prvSwitchTimerLists+0x94>
			 the timer going into the same timer list then it has already expired
			 and the timer should be re-inserted into the current list so it is
			 processed again within this loop.  Otherwise a command should be sent
			 to restart the timer to ensure it is only inserted into a list after
			 the lists have been swapped. */
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	60bb      	str	r3, [r7, #8]
			if (xReloadTime > xNextExpireTime) {
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d90e      	bls.n	800709a <prvSwitchTimerLists+0x66>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem),
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	605a      	str	r2, [r3, #4]
						xReloadTime);
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	611a      	str	r2, [r3, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
 8007088:	4b19      	ldr	r3, [pc, #100]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3304      	adds	r3, #4
 8007090:	4619      	mov	r1, r3
 8007092:	4610      	mov	r0, r2
 8007094:	f7fe f836 	bl	8005104 <vListInsert>
 8007098:	e016      	b.n	80070c8 <prvSwitchTimerLists+0x94>
			} else {
				xResult = xTimerGenericCommand(pxTimer,
 800709a:	2300      	movs	r3, #0
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2300      	movs	r3, #0
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	2100      	movs	r1, #0
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fd9d 	bl	8006be4 <xTimerGenericCommand>
 80070aa:	6078      	str	r0, [r7, #4]
						tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL,
						tmrNO_DELAY);
				configASSERT(xResult);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	603b      	str	r3, [r7, #0]
}
 80070c4:	bf00      	nop
 80070c6:	e7fe      	b.n	80070c6 <prvSwitchTimerLists+0x92>
	while ( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE) {
 80070c8:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1b4      	bne.n	800703c <prvSwitchTimerLists+0x8>
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a04      	ldr	r2, [pc, #16]	; (80070f0 <prvSwitchTimerLists+0xbc>)
 80070de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <prvSwitchTimerLists+0xc0>)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	6013      	str	r3, [r2, #0]
}
 80070e6:	bf00      	nop
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000f18 	.word	0x20000f18
 80070f4:	20000f1c 	.word	0x20000f1c

080070f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	 queue used to communicate with the timer service, have been
	 initialised. */
	taskENTER_CRITICAL();
 80070fe:	f000 f92d 	bl	800735c <vPortEnterCritical>
	{
		if (xTimerQueue == NULL) {
 8007102:	4b15      	ldr	r3, [pc, #84]	; (8007158 <prvCheckForValidListAndQueue+0x60>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d120      	bne.n	800714c <prvCheckForValidListAndQueue+0x54>
			vListInitialise(&xActiveTimerList1);
 800710a:	4814      	ldr	r0, [pc, #80]	; (800715c <prvCheckForValidListAndQueue+0x64>)
 800710c:	f7fd ffac 	bl	8005068 <vListInitialise>
			vListInitialise(&xActiveTimerList2);
 8007110:	4813      	ldr	r0, [pc, #76]	; (8007160 <prvCheckForValidListAndQueue+0x68>)
 8007112:	f7fd ffa9 	bl	8005068 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <prvCheckForValidListAndQueue+0x6c>)
 8007118:	4a10      	ldr	r2, [pc, #64]	; (800715c <prvCheckForValidListAndQueue+0x64>)
 800711a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800711c:	4b12      	ldr	r3, [pc, #72]	; (8007168 <prvCheckForValidListAndQueue+0x70>)
 800711e:	4a10      	ldr	r2, [pc, #64]	; (8007160 <prvCheckForValidListAndQueue+0x68>)
 8007120:	601a      	str	r2, [r3, #0]
				 configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[(size_t) configTIMER_QUEUE_LENGTH
						* sizeof(DaemonTaskMessage_t)]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic(
 8007122:	2300      	movs	r3, #0
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <prvCheckForValidListAndQueue+0x74>)
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <prvCheckForValidListAndQueue+0x78>)
 800712a:	2110      	movs	r1, #16
 800712c:	200a      	movs	r0, #10
 800712e:	f7fe f8b3 	bl	8005298 <xQueueGenericCreateStatic>
 8007132:	4603      	mov	r3, r0
 8007134:	4a08      	ldr	r2, [pc, #32]	; (8007158 <prvCheckForValidListAndQueue+0x60>)
 8007136:	6013      	str	r3, [r2, #0]
			}
			#endif

#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if (xTimerQueue != NULL) {
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <prvCheckForValidListAndQueue+0x60>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <prvCheckForValidListAndQueue+0x54>
					vQueueAddToRegistry(xTimerQueue, "TmrQ");
 8007140:	4b05      	ldr	r3, [pc, #20]	; (8007158 <prvCheckForValidListAndQueue+0x60>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	490b      	ldr	r1, [pc, #44]	; (8007174 <prvCheckForValidListAndQueue+0x7c>)
 8007146:	4618      	mov	r0, r3
 8007148:	f7fe fd04 	bl	8005b54 <vQueueAddToRegistry>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800714c:	f000 f936 	bl	80073bc <vPortExitCritical>
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	20000f20 	.word	0x20000f20
 800715c:	20000ef0 	.word	0x20000ef0
 8007160:	20000f04 	.word	0x20000f04
 8007164:	20000f18 	.word	0x20000f18
 8007168:	20000f1c 	.word	0x20000f1c
 800716c:	20000fcc 	.word	0x20000fcc
 8007170:	20000f2c 	.word	0x20000f2c
 8007174:	080085a0 	.word	0x080085a0

08007178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3b04      	subs	r3, #4
 8007188:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3b04      	subs	r3, #4
 8007196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 0201 	bic.w	r2, r3, #1
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3b04      	subs	r3, #4
 80071a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 80071a8:	4a08      	ldr	r2, [pc, #32]	; (80071cc <pxPortInitialiseStack+0x54>)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	3b14      	subs	r3, #20
 80071b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3b20      	subs	r3, #32
 80071be:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr
 80071cc:	080071d1 	.word	0x080071d1

080071d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0UL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 80071da:	4b12      	ldr	r3, [pc, #72]	; (8007224 <prvTaskExitError+0x54>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071e2:	d00a      	beq.n	80071fa <prvTaskExitError+0x2a>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <prvTaskExitError+0x28>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60bb      	str	r3, [r7, #8]
}
 800720c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 800720e:	bf00      	nop
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0fc      	beq.n	8007210 <prvTaskExitError+0x40>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000060 	.word	0x20000060
	...

08007230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <pxCurrentTCBConst2>)
 8007232:	6819      	ldr	r1, [r3, #0]
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800723a:	f380 8809 	msr	PSP, r0
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f04f 0000 	mov.w	r0, #0
 8007246:	f380 8811 	msr	BASEPRI, r0
 800724a:	f04e 0e0d 	orr.w	lr, lr, #13
 800724e:	4770      	bx	lr

08007250 <pxCurrentTCBConst2>:
 8007250:	200009f0 	.word	0x200009f0
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop

08007258 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask(void) {
	__asm volatile(
 8007258:	4806      	ldr	r0, [pc, #24]	; (8007274 <prvPortStartFirstTask+0x1c>)
 800725a:	6800      	ldr	r0, [r0, #0]
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f380 8808 	msr	MSP, r0
 8007262:	b662      	cpsie	i
 8007264:	b661      	cpsie	f
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	df00      	svc	0
 8007270:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 8007272:	bf00      	nop
 8007274:	e000ed08 	.word	0xe000ed08

08007278 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 800727e:	4b32      	ldr	r3, [pc, #200]	; (8007348 <xPortStartScheduler+0xd0>)
 8007280:	60fb      	str	r3, [r7, #12]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	b2db      	uxtb	r3, r3
 800729c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072a0:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 80072a2:	4b2a      	ldr	r3, [pc, #168]	; (800734c <xPortStartScheduler+0xd4>)
 80072a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <xPortStartScheduler+0xd8>)
 80072a8:	2207      	movs	r2, #7
 80072aa:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80072ac:	e009      	b.n	80072c2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 80072ae:	4b28      	ldr	r3, [pc, #160]	; (8007350 <xPortStartScheduler+0xd8>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	4a26      	ldr	r2, [pc, #152]	; (8007350 <xPortStartScheduler+0xd8>)
 80072b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ca:	2b80      	cmp	r3, #128	; 0x80
 80072cc:	d0ef      	beq.n	80072ae <xPortStartScheduler+0x36>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 80072ce:	4b20      	ldr	r3, [pc, #128]	; (8007350 <xPortStartScheduler+0xd8>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f1c3 0307 	rsb	r3, r3, #7
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d00a      	beq.n	80072f0 <xPortStartScheduler+0x78>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	60bb      	str	r3, [r7, #8]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xPortStartScheduler+0x76>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072f0:	4b17      	ldr	r3, [pc, #92]	; (8007350 <xPortStartScheduler+0xd8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	4a16      	ldr	r2, [pc, #88]	; (8007350 <xPortStartScheduler+0xd8>)
 80072f8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <xPortStartScheduler+0xd8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007302:	4a13      	ldr	r2, [pc, #76]	; (8007350 <xPortStartScheduler+0xd8>)
 8007304:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	b2da      	uxtb	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800730e:	4b11      	ldr	r3, [pc, #68]	; (8007354 <xPortStartScheduler+0xdc>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <xPortStartScheduler+0xdc>)
 8007314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007318:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800731a:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <xPortStartScheduler+0xdc>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a0d      	ldr	r2, [pc, #52]	; (8007354 <xPortStartScheduler+0xdc>)
 8007320:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007324:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8007326:	f000 f8b9 	bl	800749c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <xPortStartScheduler+0xe0>)
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007330:	f7ff ff92 	bl	8007258 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8007334:	f7ff f8b4 	bl	80064a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007338:	f7ff ff4a 	bl	80071d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	e000e400 	.word	0xe000e400
 800734c:	2000101c 	.word	0x2000101c
 8007350:	20001020 	.word	0x20001020
 8007354:	e000ed20 	.word	0xe000ed20
 8007358:	20000060 	.word	0x20000060

0800735c <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	__asm volatile
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	607b      	str	r3, [r7, #4]
}
 8007374:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007376:	4b0f      	ldr	r3, [pc, #60]	; (80073b4 <vPortEnterCritical+0x58>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3301      	adds	r3, #1
 800737c:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <vPortEnterCritical+0x58>)
 800737e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 8007380:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <vPortEnterCritical+0x58>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d10f      	bne.n	80073a8 <vPortEnterCritical+0x4c>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8007388:	4b0b      	ldr	r3, [pc, #44]	; (80073b8 <vPortEnterCritical+0x5c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <vPortEnterCritical+0x4c>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	603b      	str	r3, [r7, #0]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <vPortEnterCritical+0x4a>
	}
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000060 	.word	0x20000060
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 80073c2:	4b11      	ldr	r3, [pc, #68]	; (8007408 <vPortExitCritical+0x4c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <vPortExitCritical+0x24>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	607b      	str	r3, [r7, #4]
}
 80073dc:	bf00      	nop
 80073de:	e7fe      	b.n	80073de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073e0:	4b09      	ldr	r3, [pc, #36]	; (8007408 <vPortExitCritical+0x4c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3b01      	subs	r3, #1
 80073e6:	4a08      	ldr	r2, [pc, #32]	; (8007408 <vPortExitCritical+0x4c>)
 80073e8:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <vPortExitCritical+0x4c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <vPortExitCritical+0x42>
 80073f2:	2300      	movs	r3, #0
 80073f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	f383 8811 	msr	BASEPRI, r3
}
 80073fc:	bf00      	nop
		portENABLE_INTERRUPTS();
	}
}
 80073fe:	bf00      	nop
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	bc80      	pop	{r7}
 8007406:	4770      	bx	lr
 8007408:	20000060 	.word	0x20000060
 800740c:	00000000 	.word	0x00000000

08007410 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b0d      	ldr	r3, [pc, #52]	; (8007450 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007420:	6010      	str	r0, [r2, #0]
 8007422:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007426:	f04f 0050 	mov.w	r0, #80	; 0x50
 800742a:	f380 8811 	msr	BASEPRI, r0
 800742e:	f7ff f837 	bl	80064a0 <vTaskSwitchContext>
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8811 	msr	BASEPRI, r0
 800743a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800743e:	6819      	ldr	r1, [r3, #0]
 8007440:	6808      	ldr	r0, [r1, #0]
 8007442:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007446:	f380 8809 	msr	PSP, r0
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	4770      	bx	lr

08007450 <pxCurrentTCBConst>:
 8007450:	200009f0 	.word	0x200009f0
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
	 save and then restore the interrupt mask value as its value is already
	 known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8007472:	f7fe ff57 	bl	8006324 <xTaskIncrementTick>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d003      	beq.n	8007484 <SysTick_Handler+0x2c>
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <SysTick_Handler+0x40>)
 800747e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	2300      	movs	r3, #0
 8007486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	f383 8811 	msr	BASEPRI, r3
}
 800748e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074a0:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <vPortSetupTimerInterrupt+0x30>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <vPortSetupTimerInterrupt+0x34>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 80074ac:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <vPortSetupTimerInterrupt+0x38>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a09      	ldr	r2, [pc, #36]	; (80074d8 <vPortSetupTimerInterrupt+0x3c>)
 80074b2:	fba2 2303 	umull	r2, r3, r2, r3
 80074b6:	099b      	lsrs	r3, r3, #6
 80074b8:	4a08      	ldr	r2, [pc, #32]	; (80074dc <vPortSetupTimerInterrupt+0x40>)
			- 1UL;
 80074ba:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 80074bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 80074be:	4b03      	ldr	r3, [pc, #12]	; (80074cc <vPortSetupTimerInterrupt+0x30>)
 80074c0:	2207      	movs	r2, #7
 80074c2:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 80074c4:	bf00      	nop
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr
 80074cc:	e000e010 	.word	0xe000e010
 80074d0:	e000e018 	.word	0xe000e018
 80074d4:	20000054 	.word	0x20000054
 80074d8:	10624dd3 	.word	0x10624dd3
 80074dc:	e000e014 	.word	0xe000e014

080074e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074e6:	f3ef 8305 	mrs	r3, IPSR
 80074ea:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d914      	bls.n	800751c <vPortValidateInterruptPriority+0x3c>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 80074f2:	4a16      	ldr	r2, [pc, #88]	; (800754c <vPortValidateInterruptPriority+0x6c>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 80074fc:	4b14      	ldr	r3, [pc, #80]	; (8007550 <vPortValidateInterruptPriority+0x70>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	7afa      	ldrb	r2, [r7, #11]
 8007502:	429a      	cmp	r2, r3
 8007504:	d20a      	bcs.n	800751c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	607b      	str	r3, [r7, #4]
}
 8007518:	bf00      	nop
 800751a:	e7fe      	b.n	800751a <vPortValidateInterruptPriority+0x3a>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <vPortValidateInterruptPriority+0x74>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <vPortValidateInterruptPriority+0x78>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d90a      	bls.n	8007542 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	603b      	str	r3, [r7, #0]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vPortValidateInterruptPriority+0x60>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr
 800754c:	e000e3f0 	.word	0xe000e3f0
 8007550:	2000101c 	.word	0x2000101c
 8007554:	e000ed0c 	.word	0xe000ed0c
 8007558:	20001020 	.word	0x20001020

0800755c <pvPortMalloc>:
 space. */
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void* pvPortMalloc(size_t xWantedSize) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
	void *pvReturn = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007568:	f7fe fe22 	bl	80061b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		 initialisation to setup the list of free blocks. */
		if (pxEnd == NULL) {
 800756c:	4b58      	ldr	r3, [pc, #352]	; (80076d0 <pvPortMalloc+0x174>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <pvPortMalloc+0x1c>
			prvHeapInit();
 8007574:	f000 f910 	bl	8007798 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		 set.  The top bit of the block size member of the BlockLink_t structure
		 is used to determine who owns the block - the application or the
		 kernel, so it must be free. */
		if ((xWantedSize & xBlockAllocatedBit) == 0) {
 8007578:	4b56      	ldr	r3, [pc, #344]	; (80076d4 <pvPortMalloc+0x178>)
 800757a:	681a      	ldr	r2, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4013      	ands	r3, r2
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 808e 	bne.w	80076a2 <pvPortMalloc+0x146>
			/* The wanted size is increased so it can contain a BlockLink_t
			 structure in addition to the requested amount of bytes. */
			if (xWantedSize > 0) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d01d      	beq.n	80075c8 <pvPortMalloc+0x6c>
				xWantedSize += xHeapStructSize;
 800758c:	2208      	movs	r2, #8
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				 of bytes. */
				if ((xWantedSize & portBYTE_ALIGNMENT_MASK) != 0x00) {
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f003 0307 	and.w	r3, r3, #7
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <pvPortMalloc+0x6c>
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f023 0307 	bic.w	r3, r3, #7
 80075a4:	3308      	adds	r3, #8
 80075a6:	607b      	str	r3, [r7, #4]
							- (xWantedSize & portBYTE_ALIGNMENT_MASK));
					configASSERT(( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f003 0307 	and.w	r3, r3, #7
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <pvPortMalloc+0x6c>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	617b      	str	r3, [r7, #20]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <pvPortMalloc+0x6a>
				}
			} else {
				mtCOVERAGE_TEST_MARKER();
			}

			if ((xWantedSize > 0) && (xWantedSize <= xFreeBytesRemaining)) {
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d069      	beq.n	80076a2 <pvPortMalloc+0x146>
 80075ce:	4b42      	ldr	r3, [pc, #264]	; (80076d8 <pvPortMalloc+0x17c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d864      	bhi.n	80076a2 <pvPortMalloc+0x146>
				/* Traverse the list from the start	(lowest address) block until
				 one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075d8:	4b40      	ldr	r3, [pc, #256]	; (80076dc <pvPortMalloc+0x180>)
 80075da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075dc:	4b3f      	ldr	r3, [pc, #252]	; (80076dc <pvPortMalloc+0x180>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 80075e2:	e004      	b.n	80075ee <pvPortMalloc+0x92>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
					pxPreviousBlock = pxBlock;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
				while ((pxBlock->xBlockSize < xWantedSize)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d903      	bls.n	8007600 <pvPortMalloc+0xa4>
						&& (pxBlock->pxNextFreeBlock != NULL)) {
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f1      	bne.n	80075e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				 was	not found. */
				if (pxBlock != pxEnd) {
 8007600:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <pvPortMalloc+0x174>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007606:	429a      	cmp	r2, r3
 8007608:	d04b      	beq.n	80076a2 <pvPortMalloc+0x146>
					/* Return the memory space pointed to - jumping over the
					 BlockLink_t structure at its start. */
					pvReturn =
							(void*) (((uint8_t*) pxPreviousBlock->pxNextFreeBlock)
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2208      	movs	r2, #8
					pvReturn =
 8007610:	4413      	add	r3, r2
 8007612:	61fb      	str	r3, [r7, #28]
									+ xHeapStructSize);

					/* This block is being returned for use so must be taken out
					 of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					 two. */
					if ((pxBlock->xBlockSize - xWantedSize)
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	1ad2      	subs	r2, r2, r3
							> heapMINIMUM_BLOCK_SIZE) {
 8007624:	2308      	movs	r3, #8
 8007626:	005b      	lsls	r3, r3, #1
					if ((pxBlock->xBlockSize - xWantedSize)
 8007628:	429a      	cmp	r2, r3
 800762a:	d91f      	bls.n	800766c <pvPortMalloc+0x110>
						/* This block is to be split into two.  Create a new
						 block following the number of bytes requested. The void
						 cast is used to prevent byte alignment warnings from the
						 compiler. */
						pxNewBlockLink = (void*) (((uint8_t*) pxBlock)
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	61bb      	str	r3, [r7, #24]
								+ xWantedSize);
						configASSERT(
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <pvPortMalloc+0xf8>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	613b      	str	r3, [r7, #16]
}
 8007650:	bf00      	nop
 8007652:	e7fe      	b.n	8007652 <pvPortMalloc+0xf6>
								( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0);

						/* Calculate the sizes of two blocks split from the
						 single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	685a      	ldr	r2, [r3, #4]
								- xWantedSize;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1ad2      	subs	r2, r2, r3
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList(pxNewBlockLink);
 8007666:	69b8      	ldr	r0, [r7, #24]
 8007668:	f000 f8f8 	bl	800785c <prvInsertBlockIntoFreeList>
					} else {
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <pvPortMalloc+0x17c>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <pvPortMalloc+0x17c>)
 8007678:	6013      	str	r3, [r2, #0]

					if (xFreeBytesRemaining < xMinimumEverFreeBytesRemaining) {
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <pvPortMalloc+0x17c>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <pvPortMalloc+0x184>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	429a      	cmp	r2, r3
 8007684:	d203      	bcs.n	800768e <pvPortMalloc+0x132>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007686:	4b14      	ldr	r3, [pc, #80]	; (80076d8 <pvPortMalloc+0x17c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a15      	ldr	r2, [pc, #84]	; (80076e0 <pvPortMalloc+0x184>)
 800768c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					 by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <pvPortMalloc+0x178>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	431a      	orrs	r2, r3
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	(void) xTaskResumeAll();
 80076a2:	f7fe fd93 	bl	80061cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT(
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <pvPortMalloc+0x16a>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <pvPortMalloc+0x168>
			( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0);
	return pvReturn;
 80076c6:	69fb      	ldr	r3, [r7, #28]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3728      	adds	r7, #40	; 0x28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20001c2c 	.word	0x20001c2c
 80076d4:	20001c38 	.word	0x20001c38
 80076d8:	20001c30 	.word	0x20001c30
 80076dc:	20001c24 	.word	0x20001c24
 80076e0:	20001c34 	.word	0x20001c34

080076e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree(void *pv) {
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b086      	sub	sp, #24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
	uint8_t *puc = (uint8_t*) pv;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	if (pv != NULL) {
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d048      	beq.n	8007788 <vPortFree+0xa4>
		/* The memory being freed will have an BlockLink_t structure immediately
		 before it. */
		puc -= xHeapStructSize;
 80076f6:	2308      	movs	r3, #8
 80076f8:	425b      	negs	r3, r3
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = (void*) puc;
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT((pxLink->xBlockSize & xBlockAllocatedBit) != 0);
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	4b21      	ldr	r3, [pc, #132]	; (8007790 <vPortFree+0xac>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4013      	ands	r3, r2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <vPortFree+0x44>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60fb      	str	r3, [r7, #12]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <vPortFree+0x42>
		configASSERT(pxLink->pxNextFreeBlock == NULL);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00a      	beq.n	8007746 <vPortFree+0x62>
	__asm volatile
 8007730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007734:	f383 8811 	msr	BASEPRI, r3
 8007738:	f3bf 8f6f 	isb	sy
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	60bb      	str	r3, [r7, #8]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <vPortFree+0x60>

		if ((pxLink->xBlockSize & xBlockAllocatedBit) != 0) {
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	4b11      	ldr	r3, [pc, #68]	; (8007790 <vPortFree+0xac>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <vPortFree+0xa4>
			if (pxLink->pxNextFreeBlock == NULL) {
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d115      	bne.n	8007788 <vPortFree+0xa4>
				/* The block is being returned to the heap - it is no longer
				 allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <vPortFree+0xac>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800776c:	f7fe fd20 	bl	80061b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <vPortFree+0xb0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4413      	add	r3, r2
 800777a:	4a06      	ldr	r2, [pc, #24]	; (8007794 <vPortFree+0xb0>)
 800777c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList(((BlockLink_t*) pxLink));
 800777e:	6938      	ldr	r0, [r7, #16]
 8007780:	f000 f86c 	bl	800785c <prvInsertBlockIntoFreeList>
				}
				(void) xTaskResumeAll();
 8007784:	f7fe fd22 	bl	80061cc <xTaskResumeAll>
			}
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007788:	bf00      	nop
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	20001c38 	.word	0x20001c38
 8007794:	20001c30 	.word	0x20001c30

08007798 <prvHeapInit>:
void vPortInitialiseBlocks(void) {
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit(void) {
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
	BlockLink_t *pxFirstFreeBlock;
	uint8_t *pucAlignedHeap;
	size_t uxAddress;
	size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800779e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80077a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = (size_t) ucHeap;
 80077a4:	4b27      	ldr	r3, [pc, #156]	; (8007844 <prvHeapInit+0xac>)
 80077a6:	60fb      	str	r3, [r7, #12]

	if ((uxAddress & portBYTE_ALIGNMENT_MASK) != 0) {
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00c      	beq.n	80077cc <prvHeapInit+0x34>
		uxAddress += ( portBYTE_ALIGNMENT - 1);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3307      	adds	r3, #7
 80077b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - (size_t) ucHeap;
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	4a1f      	ldr	r2, [pc, #124]	; (8007844 <prvHeapInit+0xac>)
 80077c8:	4413      	add	r3, r2
 80077ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = (uint8_t*) uxAddress;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	 blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = (void*) pucAlignedHeap;
 80077d0:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <prvHeapInit+0xb0>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = (size_t) 0;
 80077d6:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <prvHeapInit+0xb0>)
 80077d8:	2200      	movs	r2, #0
 80077da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	 at the end of the heap space. */
	uxAddress = ((size_t) pucAlignedHeap) + xTotalHeapSize;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	4413      	add	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077e4:	2208      	movs	r2, #8
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1a9b      	subs	r3, r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~((size_t) portBYTE_ALIGNMENT_MASK);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0307 	bic.w	r3, r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]
	pxEnd = (void*) uxAddress;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a15      	ldr	r2, [pc, #84]	; (800784c <prvHeapInit+0xb4>)
 80077f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077fa:	4b14      	ldr	r3, [pc, #80]	; (800784c <prvHeapInit+0xb4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <prvHeapInit+0xb4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	 entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = (void*) pucAlignedHeap;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - (size_t) pxFirstFreeBlock;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	1ad2      	subs	r2, r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <prvHeapInit+0xb4>)
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <prvHeapInit+0xb8>)
 8007826:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	4a09      	ldr	r2, [pc, #36]	; (8007854 <prvHeapInit+0xbc>)
 800782e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ((size_t) 1)
 8007830:	4b09      	ldr	r3, [pc, #36]	; (8007858 <prvHeapInit+0xc0>)
 8007832:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007836:	601a      	str	r2, [r3, #0]
			<< ((sizeof(size_t) * heapBITS_PER_BYTE) - 1);
}
 8007838:	bf00      	nop
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20001024 	.word	0x20001024
 8007848:	20001c24 	.word	0x20001c24
 800784c:	20001c2c 	.word	0x20001c2c
 8007850:	20001c34 	.word	0x20001c34
 8007854:	20001c30 	.word	0x20001c30
 8007858:	20001c38 	.word	0x20001c38

0800785c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList(BlockLink_t *pxBlockToInsert) {
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	BlockLink_t *pxIterator;
	uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	 than the block being inserted. */
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8007864:	4b27      	ldr	r3, [pc, #156]	; (8007904 <prvInsertBlockIntoFreeList+0xa8>)
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	e002      	b.n	8007870 <prvInsertBlockIntoFreeList+0x14>
			pxIterator = pxIterator->pxNextFreeBlock) {
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	60fb      	str	r3, [r7, #12]
	for (pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d8f7      	bhi.n	800786a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxIterator;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	60bb      	str	r3, [r7, #8]
	if ((puc + pxIterator->xBlockSize) == (uint8_t*) pxBlockToInsert) {
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	68ba      	ldr	r2, [r7, #8]
 8007884:	4413      	add	r3, r2
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d108      	bne.n	800789e <prvInsertBlockIntoFreeList+0x42>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	441a      	add	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	 make a contiguous block of memory? */
	puc = (uint8_t*) pxBlockToInsert;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60bb      	str	r3, [r7, #8]
	if ((puc + pxBlockToInsert->xBlockSize)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	441a      	add	r2, r3
			== (uint8_t*) pxIterator->pxNextFreeBlock) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
	if ((puc + pxBlockToInsert->xBlockSize)
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d118      	bne.n	80078e4 <prvInsertBlockIntoFreeList+0x88>
		if (pxIterator->pxNextFreeBlock != pxEnd) {
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <prvInsertBlockIntoFreeList+0xac>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d00d      	beq.n	80078da <prvInsertBlockIntoFreeList+0x7e>
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize +=
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685a      	ldr	r2, [r3, #4]
					pxIterator->pxNextFreeBlock->xBlockSize;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
			pxBlockToInsert->xBlockSize +=
 80078c8:	441a      	add	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock =
					pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
			pxBlockToInsert->pxNextFreeBlock =
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e008      	b.n	80078ec <prvInsertBlockIntoFreeList+0x90>
		} else {
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <prvInsertBlockIntoFreeList+0xac>)
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e003      	b.n	80078ec <prvInsertBlockIntoFreeList+0x90>
		}
	} else {
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	 before and the block after, then it's pxNextFreeBlock pointer will have
	 already been set, and should not be set here as that would make it point
	 to itself. */
	if (pxIterator != pxBlockToInsert) {
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d002      	beq.n	80078fa <prvInsertBlockIntoFreeList+0x9e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	bc80      	pop	{r7}
 8007902:	4770      	bx	lr
 8007904:	20001c24 	.word	0x20001c24
 8007908:	20001c2c 	.word	0x20001c2c

0800790c <calloc>:
 800790c:	4b02      	ldr	r3, [pc, #8]	; (8007918 <calloc+0xc>)
 800790e:	460a      	mov	r2, r1
 8007910:	4601      	mov	r1, r0
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	f000 b9c6 	b.w	8007ca4 <_calloc_r>
 8007918:	20000064 	.word	0x20000064

0800791c <__errno>:
 800791c:	4b01      	ldr	r3, [pc, #4]	; (8007924 <__errno+0x8>)
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	20000064 	.word	0x20000064

08007928 <exit>:
 8007928:	b508      	push	{r3, lr}
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <exit+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	b113      	cbz	r3, 8007936 <exit+0xe>
 8007930:	2100      	movs	r1, #0
 8007932:	f3af 8000 	nop.w
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <exit+0x24>)
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800793c:	b103      	cbz	r3, 8007940 <exit+0x18>
 800793e:	4798      	blx	r3
 8007940:	4620      	mov	r0, r4
 8007942:	f7fa ffb1 	bl	80028a8 <_exit>
 8007946:	bf00      	nop
 8007948:	00000000 	.word	0x00000000
 800794c:	08008668 	.word	0x08008668

08007950 <std>:
 8007950:	2300      	movs	r3, #0
 8007952:	b510      	push	{r4, lr}
 8007954:	4604      	mov	r4, r0
 8007956:	e9c0 3300 	strd	r3, r3, [r0]
 800795a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800795e:	6083      	str	r3, [r0, #8]
 8007960:	8181      	strh	r1, [r0, #12]
 8007962:	6643      	str	r3, [r0, #100]	; 0x64
 8007964:	81c2      	strh	r2, [r0, #14]
 8007966:	6183      	str	r3, [r0, #24]
 8007968:	4619      	mov	r1, r3
 800796a:	2208      	movs	r2, #8
 800796c:	305c      	adds	r0, #92	; 0x5c
 800796e:	f000 f991 	bl	8007c94 <memset>
 8007972:	4b05      	ldr	r3, [pc, #20]	; (8007988 <std+0x38>)
 8007974:	6224      	str	r4, [r4, #32]
 8007976:	6263      	str	r3, [r4, #36]	; 0x24
 8007978:	4b04      	ldr	r3, [pc, #16]	; (800798c <std+0x3c>)
 800797a:	62a3      	str	r3, [r4, #40]	; 0x28
 800797c:	4b04      	ldr	r3, [pc, #16]	; (8007990 <std+0x40>)
 800797e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <std+0x44>)
 8007982:	6323      	str	r3, [r4, #48]	; 0x30
 8007984:	bd10      	pop	{r4, pc}
 8007986:	bf00      	nop
 8007988:	08007f79 	.word	0x08007f79
 800798c:	08007f9b 	.word	0x08007f9b
 8007990:	08007fd3 	.word	0x08007fd3
 8007994:	08007ff7 	.word	0x08007ff7

08007998 <_cleanup_r>:
 8007998:	4901      	ldr	r1, [pc, #4]	; (80079a0 <_cleanup_r+0x8>)
 800799a:	f000 b8af 	b.w	8007afc <_fwalk_reent>
 800799e:	bf00      	nop
 80079a0:	08008301 	.word	0x08008301

080079a4 <__sfmoreglue>:
 80079a4:	2268      	movs	r2, #104	; 0x68
 80079a6:	b570      	push	{r4, r5, r6, lr}
 80079a8:	1e4d      	subs	r5, r1, #1
 80079aa:	4355      	muls	r5, r2
 80079ac:	460e      	mov	r6, r1
 80079ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079b2:	f000 f9f3 	bl	8007d9c <_malloc_r>
 80079b6:	4604      	mov	r4, r0
 80079b8:	b140      	cbz	r0, 80079cc <__sfmoreglue+0x28>
 80079ba:	2100      	movs	r1, #0
 80079bc:	e9c0 1600 	strd	r1, r6, [r0]
 80079c0:	300c      	adds	r0, #12
 80079c2:	60a0      	str	r0, [r4, #8]
 80079c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079c8:	f000 f964 	bl	8007c94 <memset>
 80079cc:	4620      	mov	r0, r4
 80079ce:	bd70      	pop	{r4, r5, r6, pc}

080079d0 <__sfp_lock_acquire>:
 80079d0:	4801      	ldr	r0, [pc, #4]	; (80079d8 <__sfp_lock_acquire+0x8>)
 80079d2:	f000 b946 	b.w	8007c62 <__retarget_lock_acquire_recursive>
 80079d6:	bf00      	nop
 80079d8:	20001c3d 	.word	0x20001c3d

080079dc <__sfp_lock_release>:
 80079dc:	4801      	ldr	r0, [pc, #4]	; (80079e4 <__sfp_lock_release+0x8>)
 80079de:	f000 b941 	b.w	8007c64 <__retarget_lock_release_recursive>
 80079e2:	bf00      	nop
 80079e4:	20001c3d 	.word	0x20001c3d

080079e8 <__sinit_lock_acquire>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sinit_lock_acquire+0x8>)
 80079ea:	f000 b93a 	b.w	8007c62 <__retarget_lock_acquire_recursive>
 80079ee:	bf00      	nop
 80079f0:	20001c3e 	.word	0x20001c3e

080079f4 <__sinit_lock_release>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sinit_lock_release+0x8>)
 80079f6:	f000 b935 	b.w	8007c64 <__retarget_lock_release_recursive>
 80079fa:	bf00      	nop
 80079fc:	20001c3e 	.word	0x20001c3e

08007a00 <__sinit>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	4604      	mov	r4, r0
 8007a04:	f7ff fff0 	bl	80079e8 <__sinit_lock_acquire>
 8007a08:	69a3      	ldr	r3, [r4, #24]
 8007a0a:	b11b      	cbz	r3, 8007a14 <__sinit+0x14>
 8007a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a10:	f7ff bff0 	b.w	80079f4 <__sinit_lock_release>
 8007a14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a18:	6523      	str	r3, [r4, #80]	; 0x50
 8007a1a:	4b13      	ldr	r3, [pc, #76]	; (8007a68 <__sinit+0x68>)
 8007a1c:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <__sinit+0x6c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a22:	42a3      	cmp	r3, r4
 8007a24:	bf08      	it	eq
 8007a26:	2301      	moveq	r3, #1
 8007a28:	4620      	mov	r0, r4
 8007a2a:	bf08      	it	eq
 8007a2c:	61a3      	streq	r3, [r4, #24]
 8007a2e:	f000 f81f 	bl	8007a70 <__sfp>
 8007a32:	6060      	str	r0, [r4, #4]
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 f81b 	bl	8007a70 <__sfp>
 8007a3a:	60a0      	str	r0, [r4, #8]
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 f817 	bl	8007a70 <__sfp>
 8007a42:	2200      	movs	r2, #0
 8007a44:	2104      	movs	r1, #4
 8007a46:	60e0      	str	r0, [r4, #12]
 8007a48:	6860      	ldr	r0, [r4, #4]
 8007a4a:	f7ff ff81 	bl	8007950 <std>
 8007a4e:	2201      	movs	r2, #1
 8007a50:	2109      	movs	r1, #9
 8007a52:	68a0      	ldr	r0, [r4, #8]
 8007a54:	f7ff ff7c 	bl	8007950 <std>
 8007a58:	2202      	movs	r2, #2
 8007a5a:	2112      	movs	r1, #18
 8007a5c:	68e0      	ldr	r0, [r4, #12]
 8007a5e:	f7ff ff77 	bl	8007950 <std>
 8007a62:	2301      	movs	r3, #1
 8007a64:	61a3      	str	r3, [r4, #24]
 8007a66:	e7d1      	b.n	8007a0c <__sinit+0xc>
 8007a68:	08008668 	.word	0x08008668
 8007a6c:	08007999 	.word	0x08007999

08007a70 <__sfp>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	4607      	mov	r7, r0
 8007a74:	f7ff ffac 	bl	80079d0 <__sfp_lock_acquire>
 8007a78:	4b1e      	ldr	r3, [pc, #120]	; (8007af4 <__sfp+0x84>)
 8007a7a:	681e      	ldr	r6, [r3, #0]
 8007a7c:	69b3      	ldr	r3, [r6, #24]
 8007a7e:	b913      	cbnz	r3, 8007a86 <__sfp+0x16>
 8007a80:	4630      	mov	r0, r6
 8007a82:	f7ff ffbd 	bl	8007a00 <__sinit>
 8007a86:	3648      	adds	r6, #72	; 0x48
 8007a88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	d503      	bpl.n	8007a98 <__sfp+0x28>
 8007a90:	6833      	ldr	r3, [r6, #0]
 8007a92:	b30b      	cbz	r3, 8007ad8 <__sfp+0x68>
 8007a94:	6836      	ldr	r6, [r6, #0]
 8007a96:	e7f7      	b.n	8007a88 <__sfp+0x18>
 8007a98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a9c:	b9d5      	cbnz	r5, 8007ad4 <__sfp+0x64>
 8007a9e:	4b16      	ldr	r3, [pc, #88]	; (8007af8 <__sfp+0x88>)
 8007aa0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007aa4:	60e3      	str	r3, [r4, #12]
 8007aa6:	6665      	str	r5, [r4, #100]	; 0x64
 8007aa8:	f000 f8da 	bl	8007c60 <__retarget_lock_init_recursive>
 8007aac:	f7ff ff96 	bl	80079dc <__sfp_lock_release>
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ab8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007abc:	6025      	str	r5, [r4, #0]
 8007abe:	61a5      	str	r5, [r4, #24]
 8007ac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ac4:	f000 f8e6 	bl	8007c94 <memset>
 8007ac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007acc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad4:	3468      	adds	r4, #104	; 0x68
 8007ad6:	e7d9      	b.n	8007a8c <__sfp+0x1c>
 8007ad8:	2104      	movs	r1, #4
 8007ada:	4638      	mov	r0, r7
 8007adc:	f7ff ff62 	bl	80079a4 <__sfmoreglue>
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	6030      	str	r0, [r6, #0]
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d1d5      	bne.n	8007a94 <__sfp+0x24>
 8007ae8:	f7ff ff78 	bl	80079dc <__sfp_lock_release>
 8007aec:	230c      	movs	r3, #12
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	e7ee      	b.n	8007ad0 <__sfp+0x60>
 8007af2:	bf00      	nop
 8007af4:	08008668 	.word	0x08008668
 8007af8:	ffff0001 	.word	0xffff0001

08007afc <_fwalk_reent>:
 8007afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b00:	4606      	mov	r6, r0
 8007b02:	4688      	mov	r8, r1
 8007b04:	2700      	movs	r7, #0
 8007b06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b0e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b12:	d505      	bpl.n	8007b20 <_fwalk_reent+0x24>
 8007b14:	6824      	ldr	r4, [r4, #0]
 8007b16:	2c00      	cmp	r4, #0
 8007b18:	d1f7      	bne.n	8007b0a <_fwalk_reent+0xe>
 8007b1a:	4638      	mov	r0, r7
 8007b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b20:	89ab      	ldrh	r3, [r5, #12]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d907      	bls.n	8007b36 <_fwalk_reent+0x3a>
 8007b26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	d003      	beq.n	8007b36 <_fwalk_reent+0x3a>
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4630      	mov	r0, r6
 8007b32:	47c0      	blx	r8
 8007b34:	4307      	orrs	r7, r0
 8007b36:	3568      	adds	r5, #104	; 0x68
 8007b38:	e7e9      	b.n	8007b0e <_fwalk_reent+0x12>
	...

08007b3c <_fwrite_r>:
 8007b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	9c08      	ldr	r4, [sp, #32]
 8007b42:	468a      	mov	sl, r1
 8007b44:	4690      	mov	r8, r2
 8007b46:	4605      	mov	r5, r0
 8007b48:	fb02 f903 	mul.w	r9, r2, r3
 8007b4c:	b118      	cbz	r0, 8007b56 <_fwrite_r+0x1a>
 8007b4e:	6983      	ldr	r3, [r0, #24]
 8007b50:	b90b      	cbnz	r3, 8007b56 <_fwrite_r+0x1a>
 8007b52:	f7ff ff55 	bl	8007a00 <__sinit>
 8007b56:	4b26      	ldr	r3, [pc, #152]	; (8007bf0 <_fwrite_r+0xb4>)
 8007b58:	429c      	cmp	r4, r3
 8007b5a:	d123      	bne.n	8007ba4 <_fwrite_r+0x68>
 8007b5c:	686c      	ldr	r4, [r5, #4]
 8007b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b60:	07de      	lsls	r6, r3, #31
 8007b62:	d405      	bmi.n	8007b70 <_fwrite_r+0x34>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	0598      	lsls	r0, r3, #22
 8007b68:	d402      	bmi.n	8007b70 <_fwrite_r+0x34>
 8007b6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6c:	f000 f879 	bl	8007c62 <__retarget_lock_acquire_recursive>
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	0719      	lsls	r1, r3, #28
 8007b74:	d520      	bpl.n	8007bb8 <_fwrite_r+0x7c>
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	b1f3      	cbz	r3, 8007bb8 <_fwrite_r+0x7c>
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	454e      	cmp	r6, r9
 8007b7e:	d029      	beq.n	8007bd4 <_fwrite_r+0x98>
 8007b80:	68a7      	ldr	r7, [r4, #8]
 8007b82:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8007b86:	3f01      	subs	r7, #1
 8007b88:	2f00      	cmp	r7, #0
 8007b8a:	60a7      	str	r7, [r4, #8]
 8007b8c:	da04      	bge.n	8007b98 <_fwrite_r+0x5c>
 8007b8e:	69a3      	ldr	r3, [r4, #24]
 8007b90:	429f      	cmp	r7, r3
 8007b92:	db19      	blt.n	8007bc8 <_fwrite_r+0x8c>
 8007b94:	290a      	cmp	r1, #10
 8007b96:	d017      	beq.n	8007bc8 <_fwrite_r+0x8c>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	6022      	str	r2, [r4, #0]
 8007b9e:	7019      	strb	r1, [r3, #0]
 8007ba0:	3601      	adds	r6, #1
 8007ba2:	e7eb      	b.n	8007b7c <_fwrite_r+0x40>
 8007ba4:	4b13      	ldr	r3, [pc, #76]	; (8007bf4 <_fwrite_r+0xb8>)
 8007ba6:	429c      	cmp	r4, r3
 8007ba8:	d101      	bne.n	8007bae <_fwrite_r+0x72>
 8007baa:	68ac      	ldr	r4, [r5, #8]
 8007bac:	e7d7      	b.n	8007b5e <_fwrite_r+0x22>
 8007bae:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <_fwrite_r+0xbc>)
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	bf08      	it	eq
 8007bb4:	68ec      	ldreq	r4, [r5, #12]
 8007bb6:	e7d2      	b.n	8007b5e <_fwrite_r+0x22>
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4628      	mov	r0, r5
 8007bbc:	f000 faa0 	bl	8008100 <__swsetup_r>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d0da      	beq.n	8007b7a <_fwrite_r+0x3e>
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	e005      	b.n	8007bd4 <_fwrite_r+0x98>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f000 fa34 	bl	8008038 <__swbuf_r>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d1e5      	bne.n	8007ba0 <_fwrite_r+0x64>
 8007bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd6:	07da      	lsls	r2, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_fwrite_r+0xaa>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	059b      	lsls	r3, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_fwrite_r+0xaa>
 8007be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007be2:	f000 f83f 	bl	8007c64 <__retarget_lock_release_recursive>
 8007be6:	fbb6 f0f8 	udiv	r0, r6, r8
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	bf00      	nop
 8007bf0:	08008628 	.word	0x08008628
 8007bf4:	08008648 	.word	0x08008648
 8007bf8:	08008608 	.word	0x08008608

08007bfc <fwrite>:
 8007bfc:	b507      	push	{r0, r1, r2, lr}
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	4613      	mov	r3, r2
 8007c02:	460a      	mov	r2, r1
 8007c04:	4601      	mov	r1, r0
 8007c06:	4803      	ldr	r0, [pc, #12]	; (8007c14 <fwrite+0x18>)
 8007c08:	6800      	ldr	r0, [r0, #0]
 8007c0a:	f7ff ff97 	bl	8007b3c <_fwrite_r>
 8007c0e:	b003      	add	sp, #12
 8007c10:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c14:	20000064 	.word	0x20000064

08007c18 <__libc_init_array>:
 8007c18:	b570      	push	{r4, r5, r6, lr}
 8007c1a:	2600      	movs	r6, #0
 8007c1c:	4d0c      	ldr	r5, [pc, #48]	; (8007c50 <__libc_init_array+0x38>)
 8007c1e:	4c0d      	ldr	r4, [pc, #52]	; (8007c54 <__libc_init_array+0x3c>)
 8007c20:	1b64      	subs	r4, r4, r5
 8007c22:	10a4      	asrs	r4, r4, #2
 8007c24:	42a6      	cmp	r6, r4
 8007c26:	d109      	bne.n	8007c3c <__libc_init_array+0x24>
 8007c28:	f000 fc5e 	bl	80084e8 <_init>
 8007c2c:	2600      	movs	r6, #0
 8007c2e:	4d0a      	ldr	r5, [pc, #40]	; (8007c58 <__libc_init_array+0x40>)
 8007c30:	4c0a      	ldr	r4, [pc, #40]	; (8007c5c <__libc_init_array+0x44>)
 8007c32:	1b64      	subs	r4, r4, r5
 8007c34:	10a4      	asrs	r4, r4, #2
 8007c36:	42a6      	cmp	r6, r4
 8007c38:	d105      	bne.n	8007c46 <__libc_init_array+0x2e>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c40:	4798      	blx	r3
 8007c42:	3601      	adds	r6, #1
 8007c44:	e7ee      	b.n	8007c24 <__libc_init_array+0xc>
 8007c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c4a:	4798      	blx	r3
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	e7f2      	b.n	8007c36 <__libc_init_array+0x1e>
 8007c50:	0800866c 	.word	0x0800866c
 8007c54:	0800866c 	.word	0x0800866c
 8007c58:	0800866c 	.word	0x0800866c
 8007c5c:	08008670 	.word	0x08008670

08007c60 <__retarget_lock_init_recursive>:
 8007c60:	4770      	bx	lr

08007c62 <__retarget_lock_acquire_recursive>:
 8007c62:	4770      	bx	lr

08007c64 <__retarget_lock_release_recursive>:
 8007c64:	4770      	bx	lr
	...

08007c68 <free>:
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <free+0xc>)
 8007c6a:	4601      	mov	r1, r0
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	f000 b82d 	b.w	8007ccc <_free_r>
 8007c72:	bf00      	nop
 8007c74:	20000064 	.word	0x20000064

08007c78 <memcpy>:
 8007c78:	440a      	add	r2, r1
 8007c7a:	4291      	cmp	r1, r2
 8007c7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007c80:	d100      	bne.n	8007c84 <memcpy+0xc>
 8007c82:	4770      	bx	lr
 8007c84:	b510      	push	{r4, lr}
 8007c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c8a:	4291      	cmp	r1, r2
 8007c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c90:	d1f9      	bne.n	8007c86 <memcpy+0xe>
 8007c92:	bd10      	pop	{r4, pc}

08007c94 <memset>:
 8007c94:	4603      	mov	r3, r0
 8007c96:	4402      	add	r2, r0
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d100      	bne.n	8007c9e <memset+0xa>
 8007c9c:	4770      	bx	lr
 8007c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca2:	e7f9      	b.n	8007c98 <memset+0x4>

08007ca4 <_calloc_r>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	fba1 5402 	umull	r5, r4, r1, r2
 8007caa:	b934      	cbnz	r4, 8007cba <_calloc_r+0x16>
 8007cac:	4629      	mov	r1, r5
 8007cae:	f000 f875 	bl	8007d9c <_malloc_r>
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	b928      	cbnz	r0, 8007cc2 <_calloc_r+0x1e>
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	220c      	movs	r2, #12
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	6002      	str	r2, [r0, #0]
 8007cc0:	e7f9      	b.n	8007cb6 <_calloc_r+0x12>
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	f7ff ffe5 	bl	8007c94 <memset>
 8007cca:	e7f4      	b.n	8007cb6 <_calloc_r+0x12>

08007ccc <_free_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4605      	mov	r5, r0
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	d040      	beq.n	8007d56 <_free_r+0x8a>
 8007cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd8:	1f0c      	subs	r4, r1, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bfb8      	it	lt
 8007cde:	18e4      	addlt	r4, r4, r3
 8007ce0:	f000 fbc2 	bl	8008468 <__malloc_lock>
 8007ce4:	4a1c      	ldr	r2, [pc, #112]	; (8007d58 <_free_r+0x8c>)
 8007ce6:	6813      	ldr	r3, [r2, #0]
 8007ce8:	b933      	cbnz	r3, 8007cf8 <_free_r+0x2c>
 8007cea:	6063      	str	r3, [r4, #4]
 8007cec:	6014      	str	r4, [r2, #0]
 8007cee:	4628      	mov	r0, r5
 8007cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf4:	f000 bbbe 	b.w	8008474 <__malloc_unlock>
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	d908      	bls.n	8007d0e <_free_r+0x42>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	1821      	adds	r1, r4, r0
 8007d00:	428b      	cmp	r3, r1
 8007d02:	bf01      	itttt	eq
 8007d04:	6819      	ldreq	r1, [r3, #0]
 8007d06:	685b      	ldreq	r3, [r3, #4]
 8007d08:	1809      	addeq	r1, r1, r0
 8007d0a:	6021      	streq	r1, [r4, #0]
 8007d0c:	e7ed      	b.n	8007cea <_free_r+0x1e>
 8007d0e:	461a      	mov	r2, r3
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	b10b      	cbz	r3, 8007d18 <_free_r+0x4c>
 8007d14:	42a3      	cmp	r3, r4
 8007d16:	d9fa      	bls.n	8007d0e <_free_r+0x42>
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	1850      	adds	r0, r2, r1
 8007d1c:	42a0      	cmp	r0, r4
 8007d1e:	d10b      	bne.n	8007d38 <_free_r+0x6c>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	4401      	add	r1, r0
 8007d24:	1850      	adds	r0, r2, r1
 8007d26:	4283      	cmp	r3, r0
 8007d28:	6011      	str	r1, [r2, #0]
 8007d2a:	d1e0      	bne.n	8007cee <_free_r+0x22>
 8007d2c:	6818      	ldr	r0, [r3, #0]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	4401      	add	r1, r0
 8007d32:	6011      	str	r1, [r2, #0]
 8007d34:	6053      	str	r3, [r2, #4]
 8007d36:	e7da      	b.n	8007cee <_free_r+0x22>
 8007d38:	d902      	bls.n	8007d40 <_free_r+0x74>
 8007d3a:	230c      	movs	r3, #12
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	e7d6      	b.n	8007cee <_free_r+0x22>
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	1821      	adds	r1, r4, r0
 8007d44:	428b      	cmp	r3, r1
 8007d46:	bf01      	itttt	eq
 8007d48:	6819      	ldreq	r1, [r3, #0]
 8007d4a:	685b      	ldreq	r3, [r3, #4]
 8007d4c:	1809      	addeq	r1, r1, r0
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6054      	str	r4, [r2, #4]
 8007d54:	e7cb      	b.n	8007cee <_free_r+0x22>
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20001c40 	.word	0x20001c40

08007d5c <sbrk_aligned>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0e      	ldr	r6, [pc, #56]	; (8007d98 <sbrk_aligned+0x3c>)
 8007d60:	460c      	mov	r4, r1
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	4605      	mov	r5, r0
 8007d66:	b911      	cbnz	r1, 8007d6e <sbrk_aligned+0x12>
 8007d68:	f000 f8f6 	bl	8007f58 <_sbrk_r>
 8007d6c:	6030      	str	r0, [r6, #0]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 f8f1 	bl	8007f58 <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d00a      	beq.n	8007d90 <sbrk_aligned+0x34>
 8007d7a:	1cc4      	adds	r4, r0, #3
 8007d7c:	f024 0403 	bic.w	r4, r4, #3
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d007      	beq.n	8007d94 <sbrk_aligned+0x38>
 8007d84:	1a21      	subs	r1, r4, r0
 8007d86:	4628      	mov	r0, r5
 8007d88:	f000 f8e6 	bl	8007f58 <_sbrk_r>
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d101      	bne.n	8007d94 <sbrk_aligned+0x38>
 8007d90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007d94:	4620      	mov	r0, r4
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	20001c44 	.word	0x20001c44

08007d9c <_malloc_r>:
 8007d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da0:	1ccd      	adds	r5, r1, #3
 8007da2:	f025 0503 	bic.w	r5, r5, #3
 8007da6:	3508      	adds	r5, #8
 8007da8:	2d0c      	cmp	r5, #12
 8007daa:	bf38      	it	cc
 8007dac:	250c      	movcc	r5, #12
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	4607      	mov	r7, r0
 8007db2:	db01      	blt.n	8007db8 <_malloc_r+0x1c>
 8007db4:	42a9      	cmp	r1, r5
 8007db6:	d905      	bls.n	8007dc4 <_malloc_r+0x28>
 8007db8:	230c      	movs	r3, #12
 8007dba:	2600      	movs	r6, #0
 8007dbc:	603b      	str	r3, [r7, #0]
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc4:	4e2e      	ldr	r6, [pc, #184]	; (8007e80 <_malloc_r+0xe4>)
 8007dc6:	f000 fb4f 	bl	8008468 <__malloc_lock>
 8007dca:	6833      	ldr	r3, [r6, #0]
 8007dcc:	461c      	mov	r4, r3
 8007dce:	bb34      	cbnz	r4, 8007e1e <_malloc_r+0x82>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	f7ff ffc2 	bl	8007d5c <sbrk_aligned>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	4604      	mov	r4, r0
 8007ddc:	d14d      	bne.n	8007e7a <_malloc_r+0xde>
 8007dde:	6834      	ldr	r4, [r6, #0]
 8007de0:	4626      	mov	r6, r4
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	d140      	bne.n	8007e68 <_malloc_r+0xcc>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	4631      	mov	r1, r6
 8007dea:	4638      	mov	r0, r7
 8007dec:	eb04 0803 	add.w	r8, r4, r3
 8007df0:	f000 f8b2 	bl	8007f58 <_sbrk_r>
 8007df4:	4580      	cmp	r8, r0
 8007df6:	d13a      	bne.n	8007e6e <_malloc_r+0xd2>
 8007df8:	6821      	ldr	r1, [r4, #0]
 8007dfa:	3503      	adds	r5, #3
 8007dfc:	1a6d      	subs	r5, r5, r1
 8007dfe:	f025 0503 	bic.w	r5, r5, #3
 8007e02:	3508      	adds	r5, #8
 8007e04:	2d0c      	cmp	r5, #12
 8007e06:	bf38      	it	cc
 8007e08:	250c      	movcc	r5, #12
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7ff ffa5 	bl	8007d5c <sbrk_aligned>
 8007e12:	3001      	adds	r0, #1
 8007e14:	d02b      	beq.n	8007e6e <_malloc_r+0xd2>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	442b      	add	r3, r5
 8007e1a:	6023      	str	r3, [r4, #0]
 8007e1c:	e00e      	b.n	8007e3c <_malloc_r+0xa0>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	1b52      	subs	r2, r2, r5
 8007e22:	d41e      	bmi.n	8007e62 <_malloc_r+0xc6>
 8007e24:	2a0b      	cmp	r2, #11
 8007e26:	d916      	bls.n	8007e56 <_malloc_r+0xba>
 8007e28:	1961      	adds	r1, r4, r5
 8007e2a:	42a3      	cmp	r3, r4
 8007e2c:	6025      	str	r5, [r4, #0]
 8007e2e:	bf18      	it	ne
 8007e30:	6059      	strne	r1, [r3, #4]
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	bf08      	it	eq
 8007e36:	6031      	streq	r1, [r6, #0]
 8007e38:	5162      	str	r2, [r4, r5]
 8007e3a:	604b      	str	r3, [r1, #4]
 8007e3c:	4638      	mov	r0, r7
 8007e3e:	f104 060b 	add.w	r6, r4, #11
 8007e42:	f000 fb17 	bl	8008474 <__malloc_unlock>
 8007e46:	f026 0607 	bic.w	r6, r6, #7
 8007e4a:	1d23      	adds	r3, r4, #4
 8007e4c:	1af2      	subs	r2, r6, r3
 8007e4e:	d0b6      	beq.n	8007dbe <_malloc_r+0x22>
 8007e50:	1b9b      	subs	r3, r3, r6
 8007e52:	50a3      	str	r3, [r4, r2]
 8007e54:	e7b3      	b.n	8007dbe <_malloc_r+0x22>
 8007e56:	6862      	ldr	r2, [r4, #4]
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	bf0c      	ite	eq
 8007e5c:	6032      	streq	r2, [r6, #0]
 8007e5e:	605a      	strne	r2, [r3, #4]
 8007e60:	e7ec      	b.n	8007e3c <_malloc_r+0xa0>
 8007e62:	4623      	mov	r3, r4
 8007e64:	6864      	ldr	r4, [r4, #4]
 8007e66:	e7b2      	b.n	8007dce <_malloc_r+0x32>
 8007e68:	4634      	mov	r4, r6
 8007e6a:	6876      	ldr	r6, [r6, #4]
 8007e6c:	e7b9      	b.n	8007de2 <_malloc_r+0x46>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	4638      	mov	r0, r7
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	f000 fafe 	bl	8008474 <__malloc_unlock>
 8007e78:	e7a1      	b.n	8007dbe <_malloc_r+0x22>
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	e7de      	b.n	8007e3c <_malloc_r+0xa0>
 8007e7e:	bf00      	nop
 8007e80:	20001c40 	.word	0x20001c40

08007e84 <cleanup_glue>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	460c      	mov	r4, r1
 8007e88:	6809      	ldr	r1, [r1, #0]
 8007e8a:	4605      	mov	r5, r0
 8007e8c:	b109      	cbz	r1, 8007e92 <cleanup_glue+0xe>
 8007e8e:	f7ff fff9 	bl	8007e84 <cleanup_glue>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9a:	f7ff bf17 	b.w	8007ccc <_free_r>
	...

08007ea0 <_reclaim_reent>:
 8007ea0:	4b2c      	ldr	r3, [pc, #176]	; (8007f54 <_reclaim_reent+0xb4>)
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	d051      	beq.n	8007f50 <_reclaim_reent+0xb0>
 8007eac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007eae:	b143      	cbz	r3, 8007ec2 <_reclaim_reent+0x22>
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d14a      	bne.n	8007f4c <_reclaim_reent+0xac>
 8007eb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eb8:	6819      	ldr	r1, [r3, #0]
 8007eba:	b111      	cbz	r1, 8007ec2 <_reclaim_reent+0x22>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7ff ff05 	bl	8007ccc <_free_r>
 8007ec2:	6961      	ldr	r1, [r4, #20]
 8007ec4:	b111      	cbz	r1, 8007ecc <_reclaim_reent+0x2c>
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7ff ff00 	bl	8007ccc <_free_r>
 8007ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ece:	b111      	cbz	r1, 8007ed6 <_reclaim_reent+0x36>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7ff fefb 	bl	8007ccc <_free_r>
 8007ed6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ed8:	b111      	cbz	r1, 8007ee0 <_reclaim_reent+0x40>
 8007eda:	4620      	mov	r0, r4
 8007edc:	f7ff fef6 	bl	8007ccc <_free_r>
 8007ee0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ee2:	b111      	cbz	r1, 8007eea <_reclaim_reent+0x4a>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7ff fef1 	bl	8007ccc <_free_r>
 8007eea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007eec:	b111      	cbz	r1, 8007ef4 <_reclaim_reent+0x54>
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff feec 	bl	8007ccc <_free_r>
 8007ef4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ef6:	b111      	cbz	r1, 8007efe <_reclaim_reent+0x5e>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7ff fee7 	bl	8007ccc <_free_r>
 8007efe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f00:	b111      	cbz	r1, 8007f08 <_reclaim_reent+0x68>
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7ff fee2 	bl	8007ccc <_free_r>
 8007f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0a:	b111      	cbz	r1, 8007f12 <_reclaim_reent+0x72>
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff fedd 	bl	8007ccc <_free_r>
 8007f12:	69a3      	ldr	r3, [r4, #24]
 8007f14:	b1e3      	cbz	r3, 8007f50 <_reclaim_reent+0xb0>
 8007f16:	4620      	mov	r0, r4
 8007f18:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f1a:	4798      	blx	r3
 8007f1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f1e:	b1b9      	cbz	r1, 8007f50 <_reclaim_reent+0xb0>
 8007f20:	4620      	mov	r0, r4
 8007f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f26:	f7ff bfad 	b.w	8007e84 <cleanup_glue>
 8007f2a:	5949      	ldr	r1, [r1, r5]
 8007f2c:	b941      	cbnz	r1, 8007f40 <_reclaim_reent+0xa0>
 8007f2e:	3504      	adds	r5, #4
 8007f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f32:	2d80      	cmp	r5, #128	; 0x80
 8007f34:	68d9      	ldr	r1, [r3, #12]
 8007f36:	d1f8      	bne.n	8007f2a <_reclaim_reent+0x8a>
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f7ff fec7 	bl	8007ccc <_free_r>
 8007f3e:	e7ba      	b.n	8007eb6 <_reclaim_reent+0x16>
 8007f40:	680e      	ldr	r6, [r1, #0]
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7ff fec2 	bl	8007ccc <_free_r>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	e7ef      	b.n	8007f2c <_reclaim_reent+0x8c>
 8007f4c:	2500      	movs	r5, #0
 8007f4e:	e7ef      	b.n	8007f30 <_reclaim_reent+0x90>
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	bf00      	nop
 8007f54:	20000064 	.word	0x20000064

08007f58 <_sbrk_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	4d05      	ldr	r5, [pc, #20]	; (8007f74 <_sbrk_r+0x1c>)
 8007f5e:	4604      	mov	r4, r0
 8007f60:	4608      	mov	r0, r1
 8007f62:	602b      	str	r3, [r5, #0]
 8007f64:	f7fa fd14 	bl	8002990 <_sbrk>
 8007f68:	1c43      	adds	r3, r0, #1
 8007f6a:	d102      	bne.n	8007f72 <_sbrk_r+0x1a>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	b103      	cbz	r3, 8007f72 <_sbrk_r+0x1a>
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	bd38      	pop	{r3, r4, r5, pc}
 8007f74:	20001c48 	.word	0x20001c48

08007f78 <__sread>:
 8007f78:	b510      	push	{r4, lr}
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f80:	f000 fa7e 	bl	8008480 <_read_r>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	bfab      	itete	ge
 8007f88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f8c:	181b      	addge	r3, r3, r0
 8007f8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f92:	bfac      	ite	ge
 8007f94:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f96:	81a3      	strhlt	r3, [r4, #12]
 8007f98:	bd10      	pop	{r4, pc}

08007f9a <__swrite>:
 8007f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	05db      	lsls	r3, r3, #23
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	4616      	mov	r6, r2
 8007faa:	d505      	bpl.n	8007fb8 <__swrite+0x1e>
 8007fac:	2302      	movs	r3, #2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fb4:	f000 f9e0 	bl	8008378 <_lseek_r>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	4632      	mov	r2, r6
 8007fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fce:	f000 b885 	b.w	80080dc <_write_r>

08007fd2 <__sseek>:
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fda:	f000 f9cd 	bl	8008378 <_lseek_r>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	bf15      	itete	ne
 8007fe4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007fe6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007fea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007fee:	81a3      	strheq	r3, [r4, #12]
 8007ff0:	bf18      	it	ne
 8007ff2:	81a3      	strhne	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__sclose>:
 8007ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ffa:	f000 b8ef 	b.w	80081dc <_close_r>
	...

08008000 <strdup>:
 8008000:	4b02      	ldr	r3, [pc, #8]	; (800800c <strdup+0xc>)
 8008002:	4601      	mov	r1, r0
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	f000 b803 	b.w	8008010 <_strdup_r>
 800800a:	bf00      	nop
 800800c:	20000064 	.word	0x20000064

08008010 <_strdup_r>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4604      	mov	r4, r0
 8008014:	4608      	mov	r0, r1
 8008016:	460d      	mov	r5, r1
 8008018:	f7f8 f89a 	bl	8000150 <strlen>
 800801c:	1c46      	adds	r6, r0, #1
 800801e:	4631      	mov	r1, r6
 8008020:	4620      	mov	r0, r4
 8008022:	f7ff febb 	bl	8007d9c <_malloc_r>
 8008026:	4604      	mov	r4, r0
 8008028:	b118      	cbz	r0, 8008032 <_strdup_r+0x22>
 800802a:	4632      	mov	r2, r6
 800802c:	4629      	mov	r1, r5
 800802e:	f7ff fe23 	bl	8007c78 <memcpy>
 8008032:	4620      	mov	r0, r4
 8008034:	bd70      	pop	{r4, r5, r6, pc}
	...

08008038 <__swbuf_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	460e      	mov	r6, r1
 800803c:	4614      	mov	r4, r2
 800803e:	4605      	mov	r5, r0
 8008040:	b118      	cbz	r0, 800804a <__swbuf_r+0x12>
 8008042:	6983      	ldr	r3, [r0, #24]
 8008044:	b90b      	cbnz	r3, 800804a <__swbuf_r+0x12>
 8008046:	f7ff fcdb 	bl	8007a00 <__sinit>
 800804a:	4b21      	ldr	r3, [pc, #132]	; (80080d0 <__swbuf_r+0x98>)
 800804c:	429c      	cmp	r4, r3
 800804e:	d12b      	bne.n	80080a8 <__swbuf_r+0x70>
 8008050:	686c      	ldr	r4, [r5, #4]
 8008052:	69a3      	ldr	r3, [r4, #24]
 8008054:	60a3      	str	r3, [r4, #8]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	d52f      	bpl.n	80080bc <__swbuf_r+0x84>
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b36b      	cbz	r3, 80080bc <__swbuf_r+0x84>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	b2f6      	uxtb	r6, r6
 8008066:	1ac0      	subs	r0, r0, r3
 8008068:	6963      	ldr	r3, [r4, #20]
 800806a:	4637      	mov	r7, r6
 800806c:	4283      	cmp	r3, r0
 800806e:	dc04      	bgt.n	800807a <__swbuf_r+0x42>
 8008070:	4621      	mov	r1, r4
 8008072:	4628      	mov	r0, r5
 8008074:	f000 f944 	bl	8008300 <_fflush_r>
 8008078:	bb30      	cbnz	r0, 80080c8 <__swbuf_r+0x90>
 800807a:	68a3      	ldr	r3, [r4, #8]
 800807c:	3001      	adds	r0, #1
 800807e:	3b01      	subs	r3, #1
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	6022      	str	r2, [r4, #0]
 8008088:	701e      	strb	r6, [r3, #0]
 800808a:	6963      	ldr	r3, [r4, #20]
 800808c:	4283      	cmp	r3, r0
 800808e:	d004      	beq.n	800809a <__swbuf_r+0x62>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	07db      	lsls	r3, r3, #31
 8008094:	d506      	bpl.n	80080a4 <__swbuf_r+0x6c>
 8008096:	2e0a      	cmp	r6, #10
 8008098:	d104      	bne.n	80080a4 <__swbuf_r+0x6c>
 800809a:	4621      	mov	r1, r4
 800809c:	4628      	mov	r0, r5
 800809e:	f000 f92f 	bl	8008300 <_fflush_r>
 80080a2:	b988      	cbnz	r0, 80080c8 <__swbuf_r+0x90>
 80080a4:	4638      	mov	r0, r7
 80080a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080a8:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <__swbuf_r+0x9c>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <__swbuf_r+0x7a>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7cf      	b.n	8008052 <__swbuf_r+0x1a>
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__swbuf_r+0xa0>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7ca      	b.n	8008052 <__swbuf_r+0x1a>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f000 f81e 	bl	8008100 <__swsetup_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0cb      	beq.n	8008060 <__swbuf_r+0x28>
 80080c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080cc:	e7ea      	b.n	80080a4 <__swbuf_r+0x6c>
 80080ce:	bf00      	nop
 80080d0:	08008628 	.word	0x08008628
 80080d4:	08008648 	.word	0x08008648
 80080d8:	08008608 	.word	0x08008608

080080dc <_write_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	2200      	movs	r2, #0
 80080e6:	4d05      	ldr	r5, [pc, #20]	; (80080fc <_write_r+0x20>)
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7fa fc03 	bl	80028f6 <_write>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_write_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_write_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20001c48 	.word	0x20001c48

08008100 <__swsetup_r>:
 8008100:	4b32      	ldr	r3, [pc, #200]	; (80081cc <__swsetup_r+0xcc>)
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	681d      	ldr	r5, [r3, #0]
 8008106:	4606      	mov	r6, r0
 8008108:	460c      	mov	r4, r1
 800810a:	b125      	cbz	r5, 8008116 <__swsetup_r+0x16>
 800810c:	69ab      	ldr	r3, [r5, #24]
 800810e:	b913      	cbnz	r3, 8008116 <__swsetup_r+0x16>
 8008110:	4628      	mov	r0, r5
 8008112:	f7ff fc75 	bl	8007a00 <__sinit>
 8008116:	4b2e      	ldr	r3, [pc, #184]	; (80081d0 <__swsetup_r+0xd0>)
 8008118:	429c      	cmp	r4, r3
 800811a:	d10f      	bne.n	800813c <__swsetup_r+0x3c>
 800811c:	686c      	ldr	r4, [r5, #4]
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008124:	0719      	lsls	r1, r3, #28
 8008126:	d42c      	bmi.n	8008182 <__swsetup_r+0x82>
 8008128:	06dd      	lsls	r5, r3, #27
 800812a:	d411      	bmi.n	8008150 <__swsetup_r+0x50>
 800812c:	2309      	movs	r3, #9
 800812e:	6033      	str	r3, [r6, #0]
 8008130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008138:	81a3      	strh	r3, [r4, #12]
 800813a:	e03e      	b.n	80081ba <__swsetup_r+0xba>
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <__swsetup_r+0xd4>)
 800813e:	429c      	cmp	r4, r3
 8008140:	d101      	bne.n	8008146 <__swsetup_r+0x46>
 8008142:	68ac      	ldr	r4, [r5, #8]
 8008144:	e7eb      	b.n	800811e <__swsetup_r+0x1e>
 8008146:	4b24      	ldr	r3, [pc, #144]	; (80081d8 <__swsetup_r+0xd8>)
 8008148:	429c      	cmp	r4, r3
 800814a:	bf08      	it	eq
 800814c:	68ec      	ldreq	r4, [r5, #12]
 800814e:	e7e6      	b.n	800811e <__swsetup_r+0x1e>
 8008150:	0758      	lsls	r0, r3, #29
 8008152:	d512      	bpl.n	800817a <__swsetup_r+0x7a>
 8008154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008156:	b141      	cbz	r1, 800816a <__swsetup_r+0x6a>
 8008158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800815c:	4299      	cmp	r1, r3
 800815e:	d002      	beq.n	8008166 <__swsetup_r+0x66>
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff fdb3 	bl	8007ccc <_free_r>
 8008166:	2300      	movs	r3, #0
 8008168:	6363      	str	r3, [r4, #52]	; 0x34
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	2300      	movs	r3, #0
 8008174:	6063      	str	r3, [r4, #4]
 8008176:	6923      	ldr	r3, [r4, #16]
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f043 0308 	orr.w	r3, r3, #8
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	b94b      	cbnz	r3, 800819a <__swsetup_r+0x9a>
 8008186:	89a3      	ldrh	r3, [r4, #12]
 8008188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800818c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008190:	d003      	beq.n	800819a <__swsetup_r+0x9a>
 8008192:	4621      	mov	r1, r4
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f927 	bl	80083e8 <__smakebuf_r>
 800819a:	89a0      	ldrh	r0, [r4, #12]
 800819c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a0:	f010 0301 	ands.w	r3, r0, #1
 80081a4:	d00a      	beq.n	80081bc <__swsetup_r+0xbc>
 80081a6:	2300      	movs	r3, #0
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	6963      	ldr	r3, [r4, #20]
 80081ac:	425b      	negs	r3, r3
 80081ae:	61a3      	str	r3, [r4, #24]
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b943      	cbnz	r3, 80081c6 <__swsetup_r+0xc6>
 80081b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081b8:	d1ba      	bne.n	8008130 <__swsetup_r+0x30>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}
 80081bc:	0781      	lsls	r1, r0, #30
 80081be:	bf58      	it	pl
 80081c0:	6963      	ldrpl	r3, [r4, #20]
 80081c2:	60a3      	str	r3, [r4, #8]
 80081c4:	e7f4      	b.n	80081b0 <__swsetup_r+0xb0>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e7f7      	b.n	80081ba <__swsetup_r+0xba>
 80081ca:	bf00      	nop
 80081cc:	20000064 	.word	0x20000064
 80081d0:	08008628 	.word	0x08008628
 80081d4:	08008648 	.word	0x08008648
 80081d8:	08008608 	.word	0x08008608

080081dc <_close_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	2300      	movs	r3, #0
 80081e0:	4d05      	ldr	r5, [pc, #20]	; (80081f8 <_close_r+0x1c>)
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7fa fba1 	bl	800292e <_close>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_close_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_close_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20001c48 	.word	0x20001c48

080081fc <__sflush_r>:
 80081fc:	898a      	ldrh	r2, [r1, #12]
 80081fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008200:	4605      	mov	r5, r0
 8008202:	0710      	lsls	r0, r2, #28
 8008204:	460c      	mov	r4, r1
 8008206:	d457      	bmi.n	80082b8 <__sflush_r+0xbc>
 8008208:	684b      	ldr	r3, [r1, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	dc04      	bgt.n	8008218 <__sflush_r+0x1c>
 800820e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	dc01      	bgt.n	8008218 <__sflush_r+0x1c>
 8008214:	2000      	movs	r0, #0
 8008216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800821a:	2e00      	cmp	r6, #0
 800821c:	d0fa      	beq.n	8008214 <__sflush_r+0x18>
 800821e:	2300      	movs	r3, #0
 8008220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008224:	682f      	ldr	r7, [r5, #0]
 8008226:	602b      	str	r3, [r5, #0]
 8008228:	d032      	beq.n	8008290 <__sflush_r+0x94>
 800822a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	075a      	lsls	r2, r3, #29
 8008230:	d505      	bpl.n	800823e <__sflush_r+0x42>
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008238:	b10b      	cbz	r3, 800823e <__sflush_r+0x42>
 800823a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800823c:	1ac0      	subs	r0, r0, r3
 800823e:	2300      	movs	r3, #0
 8008240:	4602      	mov	r2, r0
 8008242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008244:	4628      	mov	r0, r5
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	47b0      	blx	r6
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	d106      	bne.n	800825e <__sflush_r+0x62>
 8008250:	6829      	ldr	r1, [r5, #0]
 8008252:	291d      	cmp	r1, #29
 8008254:	d82c      	bhi.n	80082b0 <__sflush_r+0xb4>
 8008256:	4a29      	ldr	r2, [pc, #164]	; (80082fc <__sflush_r+0x100>)
 8008258:	40ca      	lsrs	r2, r1
 800825a:	07d6      	lsls	r6, r2, #31
 800825c:	d528      	bpl.n	80082b0 <__sflush_r+0xb4>
 800825e:	2200      	movs	r2, #0
 8008260:	6062      	str	r2, [r4, #4]
 8008262:	6922      	ldr	r2, [r4, #16]
 8008264:	04d9      	lsls	r1, r3, #19
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	d504      	bpl.n	8008274 <__sflush_r+0x78>
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	d101      	bne.n	8008272 <__sflush_r+0x76>
 800826e:	682b      	ldr	r3, [r5, #0]
 8008270:	b903      	cbnz	r3, 8008274 <__sflush_r+0x78>
 8008272:	6560      	str	r0, [r4, #84]	; 0x54
 8008274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008276:	602f      	str	r7, [r5, #0]
 8008278:	2900      	cmp	r1, #0
 800827a:	d0cb      	beq.n	8008214 <__sflush_r+0x18>
 800827c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008280:	4299      	cmp	r1, r3
 8008282:	d002      	beq.n	800828a <__sflush_r+0x8e>
 8008284:	4628      	mov	r0, r5
 8008286:	f7ff fd21 	bl	8007ccc <_free_r>
 800828a:	2000      	movs	r0, #0
 800828c:	6360      	str	r0, [r4, #52]	; 0x34
 800828e:	e7c2      	b.n	8008216 <__sflush_r+0x1a>
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	2301      	movs	r3, #1
 8008294:	4628      	mov	r0, r5
 8008296:	47b0      	blx	r6
 8008298:	1c41      	adds	r1, r0, #1
 800829a:	d1c7      	bne.n	800822c <__sflush_r+0x30>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0c4      	beq.n	800822c <__sflush_r+0x30>
 80082a2:	2b1d      	cmp	r3, #29
 80082a4:	d001      	beq.n	80082aa <__sflush_r+0xae>
 80082a6:	2b16      	cmp	r3, #22
 80082a8:	d101      	bne.n	80082ae <__sflush_r+0xb2>
 80082aa:	602f      	str	r7, [r5, #0]
 80082ac:	e7b2      	b.n	8008214 <__sflush_r+0x18>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	e7ae      	b.n	8008216 <__sflush_r+0x1a>
 80082b8:	690f      	ldr	r7, [r1, #16]
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d0aa      	beq.n	8008214 <__sflush_r+0x18>
 80082be:	0793      	lsls	r3, r2, #30
 80082c0:	bf18      	it	ne
 80082c2:	2300      	movne	r3, #0
 80082c4:	680e      	ldr	r6, [r1, #0]
 80082c6:	bf08      	it	eq
 80082c8:	694b      	ldreq	r3, [r1, #20]
 80082ca:	1bf6      	subs	r6, r6, r7
 80082cc:	600f      	str	r7, [r1, #0]
 80082ce:	608b      	str	r3, [r1, #8]
 80082d0:	2e00      	cmp	r6, #0
 80082d2:	dd9f      	ble.n	8008214 <__sflush_r+0x18>
 80082d4:	4633      	mov	r3, r6
 80082d6:	463a      	mov	r2, r7
 80082d8:	4628      	mov	r0, r5
 80082da:	6a21      	ldr	r1, [r4, #32]
 80082dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80082e0:	47e0      	blx	ip
 80082e2:	2800      	cmp	r0, #0
 80082e4:	dc06      	bgt.n	80082f4 <__sflush_r+0xf8>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	e790      	b.n	8008216 <__sflush_r+0x1a>
 80082f4:	4407      	add	r7, r0
 80082f6:	1a36      	subs	r6, r6, r0
 80082f8:	e7ea      	b.n	80082d0 <__sflush_r+0xd4>
 80082fa:	bf00      	nop
 80082fc:	20400001 	.word	0x20400001

08008300 <_fflush_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	690b      	ldr	r3, [r1, #16]
 8008304:	4605      	mov	r5, r0
 8008306:	460c      	mov	r4, r1
 8008308:	b913      	cbnz	r3, 8008310 <_fflush_r+0x10>
 800830a:	2500      	movs	r5, #0
 800830c:	4628      	mov	r0, r5
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	b118      	cbz	r0, 800831a <_fflush_r+0x1a>
 8008312:	6983      	ldr	r3, [r0, #24]
 8008314:	b90b      	cbnz	r3, 800831a <_fflush_r+0x1a>
 8008316:	f7ff fb73 	bl	8007a00 <__sinit>
 800831a:	4b14      	ldr	r3, [pc, #80]	; (800836c <_fflush_r+0x6c>)
 800831c:	429c      	cmp	r4, r3
 800831e:	d11b      	bne.n	8008358 <_fflush_r+0x58>
 8008320:	686c      	ldr	r4, [r5, #4]
 8008322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d0ef      	beq.n	800830a <_fflush_r+0xa>
 800832a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800832c:	07d0      	lsls	r0, r2, #31
 800832e:	d404      	bmi.n	800833a <_fflush_r+0x3a>
 8008330:	0599      	lsls	r1, r3, #22
 8008332:	d402      	bmi.n	800833a <_fflush_r+0x3a>
 8008334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008336:	f7ff fc94 	bl	8007c62 <__retarget_lock_acquire_recursive>
 800833a:	4628      	mov	r0, r5
 800833c:	4621      	mov	r1, r4
 800833e:	f7ff ff5d 	bl	80081fc <__sflush_r>
 8008342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008344:	4605      	mov	r5, r0
 8008346:	07da      	lsls	r2, r3, #31
 8008348:	d4e0      	bmi.n	800830c <_fflush_r+0xc>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	059b      	lsls	r3, r3, #22
 800834e:	d4dd      	bmi.n	800830c <_fflush_r+0xc>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f7ff fc87 	bl	8007c64 <__retarget_lock_release_recursive>
 8008356:	e7d9      	b.n	800830c <_fflush_r+0xc>
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <_fflush_r+0x70>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <_fflush_r+0x62>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7df      	b.n	8008322 <_fflush_r+0x22>
 8008362:	4b04      	ldr	r3, [pc, #16]	; (8008374 <_fflush_r+0x74>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7da      	b.n	8008322 <_fflush_r+0x22>
 800836c:	08008628 	.word	0x08008628
 8008370:	08008648 	.word	0x08008648
 8008374:	08008608 	.word	0x08008608

08008378 <_lseek_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	2200      	movs	r2, #0
 8008382:	4d05      	ldr	r5, [pc, #20]	; (8008398 <_lseek_r+0x20>)
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7fa faf5 	bl	8002976 <_lseek>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_lseek_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_lseek_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20001c48 	.word	0x20001c48

0800839c <__swhatbuf_r>:
 800839c:	b570      	push	{r4, r5, r6, lr}
 800839e:	460e      	mov	r6, r1
 80083a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a4:	4614      	mov	r4, r2
 80083a6:	2900      	cmp	r1, #0
 80083a8:	461d      	mov	r5, r3
 80083aa:	b096      	sub	sp, #88	; 0x58
 80083ac:	da08      	bge.n	80083c0 <__swhatbuf_r+0x24>
 80083ae:	2200      	movs	r2, #0
 80083b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083b4:	602a      	str	r2, [r5, #0]
 80083b6:	061a      	lsls	r2, r3, #24
 80083b8:	d410      	bmi.n	80083dc <__swhatbuf_r+0x40>
 80083ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083be:	e00e      	b.n	80083de <__swhatbuf_r+0x42>
 80083c0:	466a      	mov	r2, sp
 80083c2:	f000 f86f 	bl	80084a4 <_fstat_r>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	dbf1      	blt.n	80083ae <__swhatbuf_r+0x12>
 80083ca:	9a01      	ldr	r2, [sp, #4]
 80083cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083d4:	425a      	negs	r2, r3
 80083d6:	415a      	adcs	r2, r3
 80083d8:	602a      	str	r2, [r5, #0]
 80083da:	e7ee      	b.n	80083ba <__swhatbuf_r+0x1e>
 80083dc:	2340      	movs	r3, #64	; 0x40
 80083de:	2000      	movs	r0, #0
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	b016      	add	sp, #88	; 0x58
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e8 <__smakebuf_r>:
 80083e8:	898b      	ldrh	r3, [r1, #12]
 80083ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083ec:	079d      	lsls	r5, r3, #30
 80083ee:	4606      	mov	r6, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	d507      	bpl.n	8008404 <__smakebuf_r+0x1c>
 80083f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	2301      	movs	r3, #1
 80083fe:	6163      	str	r3, [r4, #20]
 8008400:	b002      	add	sp, #8
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	466a      	mov	r2, sp
 8008406:	ab01      	add	r3, sp, #4
 8008408:	f7ff ffc8 	bl	800839c <__swhatbuf_r>
 800840c:	9900      	ldr	r1, [sp, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	4630      	mov	r0, r6
 8008412:	f7ff fcc3 	bl	8007d9c <_malloc_r>
 8008416:	b948      	cbnz	r0, 800842c <__smakebuf_r+0x44>
 8008418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841c:	059a      	lsls	r2, r3, #22
 800841e:	d4ef      	bmi.n	8008400 <__smakebuf_r+0x18>
 8008420:	f023 0303 	bic.w	r3, r3, #3
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	81a3      	strh	r3, [r4, #12]
 800842a:	e7e3      	b.n	80083f4 <__smakebuf_r+0xc>
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <__smakebuf_r+0x7c>)
 800842e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	6020      	str	r0, [r4, #0]
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	6120      	str	r0, [r4, #16]
 800843e:	6163      	str	r3, [r4, #20]
 8008440:	9b01      	ldr	r3, [sp, #4]
 8008442:	b15b      	cbz	r3, 800845c <__smakebuf_r+0x74>
 8008444:	4630      	mov	r0, r6
 8008446:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800844a:	f000 f83d 	bl	80084c8 <_isatty_r>
 800844e:	b128      	cbz	r0, 800845c <__smakebuf_r+0x74>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	89a0      	ldrh	r0, [r4, #12]
 800845e:	4305      	orrs	r5, r0
 8008460:	81a5      	strh	r5, [r4, #12]
 8008462:	e7cd      	b.n	8008400 <__smakebuf_r+0x18>
 8008464:	08007999 	.word	0x08007999

08008468 <__malloc_lock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_lock+0x8>)
 800846a:	f7ff bbfa 	b.w	8007c62 <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	20001c3c 	.word	0x20001c3c

08008474 <__malloc_unlock>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__malloc_unlock+0x8>)
 8008476:	f7ff bbf5 	b.w	8007c64 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	20001c3c 	.word	0x20001c3c

08008480 <_read_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	4611      	mov	r1, r2
 8008488:	2200      	movs	r2, #0
 800848a:	4d05      	ldr	r5, [pc, #20]	; (80084a0 <_read_r+0x20>)
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7fa fa14 	bl	80028bc <_read>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_read_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_read_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	20001c48 	.word	0x20001c48

080084a4 <_fstat_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	2300      	movs	r3, #0
 80084a8:	4d06      	ldr	r5, [pc, #24]	; (80084c4 <_fstat_r+0x20>)
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	4611      	mov	r1, r2
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	f7fa fa47 	bl	8002944 <_fstat>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d102      	bne.n	80084c0 <_fstat_r+0x1c>
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	b103      	cbz	r3, 80084c0 <_fstat_r+0x1c>
 80084be:	6023      	str	r3, [r4, #0]
 80084c0:	bd38      	pop	{r3, r4, r5, pc}
 80084c2:	bf00      	nop
 80084c4:	20001c48 	.word	0x20001c48

080084c8 <_isatty_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	2300      	movs	r3, #0
 80084cc:	4d05      	ldr	r5, [pc, #20]	; (80084e4 <_isatty_r+0x1c>)
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7fa fa45 	bl	8002962 <_isatty>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_isatty_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_isatty_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20001c48 	.word	0x20001c48

080084e8 <_init>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	bf00      	nop
 80084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ee:	bc08      	pop	{r3}
 80084f0:	469e      	mov	lr, r3
 80084f2:	4770      	bx	lr

080084f4 <_fini>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr
